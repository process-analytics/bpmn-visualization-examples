var ShapeBpmnElementKind;(function(ShapeBpmnElementKind){ShapeBpmnElementKind["LANE"]="lane";ShapeBpmnElementKind["POOL"]="pool";ShapeBpmnElementKind["CALL_ACTIVITY"]="callActivity";ShapeBpmnElementKind["SUB_PROCESS"]="subProcess";ShapeBpmnElementKind["TASK"]="task";ShapeBpmnElementKind["TASK_USER"]="userTask";ShapeBpmnElementKind["TASK_SERVICE"]="serviceTask";ShapeBpmnElementKind["TASK_RECEIVE"]="receiveTask";ShapeBpmnElementKind["TEXT_ANNOTATION"]="textAnnotation";ShapeBpmnElementKind["GATEWAY_PARALLEL"]="parallelGateway";ShapeBpmnElementKind["GATEWAY_EXCLUSIVE"]="exclusiveGateway";ShapeBpmnElementKind["GATEWAY_INCLUSIVE"]="inclusiveGateway";ShapeBpmnElementKind["EVENT_START"]="startEvent";ShapeBpmnElementKind["EVENT_END"]="endEvent";ShapeBpmnElementKind["EVENT_INTERMEDIATE_CATCH"]="intermediateCatchEvent";ShapeBpmnElementKind["EVENT_INTERMEDIATE_THROW"]="intermediateThrowEvent";ShapeBpmnElementKind["EVENT_BOUNDARY"]="boundaryEvent"})(ShapeBpmnElementKind||(ShapeBpmnElementKind={}));class ShapeUtil{static filterKind(suffix,ignoreCase=false){return Object.values(ShapeBpmnElementKind).filter(kind=>{if(ignoreCase){return kind.endsWith(suffix)||kind.toLowerCase().endsWith(suffix.toLowerCase())}return kind.endsWith(suffix)})}static isEvent(kind){return this.EVENT_KINDS.includes(kind)}static isCallActivity(kind){return ShapeBpmnElementKind.CALL_ACTIVITY===kind}static isSubProcess(kind){return ShapeBpmnElementKind.SUB_PROCESS===kind}static isBoundaryEvent(kind){return ShapeBpmnElementKind.EVENT_BOUNDARY===kind}static canHaveNoneEvent(kind){return ShapeBpmnElementKind.EVENT_INTERMEDIATE_THROW===kind||ShapeBpmnElementKind.EVENT_END===kind||ShapeBpmnElementKind.EVENT_START===kind}static isActivity(kind){return this.ACTIVITY_KINDS.includes(kind)}static isWithDefaultSequenceFlow(kind){return this.FLOWNODE_WITH_DEFAULT_SEQUENCE_FLOW_KINDS.includes(kind)}static topLevelBpmnEventKinds(){return this.EVENT_KINDS}static activityKinds(){return this.ACTIVITY_KINDS}static taskKinds(){return this.TASK_KINDS}static gatewayKinds(){return this.GATEWAY_KINDS}static flowNodeKinds(){return Object.values(ShapeBpmnElementKind).filter(kind=>kind!=ShapeBpmnElementKind.LANE)}static isPoolOrLane(kind){return kind==ShapeBpmnElementKind.POOL||kind==ShapeBpmnElementKind.LANE}}ShapeUtil.EVENT_KINDS=ShapeUtil.filterKind("Event");ShapeUtil.GATEWAY_KINDS=ShapeUtil.filterKind("Gateway");ShapeUtil.TASK_KINDS=ShapeUtil.filterKind("Task",true);ShapeUtil.ACTIVITY_KINDS=[...ShapeUtil.TASK_KINDS,ShapeBpmnElementKind.CALL_ACTIVITY,ShapeBpmnElementKind.SUB_PROCESS];ShapeUtil.FLOWNODE_WITH_DEFAULT_SEQUENCE_FLOW_KINDS=[...ShapeUtil.ACTIVITY_KINDS,ShapeBpmnElementKind.GATEWAY_EXCLUSIVE,ShapeBpmnElementKind.GATEWAY_INCLUSIVE];var SequenceFlowKind;(function(SequenceFlowKind){SequenceFlowKind["NORMAL"]="normal";SequenceFlowKind["DEFAULT"]="default";SequenceFlowKind["CONDITIONAL_FROM_ACTIVITY"]="conditional_from_activity";SequenceFlowKind["CONDITIONAL_FROM_GATEWAY"]="conditional_from_gateway"})(SequenceFlowKind||(SequenceFlowKind={}));var ShapeBpmnEventKind;(function(ShapeBpmnEventKind){ShapeBpmnEventKind["NONE"]="none";ShapeBpmnEventKind["TERMINATE"]="terminate";ShapeBpmnEventKind["CANCEL"]="cancel";ShapeBpmnEventKind["COMPENSATION"]="compensate";ShapeBpmnEventKind["CONDITIONAL"]="conditional";ShapeBpmnEventKind["ERROR"]="error";ShapeBpmnEventKind["ESCALATION"]="escalation";ShapeBpmnEventKind["LINK"]="link";ShapeBpmnEventKind["MESSAGE"]="message";ShapeBpmnEventKind["SIGNAL"]="signal";ShapeBpmnEventKind["TIMER"]="timer"})(ShapeBpmnEventKind||(ShapeBpmnEventKind={}));const supportedBpmnEventKinds=[ShapeBpmnEventKind.TERMINATE,ShapeBpmnEventKind.TIMER,ShapeBpmnEventKind.MESSAGE,ShapeBpmnEventKind.SIGNAL];var MarkerIdentifier;(function(MarkerIdentifier){MarkerIdentifier["ARROW_DASH"]="bpmn.dash"})(MarkerIdentifier||(MarkerIdentifier={}));var StyleDefault;(function(StyleDefault){StyleDefault[StyleDefault["STROKE_WIDTH_THIN"]=2]="STROKE_WIDTH_THIN";StyleDefault[StyleDefault["STROKE_WIDTH_THICK"]=5]="STROKE_WIDTH_THICK";StyleDefault[StyleDefault["SHAPE_ACTIVITY_BOTTOM_MARGIN"]=7]="SHAPE_ACTIVITY_BOTTOM_MARGIN";StyleDefault[StyleDefault["SHAPE_ACTIVITY_FROM_CENTER_MARGIN"]=7]="SHAPE_ACTIVITY_FROM_CENTER_MARGIN";StyleDefault["DEFAULT_FILL_COLOR"]="White";StyleDefault["DEFAULT_STROKE_COLOR"]="Black";StyleDefault["DEFAULT_FONT_FAMILY"]="Arial, Helvetica, sans-serif";StyleDefault[StyleDefault["DEFAULT_FONT_SIZE"]=11]="DEFAULT_FONT_SIZE";StyleDefault["DEFAULT_FONT_COLOR"]="Black";StyleDefault[StyleDefault["DEFAULT_MARGIN"]=0]="DEFAULT_MARGIN";StyleDefault[StyleDefault["DEFAULT_DASHED"]=0]="DEFAULT_DASHED";StyleDefault[StyleDefault["DEFAULT_FIX_DASH"]=0]="DEFAULT_FIX_DASH";StyleDefault["DEFAULT_DASH_PATTERN"]="3 3"})(StyleDefault||(StyleDefault={}));var StyleIdentifier;(function(StyleIdentifier){StyleIdentifier["BPMN_STYLE_EVENT_KIND"]="bpmn.eventKind";StyleIdentifier["BPMN_STYLE_SUB_PROCESS_KIND"]="bpmn.subProcessKind";StyleIdentifier["BPMN_STYLE_IS_INTERRUPTING"]="bpmn.isInterrupting";StyleIdentifier["BPMN_STYLE_MARKERS"]="bpmn.markers"})(StyleIdentifier||(StyleIdentifier={}));class StyleUtils{static getFillColor(style){return mxUtils.getValue(style,mxConstants.STYLE_FILLCOLOR,StyleDefault.DEFAULT_FILL_COLOR)}static getStrokeColor(style){return mxUtils.getValue(style,mxConstants.STYLE_STROKECOLOR,StyleDefault.DEFAULT_STROKE_COLOR)}static getStrokeWidth(style){return mxUtils.getValue(style,mxConstants.STYLE_STROKEWIDTH,StyleDefault.STROKE_WIDTH_THIN)}static getMargin(style){return mxUtils.getValue(style,mxConstants.STYLE_MARGIN,StyleDefault.DEFAULT_MARGIN)}static isDashed(style){return mxUtils.getValue(style,mxConstants.STYLE_DASHED,StyleDefault.DEFAULT_DASHED)}static isFixDash(style){return mxUtils.getValue(style,mxConstants.STYLE_FIX_DASH,StyleDefault.DEFAULT_FIX_DASH)}static getDashPattern(style){return mxUtils.getValue(style,mxConstants.STYLE_DASH_PATTERN,StyleDefault.DEFAULT_DASH_PATTERN)}static getBpmnEventKind(style){return mxUtils.getValue(style,StyleIdentifier.BPMN_STYLE_EVENT_KIND,ShapeBpmnEventKind.NONE)}static getBpmnSubProcessKind(style){return mxUtils.getValue(style,StyleIdentifier.BPMN_STYLE_SUB_PROCESS_KIND,undefined)}static getBpmnIsInterrupting(style){return mxUtils.getValue(style,StyleIdentifier.BPMN_STYLE_IS_INTERRUPTING,undefined)}static getBpmnMarkers(style){return mxUtils.getValue(style,StyleIdentifier.BPMN_STYLE_MARKERS,undefined)}}class Shape{constructor(id,bpmnElement,bounds,label){this.id=id;this.bpmnElement=bpmnElement;this.bounds=bounds;this.label=label}}class ShapeBpmnElement{constructor(id,name,kind,parentId,instantiate=false){this.id=id;this.name=name;this.kind=kind;this.parentId=parentId;this.instantiate=instantiate}}class ShapeBpmnActivity extends ShapeBpmnElement{constructor(id,name,kind,parentId,instantiate,markers=[]){super(id,name,kind,parentId,instantiate);this.markers=markers}}class ShapeBpmnCallActivity extends ShapeBpmnActivity{constructor(id,name,callActivityKind,parentId,markers){super(id,name,ShapeBpmnElementKind.CALL_ACTIVITY,parentId,undefined,markers);this.callActivityKind=callActivityKind}}class ShapeBpmnSubProcess extends ShapeBpmnActivity{constructor(id,name,subProcessKind,parentId,markers){super(id,name,ShapeBpmnElementKind.SUB_PROCESS,parentId,undefined,markers);this.subProcessKind=subProcessKind}}class ShapeBpmnEvent extends ShapeBpmnElement{constructor(id,name,elementKind,eventKind,parentId){super(id,name,elementKind,parentId);this.eventKind=eventKind}}class ShapeBpmnBoundaryEvent extends ShapeBpmnEvent{constructor(id,name,eventKind,parentId,isInterrupting=true){super(id,name,ShapeBpmnElementKind.EVENT_BOUNDARY,eventKind,parentId);this.isInterrupting=isInterrupting}}class Participant{constructor(id,name,processRef){this.id=id;this.name=name;this.processRef=processRef}}var FlowKind;(function(FlowKind){FlowKind["SEQUENCE_FLOW"]="sequenceFlow";FlowKind["MESSAGE_FLOW"]="messageFlow";FlowKind["ASSOCIATION_FLOW"]="association"})(FlowKind||(FlowKind={}));var AssociationDirectionKind;(function(AssociationDirectionKind){AssociationDirectionKind["NONE"]="None";AssociationDirectionKind["ONE"]="One";AssociationDirectionKind["BOTH"]="Both"})(AssociationDirectionKind||(AssociationDirectionKind={}));class Flow{constructor(id,name,kind,sourceRefId,targetRefId){this.id=id;this.name=name;this.kind=kind;this.sourceRefId=sourceRefId;this.targetRefId=targetRefId}}class SequenceFlow extends Flow{constructor(id,name,sourceRefId,targetRefId,sequenceFlowKind=SequenceFlowKind.NORMAL){super(id,name,FlowKind.SEQUENCE_FLOW,sourceRefId,targetRefId);this.sequenceFlowKind=sequenceFlowKind}}class MessageFlow extends Flow{constructor(id,name,sourceRefId,targetRefId){super(id,name,FlowKind.MESSAGE_FLOW,sourceRefId,targetRefId)}}class AssociationFlow extends Flow{constructor(id,name,sourceRefId,targetRefId,associationDirectionKind=AssociationDirectionKind.NONE){super(id,name,FlowKind.ASSOCIATION_FLOW,sourceRefId,targetRefId);this.associationDirectionKind=associationDirectionKind}}var MessageVisibleKind;(function(MessageVisibleKind){MessageVisibleKind["NONE"]="none";MessageVisibleKind["INITIATING"]="initiating";MessageVisibleKind["NON_INITIATING"]="non_initiating"})(MessageVisibleKind||(MessageVisibleKind={}));var ShapeBpmnMarkerKind;(function(ShapeBpmnMarkerKind){ShapeBpmnMarkerKind["LOOP"]="loop";ShapeBpmnMarkerKind["MULTI_INSTANCE_SEQUENTIAL"]="sequential multi instance";ShapeBpmnMarkerKind["MULTI_INSTANCE_PARALLEL"]="parallel multi instance";ShapeBpmnMarkerKind["EXPAND"]="expand"})(ShapeBpmnMarkerKind||(ShapeBpmnMarkerKind={}));class StyleConfigurator{constructor(graph){this.graph=graph;this.specificFlowStyles=new Map([[FlowKind.SEQUENCE_FLOW,style=>{style[mxConstants.STYLE_ENDARROW]=mxConstants.ARROW_BLOCK_THIN}],[FlowKind.MESSAGE_FLOW,style=>{style[mxConstants.STYLE_DASHED]=true;style[mxConstants.STYLE_DASH_PATTERN]="8 5";style[mxConstants.STYLE_STARTARROW]=mxConstants.ARROW_OVAL;style[mxConstants.STYLE_STARTSIZE]=8;style[mxConstants.STYLE_STARTFILL]=false;style[mxConstants.STYLE_ENDARROW]=mxConstants.ARROW_BLOCK_THIN;style[mxConstants.STYLE_ENDFILL]=false}],[FlowKind.ASSOCIATION_FLOW,style=>{style[mxConstants.STYLE_DASHED]=true;style[mxConstants.STYLE_DASH_PATTERN]="1 2";style[mxConstants.STYLE_ENDARROW]=mxConstants.ARROW_OPEN_THIN;style[mxConstants.STYLE_STARTARROW]=mxConstants.ARROW_OPEN_THIN;style[mxConstants.STYLE_STARTSIZE]=12}]]);this.specificSequenceFlowStyles=new Map([[SequenceFlowKind.DEFAULT,style=>{style[mxConstants.STYLE_STARTARROW]=MarkerIdentifier.ARROW_DASH}],[SequenceFlowKind.CONDITIONAL_FROM_ACTIVITY,style=>{style[mxConstants.STYLE_STARTARROW]=mxConstants.ARROW_DIAMOND_THIN;style[mxConstants.STYLE_STARTSIZE]=18;style[mxConstants.STYLE_STARTFILL]=false}]]);this.specificAssociationFlowStyles=new Map([[AssociationDirectionKind.NONE,style=>{style[mxConstants.STYLE_STARTARROW]=null;style[mxConstants.STYLE_ENDARROW]=null;style[mxConstants.STYLE_EDGE]=null}],[AssociationDirectionKind.ONE,style=>{style[mxConstants.STYLE_STARTARROW]=null;style[mxConstants.STYLE_EDGE]=null}],[AssociationDirectionKind.BOTH,style=>{style[mxConstants.STYLE_EDGE]=null}]])}configureStyles(){mxConstants.RECTANGLE_ROUNDING_FACTOR=.1;this.configureDefaultVertexStyle();this.configurePoolStyle();this.configureLaneStyle();this.configureTextAnnotationStyle();this.configureActivityStyles();this.configureEventStyles();this.configureGatewayStyles();this.configureDefaultEdgeStyle();this.configureFlowStyles()}getStylesheet(){return this.graph.getStylesheet()}getDefaultVertexStyle(){return this.getStylesheet().getDefaultVertexStyle()}getDefaultEdgeStyle(){return this.getStylesheet().getDefaultEdgeStyle()}cloneDefaultVertexStyle(){const defaultStyle=this.getDefaultVertexStyle();return mxUtils.clone(defaultStyle)}cloneDefaultEdgeStyle(){const defaultStyle=this.getDefaultEdgeStyle();return mxUtils.clone(defaultStyle)}putCellStyle(name,style){this.getStylesheet().putCellStyle(name,style)}configureDefaultVertexStyle(){const style=this.getDefaultVertexStyle();this.configureCommonDefaultStyle(style)}configurePoolStyle(){const style=this.cloneDefaultVertexStyle();style[mxConstants.STYLE_SHAPE]=mxConstants.SHAPE_SWIMLANE;style[mxConstants.STYLE_VERTICAL_ALIGN]=mxConstants.ALIGN_MIDDLE;style[mxConstants.STYLE_ALIGN]=mxConstants.ALIGN_CENTER;style[mxConstants.STYLE_HORIZONTAL]=false;style[mxConstants.STYLE_FILLCOLOR]="#d3d2d1";style[mxConstants.STYLE_STARTSIZE]=30;this.graph.getStylesheet().putCellStyle(ShapeBpmnElementKind.POOL,style)}configureLaneStyle(){const style=this.cloneDefaultVertexStyle();style[mxConstants.STYLE_SHAPE]=mxConstants.SHAPE_SWIMLANE;style[mxConstants.STYLE_VERTICAL_ALIGN]=mxConstants.ALIGN_MIDDLE;style[mxConstants.STYLE_ALIGN]=mxConstants.ALIGN_CENTER;style[mxConstants.STYLE_HORIZONTAL]=false;style[mxConstants.STYLE_SWIMLANE_LINE]=0;this.graph.getStylesheet().putCellStyle(ShapeBpmnElementKind.LANE,style)}configureEventStyles(){ShapeUtil.topLevelBpmnEventKinds().forEach(kind=>{const style=this.cloneDefaultVertexStyle();style[mxConstants.STYLE_SHAPE]=kind;style[mxConstants.STYLE_PERIMETER]=mxPerimeter.EllipsePerimeter;style[mxConstants.STYLE_VERTICAL_LABEL_POSITION]=mxConstants.ALIGN_BOTTOM;this.putCellStyle(kind,style)})}configureTextAnnotationStyle(){const style=this.cloneDefaultVertexStyle();style[mxConstants.STYLE_SHAPE]=ShapeBpmnElementKind.TEXT_ANNOTATION;style[mxConstants.STYLE_VERTICAL_ALIGN]=mxConstants.ALIGN_MIDDLE;style[mxConstants.STYLE_ALIGN]=mxConstants.ALIGN_LEFT;style[mxConstants.STYLE_SPACING_LEFT]=5;this.putCellStyle(ShapeBpmnElementKind.TEXT_ANNOTATION,style)}configureActivityStyles(){ShapeUtil.activityKinds().forEach(kind=>{const style=this.cloneDefaultVertexStyle();style[mxConstants.STYLE_SHAPE]=kind;style[mxConstants.STYLE_VERTICAL_ALIGN]=mxConstants.ALIGN_MIDDLE;this.putCellStyle(kind,style)})}configureGatewayStyles(){ShapeUtil.gatewayKinds().forEach(kind=>{const style=this.cloneDefaultVertexStyle();style[mxConstants.STYLE_SHAPE]=kind;style[mxConstants.STYLE_PERIMETER]=mxPerimeter.RhombusPerimeter;style[mxConstants.STYLE_VERTICAL_ALIGN]=mxConstants.ALIGN_TOP;style[mxConstants.STYLE_LABEL_POSITION]=mxConstants.ALIGN_LEFT;style[mxConstants.STYLE_VERTICAL_LABEL_POSITION]=mxConstants.ALIGN_TOP;this.putCellStyle(kind,style)})}configureDefaultEdgeStyle(){const style=this.getDefaultEdgeStyle();style[mxConstants.STYLE_EDGE]=mxConstants.EDGESTYLE_SEGMENT;style[mxConstants.STYLE_ENDSIZE]=12;style[mxConstants.STYLE_STROKEWIDTH]=1.5;style[mxConstants.STYLE_ROUNDED]=1;style[mxConstants.STYLE_ARCSIZE]=5;style[mxConstants.STYLE_VERTICAL_ALIGN]=mxConstants.ALIGN_BOTTOM;delete style[mxConstants.STYLE_ENDARROW];this.configureCommonDefaultStyle(style)}configureCommonDefaultStyle(style){style[mxConstants.STYLE_FONTFAMILY]=StyleDefault.DEFAULT_FONT_FAMILY;style[mxConstants.STYLE_FONTSIZE]=StyleDefault.DEFAULT_FONT_SIZE;style[mxConstants.STYLE_FONTCOLOR]=StyleDefault.DEFAULT_FONT_COLOR;style[mxConstants.STYLE_FILLCOLOR]=StyleDefault.DEFAULT_FILL_COLOR;style[mxConstants.STYLE_STROKECOLOR]=StyleDefault.DEFAULT_STROKE_COLOR;style[mxConstants.STYLE_LABEL_BACKGROUNDCOLOR]=mxConstants.NONE;style[mxConstants.STYLE_WHITE_SPACE]="wrap"}configureEdgeStyles(styleKinds,specificStyles){styleKinds.forEach(kind=>{const style=this.cloneDefaultEdgeStyle();const updateEdgeStyle=specificStyles.get(kind)||(()=>{});updateEdgeStyle(style);this.graph.getStylesheet().putCellStyle(kind.toString(),style)})}configureSequenceFlowStyles(){this.configureEdgeStyles(Object.values(SequenceFlowKind),this.specificSequenceFlowStyles)}configureAssociationFlowStyles(){this.configureEdgeStyles(Object.values(AssociationDirectionKind),this.specificAssociationFlowStyles)}configureFlowStyles(){this.configureEdgeStyles(Object.values(FlowKind),this.specificFlowStyles);this.configureSequenceFlowStyles();this.configureAssociationFlowStyles()}computeStyle(bpmnCell,labelBounds){var _a,_b;const styleValues=new Map;const styles=[(_a=bpmnCell.bpmnElement)===null||_a===void 0?void 0:_a.kind];const bpmnElement=bpmnCell.bpmnElement;if(bpmnCell instanceof Shape){if(bpmnElement instanceof ShapeBpmnEvent){styleValues.set(StyleIdentifier.BPMN_STYLE_EVENT_KIND,bpmnElement.eventKind);if(bpmnElement instanceof ShapeBpmnBoundaryEvent){styleValues.set(StyleIdentifier.BPMN_STYLE_IS_INTERRUPTING,String(bpmnElement.isInterrupting))}}else if(bpmnElement instanceof ShapeBpmnActivity){if(bpmnElement instanceof ShapeBpmnSubProcess){styleValues.set(StyleIdentifier.BPMN_STYLE_SUB_PROCESS_KIND,bpmnElement.subProcessKind)}const markers=bpmnElement.markers;if(markers.length>0){styleValues.set(StyleIdentifier.BPMN_STYLE_MARKERS,markers.join(","))}}}else{if(bpmnElement instanceof SequenceFlow){styles.push(bpmnElement.sequenceFlowKind)}if(bpmnElement instanceof AssociationFlow){styles.push(bpmnElement.associationDirectionKind)}switch(bpmnCell.messageVisibleKind){case MessageVisibleKind.INITIATING:{styleValues.set(mxConstants.STYLE_STROKECOLOR,"Yellow");break}case MessageVisibleKind.NON_INITIATING:{styleValues.set(mxConstants.STYLE_STROKECOLOR,"DeepSkyBlue");break}}}const font=(_b=bpmnCell.label)===null||_b===void 0?void 0:_b.font;if(font){styleValues.set(mxConstants.STYLE_FONTFAMILY,font.name);styleValues.set(mxConstants.STYLE_FONTSIZE,font.size);styleValues.set(mxConstants.STYLE_FONTSTYLE,StyleConfigurator.getFontStyleValue(font))}if(labelBounds){styleValues.set(mxConstants.STYLE_VERTICAL_ALIGN,mxConstants.ALIGN_TOP);if(bpmnCell.bpmnElement.kind!=ShapeBpmnElementKind.TEXT_ANNOTATION){styleValues.set(mxConstants.STYLE_ALIGN,mxConstants.ALIGN_CENTER)}if(bpmnCell instanceof Shape){styleValues.set(mxConstants.STYLE_LABEL_WIDTH,labelBounds.width+1);styleValues.set(mxConstants.STYLE_LABEL_POSITION,mxConstants.ALIGN_TOP);styleValues.set(mxConstants.STYLE_VERTICAL_LABEL_POSITION,mxConstants.ALIGN_LEFT)}}else if(bpmnCell instanceof Shape&&(bpmnElement instanceof ShapeBpmnSubProcess||bpmnElement instanceof ShapeBpmnCallActivity)&&!bpmnElement.markers.includes(ShapeBpmnMarkerKind.EXPAND)){styleValues.set(mxConstants.STYLE_VERTICAL_ALIGN,mxConstants.ALIGN_TOP)}return[].concat([...styles]).concat([...styleValues].filter(([,v])=>v).map(([key,value])=>key+"="+value)).join(";")}static getFontStyleValue(font){let value=0;if(font.isBold){value+=mxConstants.FONT_BOLD}if(font.isItalic){value+=mxConstants.FONT_ITALIC}if(font.isStrikeThrough){value+=mxConstants.FONT_STRIKETHROUGH}if(font.isUnderline){value+=mxConstants.FONT_UNDERLINE}return value}}function computeScaledIconSize(initialIconSize,iconStyleConfiguration,shapeConfiguration,ratioFromShape){let iconWidthProportionalToShape;let iconHeightProportionalToShape;if(initialIconSize.height<initialIconSize.width||initialIconSize.height==initialIconSize.width&&shapeConfiguration.w<=shapeConfiguration.h){iconWidthProportionalToShape=shapeConfiguration.w;iconHeightProportionalToShape=shapeConfiguration.w*initialIconSize.height/initialIconSize.width}else{iconWidthProportionalToShape=shapeConfiguration.h*initialIconSize.width/initialIconSize.height;iconHeightProportionalToShape=shapeConfiguration.h}const inset=iconStyleConfiguration.strokeWidth?(iconStyleConfiguration.strokeWidth-1)*2:0;const paintIconWidth=iconWidthProportionalToShape*ratioFromShape-inset;const paintIconHeight=iconHeightProportionalToShape*ratioFromShape-inset;return{width:paintIconWidth,height:paintIconHeight}}class BpmnCanvas{constructor(config){this.iconPaintingOriginX=0;this.iconPaintingOriginY=0;this.c=config.mxCanvas;this.shapeConfiguration=config.shapeConfiguration;const iconConfiguration=config.iconConfiguration;this.iconOriginalSize=iconConfiguration.originalSize;const ratioFromShape=iconConfiguration.ratioFromShape;if(ratioFromShape){const scaledIconSize=computeScaledIconSize(this.iconOriginalSize,iconConfiguration.style,this.shapeConfiguration,ratioFromShape);this.scaleX=scaledIconSize.width/this.iconOriginalSize.width;this.scaleY=scaledIconSize.height/this.iconOriginalSize.height}else{this.scaleX=1;this.scaleY=1}this.updateCanvasStyle(config.iconConfiguration.style)}setIconOriginPosition(shapePositionIndex){const shape=this.shapeConfiguration;this.iconPaintingOriginX=shape.x+shape.w/shapePositionIndex;this.iconPaintingOriginY=shape.y+shape.h/shapePositionIndex}setIconOriginToShapeCenter(){const shape=this.shapeConfiguration;this.iconPaintingOriginX=shape.x+(shape.w-this.iconOriginalSize.width*this.scaleX)/2;this.iconPaintingOriginY=shape.y+(shape.h-this.iconOriginalSize.height*this.scaleY)/2}setIconOriginToShapeBottomCenter(bottomMargin=StyleDefault.SHAPE_ACTIVITY_BOTTOM_MARGIN){const shape=this.shapeConfiguration;this.iconPaintingOriginX=shape.x+(shape.w-this.iconOriginalSize.width*this.scaleX)/2;this.iconPaintingOriginY=shape.y+(shape.h-this.iconOriginalSize.height*this.scaleY-bottomMargin)}setIconOriginToShapeBottomLeft(bottomMargin=StyleDefault.SHAPE_ACTIVITY_BOTTOM_MARGIN,fromCenterMargin=StyleDefault.SHAPE_ACTIVITY_FROM_CENTER_MARGIN){const shape=this.shapeConfiguration;this.iconPaintingOriginX=shape.x+(shape.w-this.iconOriginalSize.width*this.scaleX)/3-fromCenterMargin;this.iconPaintingOriginY=shape.y+(shape.h-this.iconOriginalSize.height*this.scaleY-bottomMargin)}translateIconOrigin(dx,dy){this.iconPaintingOriginX+=this.scaleX*dx;this.iconPaintingOriginY+=this.scaleY*dy}computeScaleFromOriginX(x){return this.iconPaintingOriginX+x*this.scaleX}computeScaleFromOriginY(y){return this.iconPaintingOriginY+y*this.scaleY}updateCanvasStyle({isFilled,strokeColor,fillColor,strokeWidth}){if(isFilled){this.c.setFillColor(strokeColor)}else{this.c.setFillColor(fillColor)}this.c.setStrokeWidth(strokeWidth)}arcTo(rx,ry,angle,largeArcFlag,sweepFlag,x,y){this.c.arcTo(rx*this.scaleX,ry*this.scaleY,angle,largeArcFlag,sweepFlag,this.computeScaleFromOriginX(x),this.computeScaleFromOriginY(y))}begin(){this.c.begin()}close(){this.c.close()}curveTo(x1,y1,x2,y2,x3,y3){this.c.curveTo(this.computeScaleFromOriginX(x1),this.computeScaleFromOriginY(y1),this.computeScaleFromOriginX(x2),this.computeScaleFromOriginY(y2),this.computeScaleFromOriginX(x3),this.computeScaleFromOriginY(y3))}fill(){this.c.fill()}fillAndStroke(){this.c.fillAndStroke()}stroke(){this.c.stroke()}setStrokeColor(color){this.c.setStrokeColor(color)}lineTo(x,y){this.c.lineTo(this.computeScaleFromOriginX(x),this.computeScaleFromOriginY(y))}moveTo(x,y){this.c.moveTo(this.computeScaleFromOriginX(x),this.computeScaleFromOriginY(y))}rect(x,y,w,h){this.c.rect(this.computeScaleFromOriginX(x),this.computeScaleFromOriginY(y),w*this.scaleX,h*this.scaleY)}roundrect(x,y,w,h,dx,dy){this.c.roundrect(this.computeScaleFromOriginX(x),this.computeScaleFromOriginY(y),w*this.scaleX,h*this.scaleY,dx,dy)}ellipse(x,y,w,h){this.c.ellipse(this.computeScaleFromOriginX(x),this.computeScaleFromOriginY(y),w*this.scaleX,h*this.scaleY)}rotate(theta,flipH,flipV,cx,cy){this.c.rotate(theta,flipH,flipV,this.iconPaintingOriginX+cx,this.iconPaintingOriginY+cy)}}function buildPaintParameter(c,x,y,width,height,shape,ratioFromParent=.25,isFilled=false,iconStrokeWidth=0){const _shape=shape;const shapeStrokeWidth=_shape.strokewidth||StyleUtils.getStrokeWidth(_shape.style);const fillColor=_shape.fill||StyleUtils.getFillColor(_shape.style);const strokeColor=_shape.stroke||StyleUtils.getStrokeColor(_shape.style);const margin=StyleUtils.getMargin(_shape.style);return{c,ratioFromParent,shape:{x,y,w:width,h:height,strokeWidth:shapeStrokeWidth},icon:{isFilled,fillColor,strokeColor,strokeWidth:iconStrokeWidth,margin}}}class IconPainter{paintEmptyIcon(){}paintEnvelopeIcon({c,ratioFromParent,shape,icon}){const originalIconSize={width:485.41,height:321.76};const canvas=new BpmnCanvas({mxCanvas:c,shapeConfiguration:shape,iconConfiguration:{originalSize:originalIconSize,style:icon,ratioFromShape:ratioFromParent}});canvas.setIconOriginToShapeCenter();const w=originalIconSize.width;const h=originalIconSize.height;canvas.rect(0,0,w,h);canvas.fillAndStroke();if(icon.isFilled){canvas.setStrokeColor(icon.fillColor)}canvas.begin();canvas.moveTo(0,0);canvas.lineTo(w*.5,h*.6);canvas.lineTo(w,0);canvas.moveTo(0,h);canvas.lineTo(w/3,h*.45);canvas.moveTo(w,h);canvas.lineTo(w*2/3,h*.45);canvas.stroke()}paintCircleIcon({c,ratioFromParent,shape,icon}){const originalIconSize={width:shape.w,height:shape.h};const canvas=new BpmnCanvas({mxCanvas:c,shapeConfiguration:shape,iconConfiguration:{originalSize:originalIconSize,style:icon,ratioFromShape:ratioFromParent}});canvas.setIconOriginToShapeCenter();const w=originalIconSize.width;const h=originalIconSize.height;if(w>0&&h>0){canvas.ellipse(0,0,w,h)}if(icon.isFilled){canvas.fillAndStroke()}else{canvas.stroke()}}paintClockIcon({c,ratioFromParent,shape,icon}){const canvas=new BpmnCanvas({mxCanvas:c,shapeConfiguration:shape,iconConfiguration:{originalSize:{height:152,width:152},ratioFromShape:ratioFromParent,style:icon}});canvas.setIconOriginPosition(5);canvas.begin();canvas.moveTo(184,60);canvas.curveTo(188.4,60,192,56.4,192,52);canvas.lineTo(192,48);canvas.curveTo(192,40,188.4,40,184,40);canvas.curveTo(179.6,40,176,43.6,176,48);canvas.lineTo(176,52);canvas.curveTo(176,56.4,179.6,60,184,60);canvas.close();canvas.moveTo(184,308);canvas.curveTo(179.6,308,176,311.6,176,316);canvas.lineTo(176,320);canvas.curveTo(176,324.4,179.6,328,184,328);canvas.curveTo(188.4,328,192,324.4,192,320);canvas.lineTo(192,316);canvas.curveTo(192,311.6,188.4,308,184,308);canvas.close();canvas.moveTo(52,176);canvas.lineTo(48,176);canvas.curveTo(43.6,176,40,179.6,40,184);canvas.curveTo(40,188.4,43.6,192,48,192);canvas.lineTo(52,192);canvas.curveTo(56.4,192,69,188.4,60,184);canvas.curveTo(60,179.6,56.4,176,52,176);canvas.close();canvas.moveTo(320,176);canvas.lineTo(316,176);canvas.curveTo(311.6,176,308,179.6,308,184);canvas.curveTo(308,188.4,311.6,192,316,192);canvas.lineTo(320,192);canvas.curveTo(324.4,192,328,188.4,328,184);canvas.curveTo(328,179.6,324.4,176,320,176);canvas.moveTo(93.6,82.4);canvas.curveTo(90.4,79.2,85.6,79.2,82.4,82.4);canvas.curveTo(79.2,85.6,79.2,90.4,82.4,93.6);canvas.lineTo(85.2,96.4);canvas.curveTo(86.8,98,88.8,98.8,90.8,98.8);canvas.curveTo(92.8,98.8,94.4,98,96.4,96.4);canvas.curveTo(99.6,93.2,99.6,88.4,96.4,85.2);canvas.lineTo(93.6,82.4);canvas.moveTo(85.2,271.6);canvas.lineTo(82.4,274.4);canvas.curveTo(79.2,277.6,79.2,282.4,82.4,285.6);canvas.curveTo(84,287.2,86,288,88,288);canvas.curveTo(90,288,92,287.2,93.6,285.6);canvas.lineTo(96.4,282.8);canvas.curveTo(99.6,279.6,99.6,274.8,96.4,271.6);canvas.curveTo(93.2,268.4,88.4,268.4,85.2,271.6);canvas.moveTo(274.4,82.4);canvas.lineTo(271.6,85.2);canvas.curveTo(268.4,88.4,268.4,93.2,271.6,96.4);canvas.curveTo(273.298,98,275.2,98.8,277.2,98.8);canvas.curveTo(279.2,98.8,281.2,98,282.8,96.4);canvas.lineTo(285.6,93.6);canvas.curveTo(288.8,90.4,288.8,85.6,285.6,82.4);canvas.curveTo(282.4,79.2,277.6,79.2,274.4,82.4);canvas.moveTo(192,180.8);canvas.lineTo(192,108);canvas.curveTo(192,103.6,188.4,100,184,100);canvas.curveTo(179.6,100,176,103.6,176,108);canvas.lineTo(176,184);canvas.curveTo(176,186,176.8,188,178.4,189.6);canvas.lineTo(266,277.2);canvas.curveTo(267.6,278.8,269.6,279.6,271.6,279.6);canvas.curveTo(273.6,279.6,275.6,278.8,277.2,277.2);canvas.curveTo(280.4,274,280.4,269.2,277.2,266);canvas.lineTo(192,180.8);canvas.moveTo(184,0);canvas.curveTo(82.4,0,0,82.4,0,184);canvas.curveTo(0,285.6,82.4,368,184,368);canvas.curveTo(285.6,368,368,285.6,368,184);canvas.curveTo(368,82.4,285.6,0,184,0);canvas.moveTo(184,352);canvas.curveTo(91.2,352,16,276.8,16,184);canvas.curveTo(16,91.2,91.2,16,184,16);canvas.curveTo(276.8,16,352,91.2,352,184);canvas.curveTo(352,276.8,276.8,352,184,352);canvas.fillAndStroke()}paintTriangleIcon({c,ratioFromParent,shape:{x,y,w,h},icon}){const canvas=new BpmnCanvas({mxCanvas:c,shapeConfiguration:{x,y,w,h},iconConfiguration:{originalSize:{height:735,width:849},ratioFromShape:ratioFromParent,style:icon}});canvas.setIconOriginPosition(4);canvas.begin();canvas.moveTo(497,55);canvas.lineTo(817,609);canvas.curveTo(849,665,808,735,744,735);canvas.lineTo(105,735);canvas.curveTo(40,735,0,665,32,609);canvas.lineTo(352,55);canvas.curveTo(384,0,465,0,497,55);canvas.close();canvas.fillAndStroke()}paintXCrossIcon({c,ratioFromParent,shape,icon}){const canvas=new BpmnCanvas({mxCanvas:c,shapeConfiguration:shape,iconConfiguration:{originalSize:{height:.5,width:.5},ratioFromShape:ratioFromParent,style:Object.assign(Object.assign({},icon),{isFilled:true})}});canvas.setIconOriginPosition(4);IconPainter.drawCrossIcon(canvas);const rotationCenterX=shape.w/4;const rotationCenterY=shape.h/4;canvas.rotate(45,false,false,rotationCenterX,rotationCenterY);canvas.fillAndStroke()}paintPlusCrossIcon({c,ratioFromParent,shape,icon}){const canvas=new BpmnCanvas({mxCanvas:c,shapeConfiguration:shape,iconConfiguration:{originalSize:{height:.5,width:.5},ratioFromShape:ratioFromParent,style:Object.assign(Object.assign({},icon),{isFilled:true})}});canvas.setIconOriginPosition(4);IconPainter.drawCrossIcon(canvas);canvas.fillAndStroke()}static drawCrossIcon(canvas){canvas.begin();canvas.moveTo(.38,0);canvas.lineTo(.62,0);canvas.lineTo(.62,.38);canvas.lineTo(1,.38);canvas.lineTo(1,.62);canvas.lineTo(.62,.62);canvas.lineTo(.62,1);canvas.lineTo(.38,1);canvas.lineTo(.38,.62);canvas.lineTo(0,.62);canvas.lineTo(0,.38);canvas.lineTo(.38,.38);canvas.close()}paintWomanIcon({c,ratioFromParent,shape,icon}){const canvas=new BpmnCanvas({mxCanvas:c,shapeConfiguration:shape,iconConfiguration:{originalSize:{height:239.68,width:143.61},ratioFromShape:ratioFromParent,style:Object.assign(Object.assign({},icon),{isFilled:true})}});canvas.setIconOriginPosition(20);canvas.begin();canvas.moveTo(124.31,150.29);canvas.lineTo(99.66,141.03);canvas.arcTo(6.43,6.43,0,0,1,95.51,135.03);canvas.lineTo(95.51,130.66);canvas.arcTo(47.75,47.75,0,0,0,119.51,89.25);canvas.lineTo(119.51,71.25);canvas.arcTo(47.62,47.62,0,0,0,101.18,33.64);canvas.arcTo(29.35,29.35,0,0,0,101.52,29.14);canvas.arcTo(29.68,29.68,0,0,0,42.17,29.14);canvas.arcTo(29.24,29.24,0,0,0,42.53,33.63);canvas.arcTo(47.65,47.65,0,0,0,24.14,71.23);canvas.lineTo(24.14,89.23);canvas.arcTo(47.7,47.7,0,0,0,48.19,130.63);canvas.lineTo(48.19,135.03);canvas.arcTo(6.43,6.43,0,0,1,44.03,141.03);canvas.lineTo(19.31,150.29);canvas.arcTo(29.81,29.81,0,0,0,.09,178.03);canvas.lineTo(.09,233.51);canvas.arcTo(5.63,5.63,0,1,0,11.34,233.51);canvas.lineTo(11.34,178.03);canvas.arcTo(18.19,18.19,0,0,1,11.57,175.17);canvas.lineTo(20.5,184.11);canvas.arcTo(12.32,12.32,0,0,1,24.14,192.89);canvas.lineTo(24.14,233.51);canvas.arcTo(5.63,5.63,0,1,0,35.39,233.51);canvas.lineTo(35.39,192.93);canvas.arcTo(23.5,23.5,0,0,0,28.46,176.2);canvas.lineTo(17.04,164.78);canvas.arcTo(18.34,18.34,0,0,1,23.29,160.78);canvas.lineTo(43.65,153.15);canvas.lineTo(66.22,175.72);canvas.lineTo(66.22,233.51);canvas.arcTo(5.63,5.63,0,1,0,77.47,233.51);canvas.lineTo(77.47,175.76);canvas.lineTo(100.04,153.19);canvas.lineTo(120.4,160.82);canvas.arcTo(18.39,18.39,0,0,1,126.65,164.82);canvas.lineTo(115.24,176.24);canvas.arcTo(23.5,23.5,0,0,0,108.31,192.93);canvas.lineTo(108.31,233.55);canvas.arcTo(5.63,5.63,0,1,0,119.56,233.55);canvas.lineTo(119.56,192.93);canvas.arcTo(12.35,12.35,0,0,1,123.19,184.15);canvas.lineTo(132.13,175.22);canvas.arcTo(18,18,0,0,1,132.36,178.08);canvas.lineTo(132.36,233.56);canvas.arcTo(5.63,5.63,0,0,0,143.61,233.56);canvas.lineTo(143.61,178.03);canvas.arcTo(29.81,29.81,0,0,0,124.31,150.29);canvas.close();canvas.moveTo(71.85,10.72);canvas.arcTo(18.46,18.46,0,0,1,90.17,27.18);canvas.arcTo(47.68,47.68,0,0,0,53.53,27.18);canvas.arcTo(18.44,18.44,0,0,1,71.85,10.72);canvas.close();canvas.moveTo(35.39,71.23);canvas.arcTo(36.46,36.46,0,0,1,108.31,71.23);canvas.lineTo(108.31,77.4);canvas.curveTo(82.12,75.4,56.97,60.55,56.71,60.4);canvas.arcTo(5.62,5.62,0,0,0,48.78,62.71);canvas.curveTo(46.24,67.79,40.45,71.89,35.39,74.62);canvas.close();canvas.moveTo(35.39,89.23);canvas.lineTo(35.39,87.08);canvas.curveTo(40.55,84.85,49.73,80.08,55.67,72.66);canvas.curveTo(64.83,77.46,85.92,87.21,108.31,88.66);canvas.lineTo(108.31,89.24);canvas.arcTo(36.46,36.46,0,1,1,35.39,89.24);canvas.close();canvas.moveTo(71.85,165.45);canvas.lineTo(54.06,147.69);canvas.arcTo(17.7,17.7,0,0,0,59.43,135.32);canvas.arcTo(47.57,47.57,0,0,0,84.27,135.32);canvas.arcTo(17.7,17.7,0,0,0,89.64,147.69);canvas.close();canvas.fill()}paintGearIcon({c,ratioFromParent,shape,icon}){const canvas=new BpmnCanvas({mxCanvas:c,shapeConfiguration:shape,iconConfiguration:{originalSize:{height:100,width:100},ratioFromShape:ratioFromParent,style:icon}});canvas.setIconOriginPosition(20);IconPainter.paintGearIconBackground(canvas);canvas.translateIconOrigin(14,14);IconPainter.paintGearIconForeground(canvas)}static paintGearIconBackground(canvas){canvas.begin();canvas.moveTo(2.06,24.62);canvas.lineTo(10.17,30.95);canvas.lineTo(9.29,37.73);canvas.lineTo(0,41.42);canvas.lineTo(2.95,54.24);canvas.lineTo(13.41,52.92);canvas.lineTo(17.39,58.52);canvas.lineTo(13.56,67.66);canvas.lineTo(24.47,74.44);canvas.lineTo(30.81,66.33);canvas.lineTo(37.88,67.21);canvas.lineTo(41.57,76.5);canvas.lineTo(54.24,73.55);canvas.lineTo(53.06,62.94);canvas.lineTo(58.52,58.52);canvas.lineTo(67.21,63.09);canvas.lineTo(74.58,51.88);canvas.lineTo(66.03,45.25);canvas.lineTo(66.92,38.62);canvas.lineTo(76.5,34.93);canvas.lineTo(73.7,22.26);canvas.lineTo(62.64,23.44);canvas.lineTo(58.81,18.42);canvas.lineTo(62.79,8.7);canvas.lineTo(51.74,2.21);canvas.lineTo(44.81,10.47);canvas.lineTo(38.03,9.43);canvas.lineTo(33.75,0);canvas.lineTo(21.52,3.24);canvas.lineTo(22.7,13.56);canvas.lineTo(18.13,17.54);canvas.lineTo(8.7,13.56);canvas.close();const arcStartX=24.8;const arcStartY=39;IconPainter.paintGearInnerCircle(canvas,arcStartX,arcStartY)}static paintGearIconForeground(canvas){canvas.begin();canvas.moveTo(16.46,41.42);canvas.lineTo(24.57,47.75);canvas.lineTo(23.69,54.53);canvas.lineTo(14.4,58.22);canvas.lineTo(17.35,71.04);canvas.lineTo(27.81,69.72);canvas.lineTo(31.79,75.32);canvas.lineTo(27.96,84.46);canvas.lineTo(38.87,91.24);canvas.lineTo(45.21,83.13);canvas.lineTo(52.28,84.01);canvas.lineTo(55.97,93.3);canvas.lineTo(68.64,90.35);canvas.lineTo(67.46,79.74);canvas.lineTo(72.92,75.32);canvas.lineTo(81.61,79.89);canvas.lineTo(88.98,68.68);canvas.lineTo(80.43,62.05);canvas.lineTo(81.32,55.42);canvas.lineTo(90.9,51.73);canvas.lineTo(88.1,39.06);canvas.lineTo(77.04,40.24);canvas.lineTo(73.21,35.22);canvas.lineTo(77.19,25.5);canvas.lineTo(66.14,19.01);canvas.lineTo(59.21,27.27);canvas.lineTo(52.43,26.23);canvas.lineTo(48.15,16.8);canvas.lineTo(35.92,20.04);canvas.lineTo(37.1,30.36);canvas.lineTo(32.53,34.34);canvas.lineTo(23.1,30.36);canvas.close();const arcStartX=39.2;const arcStartY=55.8;IconPainter.paintGearInnerCircle(canvas,arcStartX,arcStartY);canvas.begin();IconPainter.paintGearInnerCircle(canvas,arcStartX,arcStartY)}static paintGearInnerCircle(canvas,arcStartX,arcStartY){const arcRay=13.5;canvas.moveTo(arcStartX,arcStartY);canvas.arcTo(arcRay,arcRay,0,1,1,arcStartX+2*arcRay,arcStartY);canvas.arcTo(arcRay,arcRay,0,0,1,arcStartX,arcStartY);canvas.close();canvas.fillAndStroke()}paintExpandIcon({c,ratioFromParent,shape,icon}){const originalIconSize={width:16,height:16};const canvas=new BpmnCanvas({mxCanvas:c,shapeConfiguration:shape,iconConfiguration:{originalSize:originalIconSize,style:icon,ratioFromShape:ratioFromParent}});canvas.setIconOriginToShapeBottomCenter();const w=originalIconSize.width;const h=originalIconSize.height;canvas.roundrect(0,0,w,h,2,2);canvas.stroke();canvas.begin();canvas.moveTo(w/2,h/4);canvas.lineTo(w/2,h*3/4);canvas.close();canvas.moveTo(w/4,h/2);canvas.lineTo(w*3/4,h/2);canvas.close();canvas.fillAndStroke()}paintLoopIcon({c,ratioFromParent,shape,icon}){icon.fillColor=icon.strokeColor;const originalIconSize={width:22.49,height:21.62};const canvas=new BpmnCanvas({mxCanvas:c,shapeConfiguration:shape,iconConfiguration:{originalSize:originalIconSize,style:icon,ratioFromShape:ratioFromParent}});canvas.setIconOriginToShapeBottomLeft();canvas.begin();canvas.moveTo(5.5,19.08);canvas.arcTo(10,10,0,1,1,10.5,21.08);canvas.stroke();canvas.begin();canvas.moveTo(5.5,14.08);canvas.lineTo(5.5,19.08);canvas.lineTo(0,17.58);canvas.close();canvas.fillAndStroke()}paintSequentialMultiInstanceIcon({c,ratioFromParent,shape,icon}){const originalIconSize={width:16,height:16};const canvas=new BpmnCanvas({mxCanvas:c,shapeConfiguration:shape,iconConfiguration:{originalSize:originalIconSize,style:icon,ratioFromShape:ratioFromParent}});canvas.setIconOriginToShapeBottomLeft();c.setFillColor(icon.strokeColor);const barWidth=originalIconSize.width;const barHeight=originalIconSize.height/5;canvas.rect(0,0,barWidth,barHeight);canvas.fill();canvas.rect(0,2*barHeight,barWidth,barHeight);canvas.fill();canvas.rect(0,4*barHeight,barWidth,barHeight);canvas.fill()}paintParallelMultiInstanceIcon({c,ratioFromParent,shape,icon}){const originalIconSize={width:16,height:16};const canvas=new BpmnCanvas({mxCanvas:c,shapeConfiguration:shape,iconConfiguration:{originalSize:originalIconSize,style:icon,ratioFromShape:ratioFromParent}});canvas.setIconOriginToShapeBottomLeft();c.setFillColor(icon.strokeColor);const barWidth=originalIconSize.width/5;const barHeight=originalIconSize.height;canvas.begin();canvas.rect(0,0,barWidth,barHeight);canvas.fill();canvas.rect(2*barWidth,0,barWidth,barHeight);canvas.fill();canvas.rect(4*barWidth,0,barWidth,barHeight);canvas.fill()}}class IconPainterProvider{static get(){return this.instance}static set(painter){this.instance=painter}}IconPainterProvider.instance=new IconPainter;class EventShape extends mxEllipse{constructor(bounds,fill,stroke,strokewidth){super(bounds,fill,stroke,strokewidth);this.iconPainter=IconPainterProvider.get();this.iconPainters=new Map([[ShapeBpmnEventKind.MESSAGE,paintParameter=>this.iconPainter.paintEnvelopeIcon(Object.assign(Object.assign({},paintParameter),{ratioFromParent:.5}))],[ShapeBpmnEventKind.TERMINATE,paintParameter=>this.iconPainter.paintCircleIcon(Object.assign(Object.assign({},paintParameter),{ratioFromParent:.6}))],[ShapeBpmnEventKind.TIMER,paintParameter=>this.iconPainter.paintClockIcon(paintParameter)],[ShapeBpmnEventKind.SIGNAL,paintParameter=>this.iconPainter.paintTriangleIcon(Object.assign(Object.assign({},paintParameter),{ratioFromParent:.55,icon:Object.assign(Object.assign({},paintParameter.icon),{strokeWidth:StyleDefault.STROKE_WIDTH_THIN.valueOf()})}))]]);this.withFilledIcon=false}paintVertexShape(c,x,y,w,h){this.markNonFullyRenderedEvents(c);const paintParameter=buildPaintParameter(c,x,y,w,h,this,.25,this.withFilledIcon);this.paintOuterShape(paintParameter);this.paintInnerShape(paintParameter)}markNonFullyRenderedEvents(c){}paintOuterShape({c,shape:{x,y,w,h}}){super.paintVertexShape(c,x,y,w,h)}paintInnerShape(paintParameter){const paintIcon=this.iconPainters.get(StyleUtils.getBpmnEventKind(this.style))||(()=>this.iconPainter.paintEmptyIcon());paintIcon(paintParameter)}}class StartEventShape extends EventShape{constructor(bounds,fill,stroke,strokewidth=StyleDefault.STROKE_WIDTH_THIN){super(bounds,fill,stroke,strokewidth)}}class EndEventShape extends EventShape{constructor(bounds,fill,stroke,strokewidth=StyleDefault.STROKE_WIDTH_THICK){super(bounds,fill,stroke,strokewidth);this.withFilledIcon=true}}class IntermediateEventShape extends EventShape{constructor(bounds,fill,stroke,strokewidth=StyleDefault.STROKE_WIDTH_THIN){super(bounds,fill,stroke,strokewidth)}paintOuterShape({c,shape:{x,y,w,h,strokeWidth}}){c.ellipse(x,y,w,h);c.fillAndStroke();const inset=strokeWidth*1.5;c.ellipse(w*.02+inset+x,h*.02+inset+y,w*.96-2*inset,h*.96-2*inset);c.stroke()}}class CatchIntermediateEventShape extends IntermediateEventShape{constructor(bounds,fill,stroke,strokewidth){super(bounds,fill,stroke,strokewidth)}}class ThrowIntermediateEventShape extends IntermediateEventShape{constructor(bounds,fill,stroke,strokewidth){super(bounds,fill,stroke,strokewidth);this.withFilledIcon=true}}class BoundaryEventShape extends IntermediateEventShape{constructor(bounds,fill,stroke,strokewidth){super(bounds,fill,stroke,strokewidth)}paintOuterShape(paintParameter){const isInterrupting=StyleUtils.getBpmnIsInterrupting(this.style);if(isInterrupting==="false"){paintParameter.c.setDashed(true,false);paintParameter.c.setDashPattern("3 2")}super.paintOuterShape(paintParameter);paintParameter.c.setDashed(StyleUtils.isDashed(this.style),StyleUtils.isFixDash(this.style));paintParameter.c.setDashPattern(StyleUtils.getDashPattern(this.style))}}class GatewayShape extends mxRhombus{constructor(bounds,fill,stroke,strokewidth){super(bounds,fill,stroke,strokewidth);this.iconPainter=IconPainterProvider.get()}paintVertexShape(c,x,y,w,h){const paintParameter=buildPaintParameter(c,x,y,w,h,this);this.paintOuterShape(paintParameter);this.paintInnerShape(paintParameter)}paintOuterShape({c,shape:{x,y,w,h}}){super.paintVertexShape(c,x,y,w,h)}}class ExclusiveGatewayShape extends GatewayShape{constructor(bounds,fill,stroke,strokewidth=StyleDefault.STROKE_WIDTH_THIN){super(bounds,fill,stroke,strokewidth)}paintInnerShape(paintParameter){this.iconPainter.paintXCrossIcon(paintParameter)}}class ParallelGatewayShape extends GatewayShape{constructor(bounds,fill,stroke,strokewidth=StyleDefault.STROKE_WIDTH_THIN){super(bounds,fill,stroke,strokewidth)}paintInnerShape(paintParameter){this.iconPainter.paintPlusCrossIcon(paintParameter)}}class InclusiveGatewayShape extends GatewayShape{constructor(bounds,fill,stroke,strokewidth=StyleDefault.STROKE_WIDTH_THIN){super(bounds,fill,stroke,strokewidth)}paintInnerShape(paintParameter){this.iconPainter.paintCircleIcon(Object.assign(Object.assign({},paintParameter),{ratioFromParent:.62,icon:Object.assign(Object.assign({},paintParameter.icon),{isFilled:false,strokeWidth:StyleDefault.STROKE_WIDTH_THICK.valueOf()})}))}}var ShapeBpmnSubProcessKind;(function(ShapeBpmnSubProcessKind){ShapeBpmnSubProcessKind["EMBEDDED"]="embedded";ShapeBpmnSubProcessKind["EVENT"]="event"})(ShapeBpmnSubProcessKind||(ShapeBpmnSubProcessKind={}));class BaseActivityShape extends mxRectangleShape{constructor(bounds,fill,stroke,strokewidth=StyleDefault.STROKE_WIDTH_THIN){super(bounds,fill,stroke,strokewidth);this.iconPainter=IconPainterProvider.get();this.isRounded=true}paintForeground(c,x,y,w,h){super.paintForeground(c,x,y,w,h);this.paintMarkerIcons(buildPaintParameter(c,x,y,w,h,this,.17,false,1.5))}paintMarkerIcons(paintParameter){const markers=StyleUtils.getBpmnMarkers(this.style);if(markers){markers.split(",").forEach(marker=>{switch(marker){case ShapeBpmnMarkerKind.LOOP:this.iconPainter.paintLoopIcon(paintParameter);break;case ShapeBpmnMarkerKind.MULTI_INSTANCE_SEQUENTIAL:this.iconPainter.paintSequentialMultiInstanceIcon(paintParameter);break;case ShapeBpmnMarkerKind.MULTI_INSTANCE_PARALLEL:this.iconPainter.paintParallelMultiInstanceIcon(paintParameter);break;case ShapeBpmnMarkerKind.EXPAND:this.iconPainter.paintExpandIcon(paintParameter);break}paintParameter.c.setStrokeColor(StyleUtils.getStrokeColor(this.style));paintParameter.c.setFillColor(StyleUtils.getFillColor(this.style))})}}}class BaseTaskShape extends BaseActivityShape{constructor(bounds,fill,stroke,strokewidth){super(bounds,fill,stroke,strokewidth)}paintForeground(c,x,y,w,h){super.paintForeground(c,x,y,w,h);this.paintTaskIcon(buildPaintParameter(c,x,y,w,h,this))}}class TaskShape extends BaseTaskShape{constructor(bounds,fill,stroke,strokewidth){super(bounds,fill,stroke,strokewidth)}paintTaskIcon(paintParameter){this.iconPainter.paintEmptyIcon()}}class ServiceTaskShape extends BaseTaskShape{constructor(bounds,fill,stroke,strokewidth){super(bounds,fill,stroke,strokewidth)}paintTaskIcon(paintParameter){this.iconPainter.paintGearIcon(paintParameter)}}class UserTaskShape extends BaseTaskShape{constructor(bounds,fill,stroke,strokewidth){super(bounds,fill,stroke,strokewidth)}paintTaskIcon(paintParameter){this.iconPainter.paintWomanIcon(paintParameter)}}class ReceiveTaskShape extends BaseTaskShape{constructor(bounds,fill,stroke,strokewidth){super(bounds,fill,stroke,strokewidth);this.gradient="Salmon"}paintTaskIcon(paintParameter){}}class CallActivityShape extends BaseActivityShape{constructor(bounds,fill,stroke,strokewidth=StyleDefault.STROKE_WIDTH_THICK){super(bounds,fill,stroke,strokewidth)}}class SubProcessShape extends BaseActivityShape{constructor(bounds,fill,stroke,strokewidth){super(bounds,fill,stroke,strokewidth)}paintBackground(c,x,y,w,h){const subProcessKind=StyleUtils.getBpmnSubProcessKind(this.style);if(subProcessKind===ShapeBpmnSubProcessKind.EVENT){c.setDashed(true,false);c.setDashPattern("1 2")}super.paintBackground(c,x,y,w,h);c.setDashed(StyleUtils.isDashed(this.style),StyleUtils.isFixDash(this.style));c.setDashPattern(StyleUtils.getDashPattern(this.style))}}class TextAnnotationShape extends mxRectangleShape{constructor(bounds,fill,stroke,strokewidth=StyleDefault.STROKE_WIDTH_THIN){super(bounds,fill,stroke,strokewidth);this.TEXT_ANNOTATION_BORDER_LENGTH=10}paintBackground(c,x,y,w,h){c.begin();c.moveTo(x+this.TEXT_ANNOTATION_BORDER_LENGTH,y);c.lineTo(x,y);c.lineTo(x,y+h);c.lineTo(x+this.TEXT_ANNOTATION_BORDER_LENGTH,y+h);c.fillAndStroke()}}class ShapeConfigurator{configureShapes(){this.initMxShapePrototype(mxClient.IS_FF);this.registerShapes()}registerShapes(){mxCellRenderer.registerShape(ShapeBpmnElementKind.EVENT_END,EndEventShape);mxCellRenderer.registerShape(ShapeBpmnElementKind.EVENT_START,StartEventShape);mxCellRenderer.registerShape(ShapeBpmnElementKind.EVENT_INTERMEDIATE_THROW,ThrowIntermediateEventShape);mxCellRenderer.registerShape(ShapeBpmnElementKind.EVENT_INTERMEDIATE_CATCH,CatchIntermediateEventShape);mxCellRenderer.registerShape(ShapeBpmnElementKind.EVENT_BOUNDARY,BoundaryEventShape);mxCellRenderer.registerShape(ShapeBpmnElementKind.GATEWAY_EXCLUSIVE,ExclusiveGatewayShape);mxCellRenderer.registerShape(ShapeBpmnElementKind.GATEWAY_INCLUSIVE,InclusiveGatewayShape);mxCellRenderer.registerShape(ShapeBpmnElementKind.GATEWAY_PARALLEL,ParallelGatewayShape);mxCellRenderer.registerShape(ShapeBpmnElementKind.SUB_PROCESS,SubProcessShape);mxCellRenderer.registerShape(ShapeBpmnElementKind.CALL_ACTIVITY,CallActivityShape);mxCellRenderer.registerShape(ShapeBpmnElementKind.TASK,TaskShape);mxCellRenderer.registerShape(ShapeBpmnElementKind.TASK_SERVICE,ServiceTaskShape);mxCellRenderer.registerShape(ShapeBpmnElementKind.TASK_USER,UserTaskShape);mxCellRenderer.registerShape(ShapeBpmnElementKind.TASK_RECEIVE,ReceiveTaskShape);mxCellRenderer.registerShape(ShapeBpmnElementKind.TEXT_ANNOTATION,TextAnnotationShape)}initMxShapePrototype(isFF){mxShape.prototype.createSvgCanvas=function(){const canvas=new mxSvgCanvas2D(this.node,false);canvas.strokeTolerance=this.pointerEvents?this.svgStrokeTolerance:0;canvas.pointerEventsValue=this.svgPointerEvents;canvas.blockImagePointerEvents=isFF;const off=this.getSvgScreenOffset();if(off!=0){this.node.setAttribute("transform","translate("+off+","+off+")")}else{this.node.removeAttribute("transform")}if(this.state&&this.state.cell){this.node.setAttribute("class","class-state-cell-style-"+this.state.cell.style.replace(";","-"));this.node.setAttribute("data-cell-id",this.state.cell.id)}canvas.minStrokeWidth=this.minSvgStrokeWidth;if(!this.antiAlias){canvas.format=function(value){return Math.round(parseFloat(value))}}return canvas}}}class MarkerConfigurator{configureMarkers(){this.registerArrowDashMarker()}registerArrowDashMarker(){const createMarker=(c,shape,type,pe,unitX,unitY,size,source,strokewidth)=>{const nx=unitX*(size+strokewidth+4);const ny=unitY*(size+strokewidth+4);return function(){c.begin();c.moveTo(pe.x-nx/2-ny/2,pe.y-ny/2+nx/2);c.lineTo(pe.x+ny/2-3*nx/2,pe.y-3*ny/2-nx/2);c.stroke()}};mxMarker.addMarker(MarkerIdentifier.ARROW_DASH,createMarker)}}class MxClientConfigurator{configureMxCodec(){mxCodec.prototype.decode=function(node,into){if(node!==null&&node.nodeType===mxConstants.NODETYPE_ELEMENT){const ctor=window[node.nodeName];if(!ctor){throw new Error(`Missing constructor for ${node.nodeName}`)}const dec=mxCodecRegistry.getCodec(ctor);if(dec!==null){return dec.decode(this,node,into)}const obj=node.cloneNode(true);obj.removeAttribute("as");return obj}return null}}}class MxGraphConfigurator{constructor(container){this.graph=new mxGraph(container)}configure(){this.configureGraph();new StyleConfigurator(this.graph).configureStyles();(new ShapeConfigurator).configureShapes();(new MarkerConfigurator).configureMarkers();(new MxClientConfigurator).configureMxCodec();return this.graph}configureGraph(){this.graph.setCellsLocked(true);this.graph.setCellsSelectable(false);this.graph.setEdgeLabelsMovable(false);this.graph.setHtmlLabels(true);this.graph.setConstrainChildren(false);this.graph.setExtendParents(false);this.graph.foldingEnabled=false}}class CoordinatesTranslator{constructor(graph){this.graph=graph}computeRelativeCoordinates(parent,absoluteCoordinate){const translateForRoot=this.getTranslateForRoot(parent);const relativeX=absoluteCoordinate.x+translateForRoot.x;const relativeY=absoluteCoordinate.y+translateForRoot.y;return new mxPoint(relativeX,relativeY)}getTranslateForRoot(cell){const model=this.graph.getModel();const offset=new mxPoint(0,0);while(cell!=null){const geo=model.getGeometry(cell);if(geo!=null){offset.x-=geo.x;offset.y-=geo.y}cell=model.getParent(cell)}return offset}computeEgeCenter(mxEdge){const points=mxEdge.geometry.points;const p0=points[0];const pe=points[points.length-1];if(p0!=null&&pe!=null){const dx=pe.x-p0.x;const dy=pe.y-p0.y;return new mxPoint(p0.x+dx/2,p0.y+dy/2)}return undefined}}class MxGraphRenderer{constructor(graph,coordinatesTranslator,styleConfigurator){this.graph=graph;this.coordinatesTranslator=coordinatesTranslator;this.styleConfigurator=styleConfigurator}render(bpmnModel){const model=this.graph.getModel();model.clear();model.beginUpdate();try{this.insertShapes(bpmnModel.pools);this.insertShapes(bpmnModel.lanes);this.insertShapes(bpmnModel.flowNodes.filter(shape=>{var _a;return!ShapeUtil.isBoundaryEvent((_a=shape.bpmnElement)===null||_a===void 0?void 0:_a.kind)}));this.insertShapes(bpmnModel.flowNodes.filter(shape=>{var _a;return ShapeUtil.isBoundaryEvent((_a=shape.bpmnElement)===null||_a===void 0?void 0:_a.kind)}));this.insertEdges(bpmnModel.edges)}finally{model.endUpdate()}}insertShapes(shapes){shapes.forEach(shape=>{this.insertShape(shape)})}getParent(bpmnElement){const bpmnElementParent=this.getCell(bpmnElement.parentId);if(bpmnElementParent){return bpmnElementParent}if(!ShapeUtil.isBoundaryEvent(bpmnElement.kind)){return this.graph.getDefaultParent()}}insertShape(shape){var _a;const bpmnElement=shape.bpmnElement;if(bpmnElement){const parent=this.getParent(bpmnElement);if(!parent){console.warn("Not possible to insert shape %s: parent cell %s is not found",bpmnElement.id,bpmnElement.parentId);return}const bounds=shape.bounds;let labelBounds=(_a=shape.label)===null||_a===void 0?void 0:_a.bounds;labelBounds=ShapeUtil.isPoolOrLane(bpmnElement.kind)?undefined:labelBounds;const style=this.styleConfigurator.computeStyle(shape,labelBounds);this.insertVertex(parent,bpmnElement.id,bpmnElement.name,bounds,labelBounds,style)}}insertEdges(edges){edges.forEach(edge=>{var _a;const bpmnElement=edge.bpmnElement;if(bpmnElement){const parent=this.graph.getDefaultParent();const source=this.getCell(bpmnElement.sourceRefId);const target=this.getCell(bpmnElement.targetRefId);const labelBounds=(_a=edge.label)===null||_a===void 0?void 0:_a.bounds;const style=this.styleConfigurator.computeStyle(edge,labelBounds);const mxEdge=this.graph.insertEdge(parent,bpmnElement.id,bpmnElement.name,source,target,style);this.insertWaypoints(edge.waypoints,mxEdge);if(labelBounds){mxEdge.geometry.width=labelBounds.width;mxEdge.geometry.height=labelBounds.height;const edgeCenterCoordinate=this.coordinatesTranslator.computeEgeCenter(mxEdge);if(edgeCenterCoordinate){mxEdge.geometry.relative=false;const labelBoundsRelativeCoordinateFromParent=this.coordinatesTranslator.computeRelativeCoordinates(mxEdge.parent,new mxPoint(labelBounds.x,labelBounds.y));const relativeLabelX=labelBoundsRelativeCoordinateFromParent.x+labelBounds.width/2-edgeCenterCoordinate.x;const relativeLabelY=labelBoundsRelativeCoordinateFromParent.y-edgeCenterCoordinate.y;mxEdge.geometry.offset=new mxPoint(relativeLabelX,relativeLabelY)}}}})}insertWaypoints(waypoints,mxEdge){if(waypoints){mxEdge.geometry.points=waypoints.map(waypoint=>this.coordinatesTranslator.computeRelativeCoordinates(mxEdge.parent,new mxPoint(waypoint.x,waypoint.y)))}}getCell(id){return this.graph.getModel().getCell(id)}insertVertex(parent,id,value,bounds,labelBounds,style){const vertexCoordinates=this.coordinatesTranslator.computeRelativeCoordinates(parent,new mxPoint(bounds.x,bounds.y));const mxCell=this.graph.insertVertex(parent,id,value,vertexCoordinates.x,vertexCoordinates.y,bounds.width,bounds.height,style);if(labelBounds){const relativeLabelX=labelBounds.x-bounds.x;const relativeLabelY=labelBounds.y-bounds.y;mxCell.geometry.offset=new mxPoint(relativeLabelX,relativeLabelY)}return mxCell}}function defaultMxGraphRenderer(graph){return new MxGraphRenderer(graph,new CoordinatesTranslator(graph),new StyleConfigurator(graph))}var commonjsGlobal=typeof globalThis!=="undefined"?globalThis:typeof window!=="undefined"?window:typeof global!=="undefined"?global:typeof self!=="undefined"?self:{};function unwrapExports(x){return x&&x.__esModule&&Object.prototype.hasOwnProperty.call(x,"default")?x["default"]:x}function createCommonjsModule(fn,module){return module={exports:{}},fn(module,module.exports),module.exports}function getCjsExportFromNamespace(n){return n&&n["default"]||n}var util=createCommonjsModule((function(module,exports){const nameStartChar=":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";const nameChar=nameStartChar+"\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";const nameRegexp="["+nameStartChar+"]["+nameChar+"]*";const regexName=new RegExp("^"+nameRegexp+"$");const getAllMatches=function(string,regex){const matches=[];let match=regex.exec(string);while(match){const allmatches=[];const len=match.length;for(let index=0;index<len;index++){allmatches.push(match[index])}matches.push(allmatches);match=regex.exec(string)}return matches};const isName=function(string){const match=regexName.exec(string);return!(match===null||typeof match==="undefined")};exports.isExist=function(v){return typeof v!=="undefined"};exports.isEmptyObject=function(obj){return Object.keys(obj).length===0};exports.merge=function(target,a,arrayMode){if(a){const keys=Object.keys(a);const len=keys.length;for(let i=0;i<len;i++){if(arrayMode==="strict"){target[keys[i]]=[a[keys[i]]]}else{target[keys[i]]=a[keys[i]]}}}};exports.getValue=function(v){if(exports.isExist(v)){return v}else{return""}};exports.buildOptions=function(options,defaultOptions,props){var newOptions={};if(!options){return defaultOptions}for(let i=0;i<props.length;i++){if(options[props[i]]!==undefined){newOptions[props[i]]=options[props[i]]}else{newOptions[props[i]]=defaultOptions[props[i]]}}return newOptions};exports.isName=isName;exports.getAllMatches=getAllMatches;exports.nameRegexp=nameRegexp}));var util_1=util.isExist;var util_2=util.isEmptyObject;var util_3=util.merge;var util_4=util.getValue;var util_5=util.buildOptions;var util_6=util.isName;var util_7=util.getAllMatches;var util_8=util.nameRegexp;const convertToJson=function(node,options){const jObj={};if((!node.child||util.isEmptyObject(node.child))&&(!node.attrsMap||util.isEmptyObject(node.attrsMap))){return util.isExist(node.val)?node.val:""}else{if(util.isExist(node.val)){if(!(typeof node.val==="string"&&(node.val===""||node.val===options.cdataPositionChar))){if(options.arrayMode==="strict"){jObj[options.textNodeName]=[node.val]}else{jObj[options.textNodeName]=node.val}}}}util.merge(jObj,node.attrsMap,options.arrayMode);const keys=Object.keys(node.child);for(let index=0;index<keys.length;index++){var tagname=keys[index];if(node.child[tagname]&&node.child[tagname].length>1){jObj[tagname]=[];for(var tag in node.child[tagname]){jObj[tagname].push(convertToJson(node.child[tagname][tag],options))}}else{if(options.arrayMode===true){const result=convertToJson(node.child[tagname][0],options);if(typeof result==="object")jObj[tagname]=[result];else jObj[tagname]=result}else if(options.arrayMode==="strict"){jObj[tagname]=[convertToJson(node.child[tagname][0],options)]}else{jObj[tagname]=convertToJson(node.child[tagname][0],options)}}}return jObj};var convertToJson_1=convertToJson;var node2json={convertToJson:convertToJson_1};var xmlNode=function(tagname,parent,val){this.tagname=tagname;this.parent=parent;this.child={};this.attrsMap={};this.val=val;this.addChild=function(child){if(Array.isArray(this.child[child.tagname])){this.child[child.tagname].push(child)}else{this.child[child.tagname]=[child]}}};const buildOptions=util.buildOptions;const TagType={OPENING:1,CLOSING:2,SELF:3,CDATA:4};const regx="<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g,util.nameRegexp);if(!Number.parseInt&&window.parseInt){Number.parseInt=window.parseInt}if(!Number.parseFloat&&window.parseFloat){Number.parseFloat=window.parseFloat}const defaultOptions={attributeNamePrefix:"@_",attrNodeName:false,textNodeName:"#text",ignoreAttributes:true,ignoreNameSpace:false,allowBooleanAttributes:false,parseNodeValue:true,parseAttributeValue:false,arrayMode:false,trimValues:true,cdataTagName:false,cdataPositionChar:"\\c",tagValueProcessor:function(a,tagName){return a},attrValueProcessor:function(a,attrName){return a},stopNodes:[]};var defaultOptions_1=defaultOptions;const props=["attributeNamePrefix","attrNodeName","textNodeName","ignoreAttributes","ignoreNameSpace","allowBooleanAttributes","parseNodeValue","parseAttributeValue","arrayMode","trimValues","cdataTagName","cdataPositionChar","tagValueProcessor","attrValueProcessor","parseTrueNumberOnly","stopNodes"];var props_1=props;const getTraversalObj=function(xmlData,options){options=buildOptions(options,defaultOptions,props);xmlData=xmlData.replace(/<!--[\s\S]*?-->/g,"");const xmlObj=new xmlNode("!xml");let currentNode=xmlObj;const tagsRegx=new RegExp(regx,"g");let tag=tagsRegx.exec(xmlData);let nextTag=tagsRegx.exec(xmlData);while(tag){const tagType=checkForTagType(tag);if(tagType===TagType.CLOSING){if(currentNode.parent&&tag[12]){currentNode.parent.val=util.getValue(currentNode.parent.val)+""+processTagValue(tag,options,currentNode.parent.tagname)}if(options.stopNodes.length&&options.stopNodes.includes(currentNode.tagname)){currentNode.child=[];if(currentNode.attrsMap==undefined){currentNode.attrsMap={}}currentNode.val=xmlData.substr(currentNode.startIndex+1,tag.index-currentNode.startIndex-1)}currentNode=currentNode.parent}else if(tagType===TagType.CDATA){if(options.cdataTagName){const childNode=new xmlNode(options.cdataTagName,currentNode,tag[3]);childNode.attrsMap=buildAttributesMap(tag[8],options);currentNode.addChild(childNode);currentNode.val=util.getValue(currentNode.val)+options.cdataPositionChar;if(tag[12]){currentNode.val+=processTagValue(tag,options)}}else{currentNode.val=(currentNode.val||"")+(tag[3]||"")+processTagValue(tag,options)}}else if(tagType===TagType.SELF){if(currentNode&&tag[12]){currentNode.val=util.getValue(currentNode.val)+""+processTagValue(tag,options)}const childNode=new xmlNode(options.ignoreNameSpace?tag[7]:tag[5],currentNode,"");if(tag[8]&&tag[8].length>0){tag[8]=tag[8].substr(0,tag[8].length-1)}childNode.attrsMap=buildAttributesMap(tag[8],options);currentNode.addChild(childNode)}else{const childNode=new xmlNode(options.ignoreNameSpace?tag[7]:tag[5],currentNode,processTagValue(tag,options));if(options.stopNodes.length&&options.stopNodes.includes(childNode.tagname)){childNode.startIndex=tag.index+tag[1].length}childNode.attrsMap=buildAttributesMap(tag[8],options);currentNode.addChild(childNode);currentNode=childNode}tag=nextTag;nextTag=tagsRegx.exec(xmlData)}return xmlObj};function processTagValue(parsedTags,options,parentTagName){const tagName=parsedTags[7]||parentTagName;let val=parsedTags[12];if(val){if(options.trimValues){val=val.trim()}val=options.tagValueProcessor(val,tagName);val=parseValue(val,options.parseNodeValue,options.parseTrueNumberOnly)}return val}function checkForTagType(match){if(match[4]==="]]>"){return TagType.CDATA}else if(match[10]==="/"){return TagType.CLOSING}else if(typeof match[8]!=="undefined"&&match[8].substr(match[8].length-1)==="/"){return TagType.SELF}else{return TagType.OPENING}}function resolveNameSpace(tagname,options){if(options.ignoreNameSpace){const tags=tagname.split(":");const prefix=tagname.charAt(0)==="/"?"/":"";if(tags[0]==="xmlns"){return""}if(tags.length===2){tagname=prefix+tags[1]}}return tagname}function parseValue(val,shouldParse,parseTrueNumberOnly){if(shouldParse&&typeof val==="string"){let parsed;if(val.trim()===""||isNaN(val)){parsed=val==="true"?true:val==="false"?false:val}else{if(val.indexOf("0x")!==-1){parsed=Number.parseInt(val,16)}else if(val.indexOf(".")!==-1){parsed=Number.parseFloat(val);val=val.replace(/0+$/,"")}else{parsed=Number.parseInt(val,10)}if(parseTrueNumberOnly){parsed=String(parsed)===val?parsed:val}}return parsed}else{if(util.isExist(val)){return val}else{return""}}}const attrsRegx=new RegExp("([^\\s=]+)\\s*(=\\s*(['\"])(.*?)\\3)?","g");function buildAttributesMap(attrStr,options){if(!options.ignoreAttributes&&typeof attrStr==="string"){attrStr=attrStr.replace(/\r?\n/g," ");const matches=util.getAllMatches(attrStr,attrsRegx);const len=matches.length;const attrs={};for(let i=0;i<len;i++){const attrName=resolveNameSpace(matches[i][1],options);if(attrName.length){if(matches[i][4]!==undefined){if(options.trimValues){matches[i][4]=matches[i][4].trim()}matches[i][4]=options.attrValueProcessor(matches[i][4],attrName);attrs[options.attributeNamePrefix+attrName]=parseValue(matches[i][4],options.parseAttributeValue,options.parseTrueNumberOnly)}else if(options.allowBooleanAttributes){attrs[options.attributeNamePrefix+attrName]=true}}}if(!Object.keys(attrs).length){return}if(options.attrNodeName){const attrCollection={};attrCollection[options.attrNodeName]=attrs;return attrCollection}return attrs}}var getTraversalObj_1=getTraversalObj;var xmlstr2xmlnode={defaultOptions:defaultOptions_1,props:props_1,getTraversalObj:getTraversalObj_1};const defaultOptions$1={allowBooleanAttributes:false};const props$1=["allowBooleanAttributes"];var validate=function(xmlData,options){options=util.buildOptions(options,defaultOptions$1,props$1);const tags=[];let tagFound=false;let reachedRoot=false;if(xmlData[0]==="\ufeff"){xmlData=xmlData.substr(1)}for(let i=0;i<xmlData.length;i++){if(xmlData[i]==="<"){i++;if(xmlData[i]==="?"){i=readPI(xmlData,++i);if(i.err){return i}}else if(xmlData[i]==="!"){i=readCommentAndCDATA(xmlData,i);continue}else{let closingTag=false;if(xmlData[i]==="/"){closingTag=true;i++}let tagName="";for(;i<xmlData.length&&xmlData[i]!==">"&&xmlData[i]!==" "&&xmlData[i]!=="\t"&&xmlData[i]!=="\n"&&xmlData[i]!=="\r";i++){tagName+=xmlData[i]}tagName=tagName.trim();if(tagName[tagName.length-1]==="/"){tagName=tagName.substring(0,tagName.length-1);i--}if(!validateTagName(tagName)){let msg;if(tagName.trim().length===0){msg="There is an unnecessary space between tag name and backward slash '</ ..'."}else{msg=`Tag '${tagName}' is an invalid name.`}return getErrorObject("InvalidTag",msg,getLineNumberForPosition(xmlData,i))}const result=readAttributeStr(xmlData,i);if(result===false){return getErrorObject("InvalidAttr",`Attributes for '${tagName}' have open quote.`,getLineNumberForPosition(xmlData,i))}let attrStr=result.value;i=result.index;if(attrStr[attrStr.length-1]==="/"){attrStr=attrStr.substring(0,attrStr.length-1);const isValid=validateAttributeString(attrStr,options);if(isValid===true){tagFound=true}else{return getErrorObject(isValid.err.code,isValid.err.msg,getLineNumberForPosition(xmlData,i-attrStr.length+isValid.err.line))}}else if(closingTag){if(!result.tagClosed){return getErrorObject("InvalidTag",`Closing tag '${tagName}' doesn't have proper closing.`,getLineNumberForPosition(xmlData,i))}else if(attrStr.trim().length>0){return getErrorObject("InvalidTag",`Closing tag '${tagName}' can't have attributes or invalid starting.`,getLineNumberForPosition(xmlData,i))}else{const otg=tags.pop();if(tagName!==otg){return getErrorObject("InvalidTag",`Closing tag '${otg}' is expected inplace of '${tagName}'.`,getLineNumberForPosition(xmlData,i))}if(tags.length==0){reachedRoot=true}}}else{const isValid=validateAttributeString(attrStr,options);if(isValid!==true){return getErrorObject(isValid.err.code,isValid.err.msg,getLineNumberForPosition(xmlData,i-attrStr.length+isValid.err.line))}if(reachedRoot===true){return getErrorObject("InvalidXml","Multiple possible root nodes found.",getLineNumberForPosition(xmlData,i))}else{tags.push(tagName)}tagFound=true}for(i++;i<xmlData.length;i++){if(xmlData[i]==="<"){if(xmlData[i+1]==="!"){i++;i=readCommentAndCDATA(xmlData,i);continue}else{break}}else if(xmlData[i]==="&"){const afterAmp=validateAmpersand(xmlData,i);if(afterAmp==-1)return getErrorObject("InvalidChar",`char '&' is not expected.`,getLineNumberForPosition(xmlData,i));i=afterAmp}}if(xmlData[i]==="<"){i--}}}else{if(xmlData[i]===" "||xmlData[i]==="\t"||xmlData[i]==="\n"||xmlData[i]==="\r"){continue}return getErrorObject("InvalidChar",`char '${xmlData[i]}' is not expected.`,getLineNumberForPosition(xmlData,i))}}if(!tagFound){return getErrorObject("InvalidXml","Start tag expected.",1)}else if(tags.length>0){return getErrorObject("InvalidXml",`Invalid '${JSON.stringify(tags,null,4).replace(/\r?\n/g,"")}' found.`,1)}return true};function readPI(xmlData,i){var start=i;for(;i<xmlData.length;i++){if(xmlData[i]=="?"||xmlData[i]==" "){var tagname=xmlData.substr(start,i-start);if(i>5&&tagname==="xml"){return getErrorObject("InvalidXml","XML declaration allowed only at the start of the document.",getLineNumberForPosition(xmlData,i))}else if(xmlData[i]=="?"&&xmlData[i+1]==">"){i++;break}else{continue}}}return i}function readCommentAndCDATA(xmlData,i){if(xmlData.length>i+5&&xmlData[i+1]==="-"&&xmlData[i+2]==="-"){for(i+=3;i<xmlData.length;i++){if(xmlData[i]==="-"&&xmlData[i+1]==="-"&&xmlData[i+2]===">"){i+=2;break}}}else if(xmlData.length>i+8&&xmlData[i+1]==="D"&&xmlData[i+2]==="O"&&xmlData[i+3]==="C"&&xmlData[i+4]==="T"&&xmlData[i+5]==="Y"&&xmlData[i+6]==="P"&&xmlData[i+7]==="E"){let angleBracketsCount=1;for(i+=8;i<xmlData.length;i++){if(xmlData[i]==="<"){angleBracketsCount++}else if(xmlData[i]===">"){angleBracketsCount--;if(angleBracketsCount===0){break}}}}else if(xmlData.length>i+9&&xmlData[i+1]==="["&&xmlData[i+2]==="C"&&xmlData[i+3]==="D"&&xmlData[i+4]==="A"&&xmlData[i+5]==="T"&&xmlData[i+6]==="A"&&xmlData[i+7]==="["){for(i+=8;i<xmlData.length;i++){if(xmlData[i]==="]"&&xmlData[i+1]==="]"&&xmlData[i+2]===">"){i+=2;break}}}return i}var doubleQuote='"';var singleQuote="'";function readAttributeStr(xmlData,i){let attrStr="";let startChar="";let tagClosed=false;for(;i<xmlData.length;i++){if(xmlData[i]===doubleQuote||xmlData[i]===singleQuote){if(startChar===""){startChar=xmlData[i]}else if(startChar!==xmlData[i]){continue}else{startChar=""}}else if(xmlData[i]===">"){if(startChar===""){tagClosed=true;break}}attrStr+=xmlData[i]}if(startChar!==""){return false}return{value:attrStr,index:i,tagClosed}}const validAttrStrRegxp=new RegExp("(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['\"])(([\\s\\S])*?)\\5)?","g");function validateAttributeString(attrStr,options){const matches=util.getAllMatches(attrStr,validAttrStrRegxp);const attrNames={};for(let i=0;i<matches.length;i++){if(matches[i][1].length===0){return getErrorObject("InvalidAttr",`Attribute '${matches[i][2]}' has no space in starting.`,getPositionFromMatch(attrStr,matches[i][0]))}else if(matches[i][3]===undefined&&!options.allowBooleanAttributes){return getErrorObject("InvalidAttr",`boolean attribute '${matches[i][2]}' is not allowed.`,getPositionFromMatch(attrStr,matches[i][0]))}const attrName=matches[i][2];if(!validateAttrName(attrName)){return getErrorObject("InvalidAttr",`Attribute '${attrName}' is an invalid name.`,getPositionFromMatch(attrStr,matches[i][0]))}if(!attrNames.hasOwnProperty(attrName)){attrNames[attrName]=1}else{return getErrorObject("InvalidAttr",`Attribute '${attrName}' is repeated.`,getPositionFromMatch(attrStr,matches[i][0]))}}return true}function validateNumberAmpersand(xmlData,i){let re=/\d/;if(xmlData[i]==="x"){i++;re=/[\da-fA-F]/}for(;i<xmlData.length;i++){if(xmlData[i]===";")return i;if(!xmlData[i].match(re))break}return-1}function validateAmpersand(xmlData,i){i++;if(xmlData[i]===";")return-1;if(xmlData[i]==="#"){i++;return validateNumberAmpersand(xmlData,i)}let count=0;for(;i<xmlData.length;i++,count++){if(xmlData[i].match(/\w/)&&count<20)continue;if(xmlData[i]===";")break;return-1}return i}function getErrorObject(code,message,lineNumber){return{err:{code,msg:message,line:lineNumber}}}function validateAttrName(attrName){return util.isName(attrName)}function validateTagName(tagname){return util.isName(tagname)}function getLineNumberForPosition(xmlData,index){var lines=xmlData.substring(0,index).split(/\r?\n/);return lines.length}function getPositionFromMatch(attrStr,match){return attrStr.indexOf(match)+match.length}var validator={validate};const char=function(a){return String.fromCharCode(a)};const chars={nilChar:char(176),missingChar:char(201),nilPremitive:char(175),missingPremitive:char(200),emptyChar:char(178),emptyValue:char(177),boundryChar:char(179),objStart:char(198),arrStart:char(204),arrayEnd:char(185)};const charsArr=[chars.nilChar,chars.nilPremitive,chars.missingChar,chars.missingPremitive,chars.boundryChar,chars.emptyChar,chars.emptyValue,chars.arrayEnd,chars.objStart,chars.arrStart];const _e=function(node,e_schema,options){if(typeof e_schema==="string"){if(node&&node[0]&&node[0].val!==undefined){return getValue(node[0].val)}else{return getValue(node)}}else{const hasValidData=hasData(node);if(hasValidData===true){let str="";if(Array.isArray(e_schema)){str+=chars.arrStart;const itemSchema=e_schema[0];const arr_len=node.length;if(typeof itemSchema==="string"){for(let arr_i=0;arr_i<arr_len;arr_i++){const r=getValue(node[arr_i].val);str=processValue(str,r)}}else{for(let arr_i=0;arr_i<arr_len;arr_i++){const r=_e(node[arr_i],itemSchema,options);str=processValue(str,r)}}str+=chars.arrayEnd}else{str+=chars.objStart;const keys=Object.keys(e_schema);if(Array.isArray(node)){node=node[0]}for(let i in keys){const key=keys[i];let r;if(!options.ignoreAttributes&&node.attrsMap&&node.attrsMap[key]){r=_e(node.attrsMap[key],e_schema[key],options)}else if(key===options.textNodeName){r=_e(node.val,e_schema[key],options)}else{r=_e(node.child[key],e_schema[key],options)}str=processValue(str,r)}}return str}else{return hasValidData}}};const getValue=function(a){switch(a){case undefined:return chars.missingPremitive;case null:return chars.nilPremitive;case"":return chars.emptyValue;default:return a}};const processValue=function(str,r){if(!isAppChar(r[0])&&!isAppChar(str[str.length-1])){str+=chars.boundryChar}return str+r};const isAppChar=function(ch){return charsArr.indexOf(ch)!==-1};function hasData(jObj){if(jObj===undefined){return chars.missingChar}else if(jObj===null){return chars.nilChar}else if(jObj.child&&Object.keys(jObj.child).length===0&&(!jObj.attrsMap||Object.keys(jObj.attrsMap).length===0)){return chars.emptyChar}else{return true}}const buildOptions$1=util.buildOptions;const convert2nimn=function(node,e_schema,options){options=buildOptions$1(options,xmlstr2xmlnode.defaultOptions,xmlstr2xmlnode.props);return _e(node,e_schema,options)};var convert2nimn_1=convert2nimn;var nimndata={convert2nimn:convert2nimn_1};const buildOptions$2=util.buildOptions;const convertToJsonString=function(node,options){options=buildOptions$2(options,xmlstr2xmlnode.defaultOptions,xmlstr2xmlnode.props);options.indentBy=options.indentBy||"";return _cToJsonStr(node,options)};const _cToJsonStr=function(node,options,level){let jObj="{";const keys=Object.keys(node.child);for(let index=0;index<keys.length;index++){var tagname=keys[index];if(node.child[tagname]&&node.child[tagname].length>1){jObj+='"'+tagname+'" : [ ';for(var tag in node.child[tagname]){jObj+=_cToJsonStr(node.child[tagname][tag],options)+" , "}jObj=jObj.substr(0,jObj.length-1)+" ] "}else{jObj+='"'+tagname+'" : '+_cToJsonStr(node.child[tagname][0],options)+" ,"}}util.merge(jObj,node.attrsMap);if(util.isEmptyObject(jObj)){return util.isExist(node.val)?node.val:""}else{if(util.isExist(node.val)){if(!(typeof node.val==="string"&&(node.val===""||node.val===options.cdataPositionChar))){jObj+='"'+options.textNodeName+'" : '+stringval(node.val)}}}if(jObj[jObj.length-1]===","){jObj=jObj.substr(0,jObj.length-2)}return jObj+"}"};function stringval(v){if(v===true||v===false||!isNaN(v)){return v}else{return'"'+v+'"'}}var convertToJsonString_1=convertToJsonString;var node2json_str={convertToJsonString:convertToJsonString_1};const buildOptions$3=util.buildOptions;const defaultOptions$2={attributeNamePrefix:"@_",attrNodeName:false,textNodeName:"#text",ignoreAttributes:true,cdataTagName:false,cdataPositionChar:"\\c",format:false,indentBy:"  ",supressEmptyNode:false,tagValueProcessor:function(a){return a},attrValueProcessor:function(a){return a}};const props$2=["attributeNamePrefix","attrNodeName","textNodeName","ignoreAttributes","cdataTagName","cdataPositionChar","format","indentBy","supressEmptyNode","tagValueProcessor","attrValueProcessor"];function Parser(options){this.options=buildOptions$3(options,defaultOptions$2,props$2);if(this.options.ignoreAttributes||this.options.attrNodeName){this.isAttribute=function(){return false}}else{this.attrPrefixLen=this.options.attributeNamePrefix.length;this.isAttribute=isAttribute}if(this.options.cdataTagName){this.isCDATA=isCDATA}else{this.isCDATA=function(){return false}}this.replaceCDATAstr=replaceCDATAstr;this.replaceCDATAarr=replaceCDATAarr;if(this.options.format){this.indentate=indentate;this.tagEndChar=">\n";this.newLine="\n"}else{this.indentate=function(){return""};this.tagEndChar=">";this.newLine=""}if(this.options.supressEmptyNode){this.buildTextNode=buildEmptyTextNode;this.buildObjNode=buildEmptyObjNode}else{this.buildTextNode=buildTextValNode;this.buildObjNode=buildObjectNode}this.buildTextValNode=buildTextValNode;this.buildObjectNode=buildObjectNode}Parser.prototype.parse=function(jObj){return this.j2x(jObj,0).val};Parser.prototype.j2x=function(jObj,level){let attrStr="";let val="";const keys=Object.keys(jObj);const len=keys.length;for(let i=0;i<len;i++){const key=keys[i];if(typeof jObj[key]==="undefined");else if(jObj[key]===null){val+=this.indentate(level)+"<"+key+"/"+this.tagEndChar}else if(jObj[key]instanceof Date){val+=this.buildTextNode(jObj[key],key,"",level)}else if(typeof jObj[key]!=="object"){const attr=this.isAttribute(key);if(attr){attrStr+=" "+attr+'="'+this.options.attrValueProcessor(""+jObj[key])+'"'}else if(this.isCDATA(key)){if(jObj[this.options.textNodeName]){val+=this.replaceCDATAstr(jObj[this.options.textNodeName],jObj[key])}else{val+=this.replaceCDATAstr("",jObj[key])}}else{if(key===this.options.textNodeName){if(jObj[this.options.cdataTagName]);else{val+=this.options.tagValueProcessor(""+jObj[key])}}else{val+=this.buildTextNode(jObj[key],key,"",level)}}}else if(Array.isArray(jObj[key])){if(this.isCDATA(key)){val+=this.indentate(level);if(jObj[this.options.textNodeName]){val+=this.replaceCDATAarr(jObj[this.options.textNodeName],jObj[key])}else{val+=this.replaceCDATAarr("",jObj[key])}}else{const arrLen=jObj[key].length;for(let j=0;j<arrLen;j++){const item=jObj[key][j];if(typeof item==="undefined");else if(item===null){val+=this.indentate(level)+"<"+key+"/"+this.tagEndChar}else if(typeof item==="object"){const result=this.j2x(item,level+1);val+=this.buildObjNode(result.val,key,result.attrStr,level)}else{val+=this.buildTextNode(item,key,"",level)}}}}else{if(this.options.attrNodeName&&key===this.options.attrNodeName){const Ks=Object.keys(jObj[key]);const L=Ks.length;for(let j=0;j<L;j++){attrStr+=" "+Ks[j]+'="'+this.options.attrValueProcessor(""+jObj[key][Ks[j]])+'"'}}else{const result=this.j2x(jObj[key],level+1);val+=this.buildObjNode(result.val,key,result.attrStr,level)}}}return{attrStr,val}};function replaceCDATAstr(str,cdata){str=this.options.tagValueProcessor(""+str);if(this.options.cdataPositionChar===""||str===""){return str+"<![CDATA["+cdata+"]]"+this.tagEndChar}else{return str.replace(this.options.cdataPositionChar,"<![CDATA["+cdata+"]]"+this.tagEndChar)}}function replaceCDATAarr(str,cdata){str=this.options.tagValueProcessor(""+str);if(this.options.cdataPositionChar===""||str===""){return str+"<![CDATA["+cdata.join("]]><![CDATA[")+"]]"+this.tagEndChar}else{for(let v in cdata){str=str.replace(this.options.cdataPositionChar,"<![CDATA["+cdata[v]+"]]>")}return str+this.newLine}}function buildObjectNode(val,key,attrStr,level){if(attrStr&&!val.includes("<")){return this.indentate(level)+"<"+key+attrStr+">"+val+"</"+key+this.tagEndChar}else{return this.indentate(level)+"<"+key+attrStr+this.tagEndChar+val+this.indentate(level)+"</"+key+this.tagEndChar}}function buildEmptyObjNode(val,key,attrStr,level){if(val!==""){return this.buildObjectNode(val,key,attrStr,level)}else{return this.indentate(level)+"<"+key+attrStr+"/"+this.tagEndChar}}function buildTextValNode(val,key,attrStr,level){return this.indentate(level)+"<"+key+attrStr+">"+this.options.tagValueProcessor(val)+"</"+key+this.tagEndChar}function buildEmptyTextNode(val,key,attrStr,level){if(val!==""){return this.buildTextValNode(val,key,attrStr,level)}else{return this.indentate(level)+"<"+key+attrStr+"/"+this.tagEndChar}}function indentate(level){return this.options.indentBy.repeat(level)}function isAttribute(name){if(name.startsWith(this.options.attributeNamePrefix)){return name.substr(this.attrPrefixLen)}else{return false}}function isCDATA(name){return name===this.options.cdataTagName}var json2xml=Parser;var parser=createCommonjsModule((function(module,exports){const x2xmlnode=xmlstr2xmlnode;const buildOptions=util.buildOptions;exports.parse=function(xmlData,options,validationOption){if(validationOption){if(validationOption===true)validationOption={};const result=validator.validate(xmlData,validationOption);if(result!==true){throw Error(result.err.msg)}}options=buildOptions(options,x2xmlnode.defaultOptions,x2xmlnode.props);return node2json.convertToJson(xmlstr2xmlnode.getTraversalObj(xmlData,options),options)};exports.convertTonimn=nimndata.convert2nimn;exports.getTraversalObj=xmlstr2xmlnode.getTraversalObj;exports.convertToJson=node2json.convertToJson;exports.convertToJsonString=node2json_str.convertToJsonString;exports.validate=validator.validate;exports.j2xParser=json2xml;exports.parseToNimn=function(xmlData,schema,options){return exports.convertTonimn(exports.getTraversalObj(xmlData,options),schema,options)}}));var parser_1=parser.parse;var parser_2=parser.convertTonimn;var parser_3=parser.getTraversalObj;var parser_4=parser.convertToJson;var parser_5=parser.convertToJsonString;var parser_6=parser.validate;var parser_7=parser.j2xParser;var parser_8=parser.parseToNimn;var Aacute="Á";var aacute="á";var Abreve="Ă";var abreve="ă";var ac="∾";var acd="∿";var acE="∾̳";var Acirc="Â";var acirc="â";var acute="´";var Acy="А";var acy="а";var AElig="Æ";var aelig="æ";var af="⁡";var Afr="𝔄";var afr="𝔞";var Agrave="À";var agrave="à";var alefsym="ℵ";var aleph="ℵ";var Alpha="Α";var alpha="α";var Amacr="Ā";var amacr="ā";var amalg="⨿";var amp="&";var AMP="&";var andand="⩕";var And="⩓";var and="∧";var andd="⩜";var andslope="⩘";var andv="⩚";var ang="∠";var ange="⦤";var angle="∠";var angmsdaa="⦨";var angmsdab="⦩";var angmsdac="⦪";var angmsdad="⦫";var angmsdae="⦬";var angmsdaf="⦭";var angmsdag="⦮";var angmsdah="⦯";var angmsd="∡";var angrt="∟";var angrtvb="⊾";var angrtvbd="⦝";var angsph="∢";var angst="Å";var angzarr="⍼";var Aogon="Ą";var aogon="ą";var Aopf="𝔸";var aopf="𝕒";var apacir="⩯";var ap="≈";var apE="⩰";var ape="≊";var apid="≋";var apos="'";var ApplyFunction="⁡";var approx="≈";var approxeq="≊";var Aring="Å";var aring="å";var Ascr="𝒜";var ascr="𝒶";var Assign="≔";var ast="*";var asymp="≈";var asympeq="≍";var Atilde="Ã";var atilde="ã";var Auml="Ä";var auml="ä";var awconint="∳";var awint="⨑";var backcong="≌";var backepsilon="϶";var backprime="‵";var backsim="∽";var backsimeq="⋍";var Backslash="∖";var Barv="⫧";var barvee="⊽";var barwed="⌅";var Barwed="⌆";var barwedge="⌅";var bbrk="⎵";var bbrktbrk="⎶";var bcong="≌";var Bcy="Б";var bcy="б";var bdquo="„";var becaus="∵";var because="∵";var Because="∵";var bemptyv="⦰";var bepsi="϶";var bernou="ℬ";var Bernoullis="ℬ";var Beta="Β";var beta="β";var beth="ℶ";var between="≬";var Bfr="𝔅";var bfr="𝔟";var bigcap="⋂";var bigcirc="◯";var bigcup="⋃";var bigodot="⨀";var bigoplus="⨁";var bigotimes="⨂";var bigsqcup="⨆";var bigstar="★";var bigtriangledown="▽";var bigtriangleup="△";var biguplus="⨄";var bigvee="⋁";var bigwedge="⋀";var bkarow="⤍";var blacklozenge="⧫";var blacksquare="▪";var blacktriangle="▴";var blacktriangledown="▾";var blacktriangleleft="◂";var blacktriangleright="▸";var blank="␣";var blk12="▒";var blk14="░";var blk34="▓";var block="█";var bne="=⃥";var bnequiv="≡⃥";var bNot="⫭";var bnot="⌐";var Bopf="𝔹";var bopf="𝕓";var bot="⊥";var bottom="⊥";var bowtie="⋈";var boxbox="⧉";var boxdl="┐";var boxdL="╕";var boxDl="╖";var boxDL="╗";var boxdr="┌";var boxdR="╒";var boxDr="╓";var boxDR="╔";var boxh="─";var boxH="═";var boxhd="┬";var boxHd="╤";var boxhD="╥";var boxHD="╦";var boxhu="┴";var boxHu="╧";var boxhU="╨";var boxHU="╩";var boxminus="⊟";var boxplus="⊞";var boxtimes="⊠";var boxul="┘";var boxuL="╛";var boxUl="╜";var boxUL="╝";var boxur="└";var boxuR="╘";var boxUr="╙";var boxUR="╚";var boxv="│";var boxV="║";var boxvh="┼";var boxvH="╪";var boxVh="╫";var boxVH="╬";var boxvl="┤";var boxvL="╡";var boxVl="╢";var boxVL="╣";var boxvr="├";var boxvR="╞";var boxVr="╟";var boxVR="╠";var bprime="‵";var breve="˘";var Breve="˘";var brvbar="¦";var bscr="𝒷";var Bscr="ℬ";var bsemi="⁏";var bsim="∽";var bsime="⋍";var bsolb="⧅";var bsol="\\";var bsolhsub="⟈";var bull="•";var bullet="•";var bump="≎";var bumpE="⪮";var bumpe="≏";var Bumpeq="≎";var bumpeq="≏";var Cacute="Ć";var cacute="ć";var capand="⩄";var capbrcup="⩉";var capcap="⩋";var cap="∩";var Cap="⋒";var capcup="⩇";var capdot="⩀";var CapitalDifferentialD="ⅅ";var caps="∩︀";var caret="⁁";var caron="ˇ";var Cayleys="ℭ";var ccaps="⩍";var Ccaron="Č";var ccaron="č";var Ccedil="Ç";var ccedil="ç";var Ccirc="Ĉ";var ccirc="ĉ";var Cconint="∰";var ccups="⩌";var ccupssm="⩐";var Cdot="Ċ";var cdot="ċ";var cedil="¸";var Cedilla="¸";var cemptyv="⦲";var cent="¢";var centerdot="·";var CenterDot="·";var cfr="𝔠";var Cfr="ℭ";var CHcy="Ч";var chcy="ч";var check="✓";var checkmark="✓";var Chi="Χ";var chi="χ";var circ="ˆ";var circeq="≗";var circlearrowleft="↺";var circlearrowright="↻";var circledast="⊛";var circledcirc="⊚";var circleddash="⊝";var CircleDot="⊙";var circledR="®";var circledS="Ⓢ";var CircleMinus="⊖";var CirclePlus="⊕";var CircleTimes="⊗";var cir="○";var cirE="⧃";var cire="≗";var cirfnint="⨐";var cirmid="⫯";var cirscir="⧂";var ClockwiseContourIntegral="∲";var CloseCurlyDoubleQuote="”";var CloseCurlyQuote="’";var clubs="♣";var clubsuit="♣";var colon=":";var Colon="∷";var Colone="⩴";var colone="≔";var coloneq="≔";var comma=",";var commat="@";var comp="∁";var compfn="∘";var complement="∁";var complexes="ℂ";var cong="≅";var congdot="⩭";var Congruent="≡";var conint="∮";var Conint="∯";var ContourIntegral="∮";var copf="𝕔";var Copf="ℂ";var coprod="∐";var Coproduct="∐";var copy="©";var COPY="©";var copysr="℗";var CounterClockwiseContourIntegral="∳";var crarr="↵";var cross="✗";var Cross="⨯";var Cscr="𝒞";var cscr="𝒸";var csub="⫏";var csube="⫑";var csup="⫐";var csupe="⫒";var ctdot="⋯";var cudarrl="⤸";var cudarrr="⤵";var cuepr="⋞";var cuesc="⋟";var cularr="↶";var cularrp="⤽";var cupbrcap="⩈";var cupcap="⩆";var CupCap="≍";var cup="∪";var Cup="⋓";var cupcup="⩊";var cupdot="⊍";var cupor="⩅";var cups="∪︀";var curarr="↷";var curarrm="⤼";var curlyeqprec="⋞";var curlyeqsucc="⋟";var curlyvee="⋎";var curlywedge="⋏";var curren="¤";var curvearrowleft="↶";var curvearrowright="↷";var cuvee="⋎";var cuwed="⋏";var cwconint="∲";var cwint="∱";var cylcty="⌭";var dagger="†";var Dagger="‡";var daleth="ℸ";var darr="↓";var Darr="↡";var dArr="⇓";var dash="‐";var Dashv="⫤";var dashv="⊣";var dbkarow="⤏";var dblac="˝";var Dcaron="Ď";var dcaron="ď";var Dcy="Д";var dcy="д";var ddagger="‡";var ddarr="⇊";var DD="ⅅ";var dd="ⅆ";var DDotrahd="⤑";var ddotseq="⩷";var deg="°";var Del="∇";var Delta="Δ";var delta="δ";var demptyv="⦱";var dfisht="⥿";var Dfr="𝔇";var dfr="𝔡";var dHar="⥥";var dharl="⇃";var dharr="⇂";var DiacriticalAcute="´";var DiacriticalDot="˙";var DiacriticalDoubleAcute="˝";var DiacriticalGrave="`";var DiacriticalTilde="˜";var diam="⋄";var diamond="⋄";var Diamond="⋄";var diamondsuit="♦";var diams="♦";var die="¨";var DifferentialD="ⅆ";var digamma="ϝ";var disin="⋲";var div="÷";var divide="÷";var divideontimes="⋇";var divonx="⋇";var DJcy="Ђ";var djcy="ђ";var dlcorn="⌞";var dlcrop="⌍";var dollar="$";var Dopf="𝔻";var dopf="𝕕";var Dot="¨";var dot="˙";var DotDot="⃜";var doteq="≐";var doteqdot="≑";var DotEqual="≐";var dotminus="∸";var dotplus="∔";var dotsquare="⊡";var doublebarwedge="⌆";var DoubleContourIntegral="∯";var DoubleDot="¨";var DoubleDownArrow="⇓";var DoubleLeftArrow="⇐";var DoubleLeftRightArrow="⇔";var DoubleLeftTee="⫤";var DoubleLongLeftArrow="⟸";var DoubleLongLeftRightArrow="⟺";var DoubleLongRightArrow="⟹";var DoubleRightArrow="⇒";var DoubleRightTee="⊨";var DoubleUpArrow="⇑";var DoubleUpDownArrow="⇕";var DoubleVerticalBar="∥";var DownArrowBar="⤓";var downarrow="↓";var DownArrow="↓";var Downarrow="⇓";var DownArrowUpArrow="⇵";var DownBreve="̑";var downdownarrows="⇊";var downharpoonleft="⇃";var downharpoonright="⇂";var DownLeftRightVector="⥐";var DownLeftTeeVector="⥞";var DownLeftVectorBar="⥖";var DownLeftVector="↽";var DownRightTeeVector="⥟";var DownRightVectorBar="⥗";var DownRightVector="⇁";var DownTeeArrow="↧";var DownTee="⊤";var drbkarow="⤐";var drcorn="⌟";var drcrop="⌌";var Dscr="𝒟";var dscr="𝒹";var DScy="Ѕ";var dscy="ѕ";var dsol="⧶";var Dstrok="Đ";var dstrok="đ";var dtdot="⋱";var dtri="▿";var dtrif="▾";var duarr="⇵";var duhar="⥯";var dwangle="⦦";var DZcy="Џ";var dzcy="џ";var dzigrarr="⟿";var Eacute="É";var eacute="é";var easter="⩮";var Ecaron="Ě";var ecaron="ě";var Ecirc="Ê";var ecirc="ê";var ecir="≖";var ecolon="≕";var Ecy="Э";var ecy="э";var eDDot="⩷";var Edot="Ė";var edot="ė";var eDot="≑";var ee="ⅇ";var efDot="≒";var Efr="𝔈";var efr="𝔢";var eg="⪚";var Egrave="È";var egrave="è";var egs="⪖";var egsdot="⪘";var el="⪙";var Element="∈";var elinters="⏧";var ell="ℓ";var els="⪕";var elsdot="⪗";var Emacr="Ē";var emacr="ē";var empty="∅";var emptyset="∅";var EmptySmallSquare="◻";var emptyv="∅";var EmptyVerySmallSquare="▫";var emsp13=" ";var emsp14=" ";var emsp=" ";var ENG="Ŋ";var eng="ŋ";var ensp=" ";var Eogon="Ę";var eogon="ę";var Eopf="𝔼";var eopf="𝕖";var epar="⋕";var eparsl="⧣";var eplus="⩱";var epsi="ε";var Epsilon="Ε";var epsilon="ε";var epsiv="ϵ";var eqcirc="≖";var eqcolon="≕";var eqsim="≂";var eqslantgtr="⪖";var eqslantless="⪕";var Equal="⩵";var equals="=";var EqualTilde="≂";var equest="≟";var Equilibrium="⇌";var equiv="≡";var equivDD="⩸";var eqvparsl="⧥";var erarr="⥱";var erDot="≓";var escr="ℯ";var Escr="ℰ";var esdot="≐";var Esim="⩳";var esim="≂";var Eta="Η";var eta="η";var ETH="Ð";var eth="ð";var Euml="Ë";var euml="ë";var euro="€";var excl="!";var exist="∃";var Exists="∃";var expectation="ℰ";var exponentiale="ⅇ";var ExponentialE="ⅇ";var fallingdotseq="≒";var Fcy="Ф";var fcy="ф";var female="♀";var ffilig="ﬃ";var fflig="ﬀ";var ffllig="ﬄ";var Ffr="𝔉";var ffr="𝔣";var filig="ﬁ";var FilledSmallSquare="◼";var FilledVerySmallSquare="▪";var fjlig="fj";var flat="♭";var fllig="ﬂ";var fltns="▱";var fnof="ƒ";var Fopf="𝔽";var fopf="𝕗";var forall="∀";var ForAll="∀";var fork="⋔";var forkv="⫙";var Fouriertrf="ℱ";var fpartint="⨍";var frac12="½";var frac13="⅓";var frac14="¼";var frac15="⅕";var frac16="⅙";var frac18="⅛";var frac23="⅔";var frac25="⅖";var frac34="¾";var frac35="⅗";var frac38="⅜";var frac45="⅘";var frac56="⅚";var frac58="⅝";var frac78="⅞";var frasl="⁄";var frown="⌢";var fscr="𝒻";var Fscr="ℱ";var gacute="ǵ";var Gamma="Γ";var gamma="γ";var Gammad="Ϝ";var gammad="ϝ";var gap="⪆";var Gbreve="Ğ";var gbreve="ğ";var Gcedil="Ģ";var Gcirc="Ĝ";var gcirc="ĝ";var Gcy="Г";var gcy="г";var Gdot="Ġ";var gdot="ġ";var ge="≥";var gE="≧";var gEl="⪌";var gel="⋛";var geq="≥";var geqq="≧";var geqslant="⩾";var gescc="⪩";var ges="⩾";var gesdot="⪀";var gesdoto="⪂";var gesdotol="⪄";var gesl="⋛︀";var gesles="⪔";var Gfr="𝔊";var gfr="𝔤";var gg="≫";var Gg="⋙";var ggg="⋙";var gimel="ℷ";var GJcy="Ѓ";var gjcy="ѓ";var gla="⪥";var gl="≷";var glE="⪒";var glj="⪤";var gnap="⪊";var gnapprox="⪊";var gne="⪈";var gnE="≩";var gneq="⪈";var gneqq="≩";var gnsim="⋧";var Gopf="𝔾";var gopf="𝕘";var grave="`";var GreaterEqual="≥";var GreaterEqualLess="⋛";var GreaterFullEqual="≧";var GreaterGreater="⪢";var GreaterLess="≷";var GreaterSlantEqual="⩾";var GreaterTilde="≳";var Gscr="𝒢";var gscr="ℊ";var gsim="≳";var gsime="⪎";var gsiml="⪐";var gtcc="⪧";var gtcir="⩺";var gt=">";var GT=">";var Gt="≫";var gtdot="⋗";var gtlPar="⦕";var gtquest="⩼";var gtrapprox="⪆";var gtrarr="⥸";var gtrdot="⋗";var gtreqless="⋛";var gtreqqless="⪌";var gtrless="≷";var gtrsim="≳";var gvertneqq="≩︀";var gvnE="≩︀";var Hacek="ˇ";var hairsp=" ";var half="½";var hamilt="ℋ";var HARDcy="Ъ";var hardcy="ъ";var harrcir="⥈";var harr="↔";var hArr="⇔";var harrw="↭";var Hat="^";var hbar="ℏ";var Hcirc="Ĥ";var hcirc="ĥ";var hearts="♥";var heartsuit="♥";var hellip="…";var hercon="⊹";var hfr="𝔥";var Hfr="ℌ";var HilbertSpace="ℋ";var hksearow="⤥";var hkswarow="⤦";var hoarr="⇿";var homtht="∻";var hookleftarrow="↩";var hookrightarrow="↪";var hopf="𝕙";var Hopf="ℍ";var horbar="―";var HorizontalLine="─";var hscr="𝒽";var Hscr="ℋ";var hslash="ℏ";var Hstrok="Ħ";var hstrok="ħ";var HumpDownHump="≎";var HumpEqual="≏";var hybull="⁃";var hyphen="‐";var Iacute="Í";var iacute="í";var ic="⁣";var Icirc="Î";var icirc="î";var Icy="И";var icy="и";var Idot="İ";var IEcy="Е";var iecy="е";var iexcl="¡";var iff="⇔";var ifr="𝔦";var Ifr="ℑ";var Igrave="Ì";var igrave="ì";var ii="ⅈ";var iiiint="⨌";var iiint="∭";var iinfin="⧜";var iiota="℩";var IJlig="Ĳ";var ijlig="ĳ";var Imacr="Ī";var imacr="ī";var image="ℑ";var ImaginaryI="ⅈ";var imagline="ℐ";var imagpart="ℑ";var imath="ı";var Im="ℑ";var imof="⊷";var imped="Ƶ";var Implies="⇒";var incare="℅";var infin="∞";var infintie="⧝";var inodot="ı";var intcal="⊺";var int="∫";var Int="∬";var integers="ℤ";var Integral="∫";var intercal="⊺";var Intersection="⋂";var intlarhk="⨗";var intprod="⨼";var InvisibleComma="⁣";var InvisibleTimes="⁢";var IOcy="Ё";var iocy="ё";var Iogon="Į";var iogon="į";var Iopf="𝕀";var iopf="𝕚";var Iota="Ι";var iota="ι";var iprod="⨼";var iquest="¿";var iscr="𝒾";var Iscr="ℐ";var isin="∈";var isindot="⋵";var isinE="⋹";var isins="⋴";var isinsv="⋳";var isinv="∈";var it="⁢";var Itilde="Ĩ";var itilde="ĩ";var Iukcy="І";var iukcy="і";var Iuml="Ï";var iuml="ï";var Jcirc="Ĵ";var jcirc="ĵ";var Jcy="Й";var jcy="й";var Jfr="𝔍";var jfr="𝔧";var jmath="ȷ";var Jopf="𝕁";var jopf="𝕛";var Jscr="𝒥";var jscr="𝒿";var Jsercy="Ј";var jsercy="ј";var Jukcy="Є";var jukcy="є";var Kappa="Κ";var kappa="κ";var kappav="ϰ";var Kcedil="Ķ";var kcedil="ķ";var Kcy="К";var kcy="к";var Kfr="𝔎";var kfr="𝔨";var kgreen="ĸ";var KHcy="Х";var khcy="х";var KJcy="Ќ";var kjcy="ќ";var Kopf="𝕂";var kopf="𝕜";var Kscr="𝒦";var kscr="𝓀";var lAarr="⇚";var Lacute="Ĺ";var lacute="ĺ";var laemptyv="⦴";var lagran="ℒ";var Lambda="Λ";var lambda="λ";var lang="⟨";var Lang="⟪";var langd="⦑";var langle="⟨";var lap="⪅";var Laplacetrf="ℒ";var laquo="«";var larrb="⇤";var larrbfs="⤟";var larr="←";var Larr="↞";var lArr="⇐";var larrfs="⤝";var larrhk="↩";var larrlp="↫";var larrpl="⤹";var larrsim="⥳";var larrtl="↢";var latail="⤙";var lAtail="⤛";var lat="⪫";var late="⪭";var lates="⪭︀";var lbarr="⤌";var lBarr="⤎";var lbbrk="❲";var lbrace="{";var lbrack="[";var lbrke="⦋";var lbrksld="⦏";var lbrkslu="⦍";var Lcaron="Ľ";var lcaron="ľ";var Lcedil="Ļ";var lcedil="ļ";var lceil="⌈";var lcub="{";var Lcy="Л";var lcy="л";var ldca="⤶";var ldquo="“";var ldquor="„";var ldrdhar="⥧";var ldrushar="⥋";var ldsh="↲";var le="≤";var lE="≦";var LeftAngleBracket="⟨";var LeftArrowBar="⇤";var leftarrow="←";var LeftArrow="←";var Leftarrow="⇐";var LeftArrowRightArrow="⇆";var leftarrowtail="↢";var LeftCeiling="⌈";var LeftDoubleBracket="⟦";var LeftDownTeeVector="⥡";var LeftDownVectorBar="⥙";var LeftDownVector="⇃";var LeftFloor="⌊";var leftharpoondown="↽";var leftharpoonup="↼";var leftleftarrows="⇇";var leftrightarrow="↔";var LeftRightArrow="↔";var Leftrightarrow="⇔";var leftrightarrows="⇆";var leftrightharpoons="⇋";var leftrightsquigarrow="↭";var LeftRightVector="⥎";var LeftTeeArrow="↤";var LeftTee="⊣";var LeftTeeVector="⥚";var leftthreetimes="⋋";var LeftTriangleBar="⧏";var LeftTriangle="⊲";var LeftTriangleEqual="⊴";var LeftUpDownVector="⥑";var LeftUpTeeVector="⥠";var LeftUpVectorBar="⥘";var LeftUpVector="↿";var LeftVectorBar="⥒";var LeftVector="↼";var lEg="⪋";var leg="⋚";var leq="≤";var leqq="≦";var leqslant="⩽";var lescc="⪨";var les="⩽";var lesdot="⩿";var lesdoto="⪁";var lesdotor="⪃";var lesg="⋚︀";var lesges="⪓";var lessapprox="⪅";var lessdot="⋖";var lesseqgtr="⋚";var lesseqqgtr="⪋";var LessEqualGreater="⋚";var LessFullEqual="≦";var LessGreater="≶";var lessgtr="≶";var LessLess="⪡";var lesssim="≲";var LessSlantEqual="⩽";var LessTilde="≲";var lfisht="⥼";var lfloor="⌊";var Lfr="𝔏";var lfr="𝔩";var lg="≶";var lgE="⪑";var lHar="⥢";var lhard="↽";var lharu="↼";var lharul="⥪";var lhblk="▄";var LJcy="Љ";var ljcy="љ";var llarr="⇇";var ll="≪";var Ll="⋘";var llcorner="⌞";var Lleftarrow="⇚";var llhard="⥫";var lltri="◺";var Lmidot="Ŀ";var lmidot="ŀ";var lmoustache="⎰";var lmoust="⎰";var lnap="⪉";var lnapprox="⪉";var lne="⪇";var lnE="≨";var lneq="⪇";var lneqq="≨";var lnsim="⋦";var loang="⟬";var loarr="⇽";var lobrk="⟦";var longleftarrow="⟵";var LongLeftArrow="⟵";var Longleftarrow="⟸";var longleftrightarrow="⟷";var LongLeftRightArrow="⟷";var Longleftrightarrow="⟺";var longmapsto="⟼";var longrightarrow="⟶";var LongRightArrow="⟶";var Longrightarrow="⟹";var looparrowleft="↫";var looparrowright="↬";var lopar="⦅";var Lopf="𝕃";var lopf="𝕝";var loplus="⨭";var lotimes="⨴";var lowast="∗";var lowbar="_";var LowerLeftArrow="↙";var LowerRightArrow="↘";var loz="◊";var lozenge="◊";var lozf="⧫";var lpar="(";var lparlt="⦓";var lrarr="⇆";var lrcorner="⌟";var lrhar="⇋";var lrhard="⥭";var lrm="‎";var lrtri="⊿";var lsaquo="‹";var lscr="𝓁";var Lscr="ℒ";var lsh="↰";var Lsh="↰";var lsim="≲";var lsime="⪍";var lsimg="⪏";var lsqb="[";var lsquo="‘";var lsquor="‚";var Lstrok="Ł";var lstrok="ł";var ltcc="⪦";var ltcir="⩹";var lt="<";var LT="<";var Lt="≪";var ltdot="⋖";var lthree="⋋";var ltimes="⋉";var ltlarr="⥶";var ltquest="⩻";var ltri="◃";var ltrie="⊴";var ltrif="◂";var ltrPar="⦖";var lurdshar="⥊";var luruhar="⥦";var lvertneqq="≨︀";var lvnE="≨︀";var macr="¯";var male="♂";var malt="✠";var maltese="✠";var map="↦";var mapsto="↦";var mapstodown="↧";var mapstoleft="↤";var mapstoup="↥";var marker="▮";var mcomma="⨩";var Mcy="М";var mcy="м";var mdash="—";var mDDot="∺";var measuredangle="∡";var MediumSpace=" ";var Mellintrf="ℳ";var Mfr="𝔐";var mfr="𝔪";var mho="℧";var micro="µ";var midast="*";var midcir="⫰";var mid="∣";var middot="·";var minusb="⊟";var minus="−";var minusd="∸";var minusdu="⨪";var MinusPlus="∓";var mlcp="⫛";var mldr="…";var mnplus="∓";var models="⊧";var Mopf="𝕄";var mopf="𝕞";var mp="∓";var mscr="𝓂";var Mscr="ℳ";var mstpos="∾";var Mu="Μ";var mu="μ";var multimap="⊸";var mumap="⊸";var nabla="∇";var Nacute="Ń";var nacute="ń";var nang="∠⃒";var nap="≉";var napE="⩰̸";var napid="≋̸";var napos="ŉ";var napprox="≉";var natural="♮";var naturals="ℕ";var natur="♮";var nbsp=" ";var nbump="≎̸";var nbumpe="≏̸";var ncap="⩃";var Ncaron="Ň";var ncaron="ň";var Ncedil="Ņ";var ncedil="ņ";var ncong="≇";var ncongdot="⩭̸";var ncup="⩂";var Ncy="Н";var ncy="н";var ndash="–";var nearhk="⤤";var nearr="↗";var neArr="⇗";var nearrow="↗";var ne="≠";var nedot="≐̸";var NegativeMediumSpace="​";var NegativeThickSpace="​";var NegativeThinSpace="​";var NegativeVeryThinSpace="​";var nequiv="≢";var nesear="⤨";var nesim="≂̸";var NestedGreaterGreater="≫";var NestedLessLess="≪";var NewLine="\n";var nexist="∄";var nexists="∄";var Nfr="𝔑";var nfr="𝔫";var ngE="≧̸";var nge="≱";var ngeq="≱";var ngeqq="≧̸";var ngeqslant="⩾̸";var nges="⩾̸";var nGg="⋙̸";var ngsim="≵";var nGt="≫⃒";var ngt="≯";var ngtr="≯";var nGtv="≫̸";var nharr="↮";var nhArr="⇎";var nhpar="⫲";var ni="∋";var nis="⋼";var nisd="⋺";var niv="∋";var NJcy="Њ";var njcy="њ";var nlarr="↚";var nlArr="⇍";var nldr="‥";var nlE="≦̸";var nle="≰";var nleftarrow="↚";var nLeftarrow="⇍";var nleftrightarrow="↮";var nLeftrightarrow="⇎";var nleq="≰";var nleqq="≦̸";var nleqslant="⩽̸";var nles="⩽̸";var nless="≮";var nLl="⋘̸";var nlsim="≴";var nLt="≪⃒";var nlt="≮";var nltri="⋪";var nltrie="⋬";var nLtv="≪̸";var nmid="∤";var NoBreak="⁠";var NonBreakingSpace=" ";var nopf="𝕟";var Nopf="ℕ";var Not="⫬";var not="¬";var NotCongruent="≢";var NotCupCap="≭";var NotDoubleVerticalBar="∦";var NotElement="∉";var NotEqual="≠";var NotEqualTilde="≂̸";var NotExists="∄";var NotGreater="≯";var NotGreaterEqual="≱";var NotGreaterFullEqual="≧̸";var NotGreaterGreater="≫̸";var NotGreaterLess="≹";var NotGreaterSlantEqual="⩾̸";var NotGreaterTilde="≵";var NotHumpDownHump="≎̸";var NotHumpEqual="≏̸";var notin="∉";var notindot="⋵̸";var notinE="⋹̸";var notinva="∉";var notinvb="⋷";var notinvc="⋶";var NotLeftTriangleBar="⧏̸";var NotLeftTriangle="⋪";var NotLeftTriangleEqual="⋬";var NotLess="≮";var NotLessEqual="≰";var NotLessGreater="≸";var NotLessLess="≪̸";var NotLessSlantEqual="⩽̸";var NotLessTilde="≴";var NotNestedGreaterGreater="⪢̸";var NotNestedLessLess="⪡̸";var notni="∌";var notniva="∌";var notnivb="⋾";var notnivc="⋽";var NotPrecedes="⊀";var NotPrecedesEqual="⪯̸";var NotPrecedesSlantEqual="⋠";var NotReverseElement="∌";var NotRightTriangleBar="⧐̸";var NotRightTriangle="⋫";var NotRightTriangleEqual="⋭";var NotSquareSubset="⊏̸";var NotSquareSubsetEqual="⋢";var NotSquareSuperset="⊐̸";var NotSquareSupersetEqual="⋣";var NotSubset="⊂⃒";var NotSubsetEqual="⊈";var NotSucceeds="⊁";var NotSucceedsEqual="⪰̸";var NotSucceedsSlantEqual="⋡";var NotSucceedsTilde="≿̸";var NotSuperset="⊃⃒";var NotSupersetEqual="⊉";var NotTilde="≁";var NotTildeEqual="≄";var NotTildeFullEqual="≇";var NotTildeTilde="≉";var NotVerticalBar="∤";var nparallel="∦";var npar="∦";var nparsl="⫽⃥";var npart="∂̸";var npolint="⨔";var npr="⊀";var nprcue="⋠";var nprec="⊀";var npreceq="⪯̸";var npre="⪯̸";var nrarrc="⤳̸";var nrarr="↛";var nrArr="⇏";var nrarrw="↝̸";var nrightarrow="↛";var nRightarrow="⇏";var nrtri="⋫";var nrtrie="⋭";var nsc="⊁";var nsccue="⋡";var nsce="⪰̸";var Nscr="𝒩";var nscr="𝓃";var nshortmid="∤";var nshortparallel="∦";var nsim="≁";var nsime="≄";var nsimeq="≄";var nsmid="∤";var nspar="∦";var nsqsube="⋢";var nsqsupe="⋣";var nsub="⊄";var nsubE="⫅̸";var nsube="⊈";var nsubset="⊂⃒";var nsubseteq="⊈";var nsubseteqq="⫅̸";var nsucc="⊁";var nsucceq="⪰̸";var nsup="⊅";var nsupE="⫆̸";var nsupe="⊉";var nsupset="⊃⃒";var nsupseteq="⊉";var nsupseteqq="⫆̸";var ntgl="≹";var Ntilde="Ñ";var ntilde="ñ";var ntlg="≸";var ntriangleleft="⋪";var ntrianglelefteq="⋬";var ntriangleright="⋫";var ntrianglerighteq="⋭";var Nu="Ν";var nu="ν";var num="#";var numero="№";var numsp=" ";var nvap="≍⃒";var nvdash="⊬";var nvDash="⊭";var nVdash="⊮";var nVDash="⊯";var nvge="≥⃒";var nvgt=">⃒";var nvHarr="⤄";var nvinfin="⧞";var nvlArr="⤂";var nvle="≤⃒";var nvlt="<⃒";var nvltrie="⊴⃒";var nvrArr="⤃";var nvrtrie="⊵⃒";var nvsim="∼⃒";var nwarhk="⤣";var nwarr="↖";var nwArr="⇖";var nwarrow="↖";var nwnear="⤧";var Oacute="Ó";var oacute="ó";var oast="⊛";var Ocirc="Ô";var ocirc="ô";var ocir="⊚";var Ocy="О";var ocy="о";var odash="⊝";var Odblac="Ő";var odblac="ő";var odiv="⨸";var odot="⊙";var odsold="⦼";var OElig="Œ";var oelig="œ";var ofcir="⦿";var Ofr="𝔒";var ofr="𝔬";var ogon="˛";var Ograve="Ò";var ograve="ò";var ogt="⧁";var ohbar="⦵";var ohm="Ω";var oint="∮";var olarr="↺";var olcir="⦾";var olcross="⦻";var oline="‾";var olt="⧀";var Omacr="Ō";var omacr="ō";var Omega="Ω";var omega="ω";var Omicron="Ο";var omicron="ο";var omid="⦶";var ominus="⊖";var Oopf="𝕆";var oopf="𝕠";var opar="⦷";var OpenCurlyDoubleQuote="“";var OpenCurlyQuote="‘";var operp="⦹";var oplus="⊕";var orarr="↻";var Or="⩔";var or="∨";var ord="⩝";var order="ℴ";var orderof="ℴ";var ordf="ª";var ordm="º";var origof="⊶";var oror="⩖";var orslope="⩗";var orv="⩛";var oS="Ⓢ";var Oscr="𝒪";var oscr="ℴ";var Oslash="Ø";var oslash="ø";var osol="⊘";var Otilde="Õ";var otilde="õ";var otimesas="⨶";var Otimes="⨷";var otimes="⊗";var Ouml="Ö";var ouml="ö";var ovbar="⌽";var OverBar="‾";var OverBrace="⏞";var OverBracket="⎴";var OverParenthesis="⏜";var para="¶";var parallel="∥";var par="∥";var parsim="⫳";var parsl="⫽";var part="∂";var PartialD="∂";var Pcy="П";var pcy="п";var percnt="%";var period=".";var permil="‰";var perp="⊥";var pertenk="‱";var Pfr="𝔓";var pfr="𝔭";var Phi="Φ";var phi="φ";var phiv="ϕ";var phmmat="ℳ";var phone="☎";var Pi="Π";var pi="π";var pitchfork="⋔";var piv="ϖ";var planck="ℏ";var planckh="ℎ";var plankv="ℏ";var plusacir="⨣";var plusb="⊞";var pluscir="⨢";var plus="+";var plusdo="∔";var plusdu="⨥";var pluse="⩲";var PlusMinus="±";var plusmn="±";var plussim="⨦";var plustwo="⨧";var pm="±";var Poincareplane="ℌ";var pointint="⨕";var popf="𝕡";var Popf="ℙ";var pound="£";var prap="⪷";var Pr="⪻";var pr="≺";var prcue="≼";var precapprox="⪷";var prec="≺";var preccurlyeq="≼";var Precedes="≺";var PrecedesEqual="⪯";var PrecedesSlantEqual="≼";var PrecedesTilde="≾";var preceq="⪯";var precnapprox="⪹";var precneqq="⪵";var precnsim="⋨";var pre="⪯";var prE="⪳";var precsim="≾";var prime="′";var Prime="″";var primes="ℙ";var prnap="⪹";var prnE="⪵";var prnsim="⋨";var prod="∏";var Product="∏";var profalar="⌮";var profline="⌒";var profsurf="⌓";var prop="∝";var Proportional="∝";var Proportion="∷";var propto="∝";var prsim="≾";var prurel="⊰";var Pscr="𝒫";var pscr="𝓅";var Psi="Ψ";var psi="ψ";var puncsp=" ";var Qfr="𝔔";var qfr="𝔮";var qint="⨌";var qopf="𝕢";var Qopf="ℚ";var qprime="⁗";var Qscr="𝒬";var qscr="𝓆";var quaternions="ℍ";var quatint="⨖";var quest="?";var questeq="≟";var quot='"';var QUOT='"';var rAarr="⇛";var race="∽̱";var Racute="Ŕ";var racute="ŕ";var radic="√";var raemptyv="⦳";var rang="⟩";var Rang="⟫";var rangd="⦒";var range="⦥";var rangle="⟩";var raquo="»";var rarrap="⥵";var rarrb="⇥";var rarrbfs="⤠";var rarrc="⤳";var rarr="→";var Rarr="↠";var rArr="⇒";var rarrfs="⤞";var rarrhk="↪";var rarrlp="↬";var rarrpl="⥅";var rarrsim="⥴";var Rarrtl="⤖";var rarrtl="↣";var rarrw="↝";var ratail="⤚";var rAtail="⤜";var ratio="∶";var rationals="ℚ";var rbarr="⤍";var rBarr="⤏";var RBarr="⤐";var rbbrk="❳";var rbrace="}";var rbrack="]";var rbrke="⦌";var rbrksld="⦎";var rbrkslu="⦐";var Rcaron="Ř";var rcaron="ř";var Rcedil="Ŗ";var rcedil="ŗ";var rceil="⌉";var rcub="}";var Rcy="Р";var rcy="р";var rdca="⤷";var rdldhar="⥩";var rdquo="”";var rdquor="”";var rdsh="↳";var real="ℜ";var realine="ℛ";var realpart="ℜ";var reals="ℝ";var Re="ℜ";var rect="▭";var reg="®";var REG="®";var ReverseElement="∋";var ReverseEquilibrium="⇋";var ReverseUpEquilibrium="⥯";var rfisht="⥽";var rfloor="⌋";var rfr="𝔯";var Rfr="ℜ";var rHar="⥤";var rhard="⇁";var rharu="⇀";var rharul="⥬";var Rho="Ρ";var rho="ρ";var rhov="ϱ";var RightAngleBracket="⟩";var RightArrowBar="⇥";var rightarrow="→";var RightArrow="→";var Rightarrow="⇒";var RightArrowLeftArrow="⇄";var rightarrowtail="↣";var RightCeiling="⌉";var RightDoubleBracket="⟧";var RightDownTeeVector="⥝";var RightDownVectorBar="⥕";var RightDownVector="⇂";var RightFloor="⌋";var rightharpoondown="⇁";var rightharpoonup="⇀";var rightleftarrows="⇄";var rightleftharpoons="⇌";var rightrightarrows="⇉";var rightsquigarrow="↝";var RightTeeArrow="↦";var RightTee="⊢";var RightTeeVector="⥛";var rightthreetimes="⋌";var RightTriangleBar="⧐";var RightTriangle="⊳";var RightTriangleEqual="⊵";var RightUpDownVector="⥏";var RightUpTeeVector="⥜";var RightUpVectorBar="⥔";var RightUpVector="↾";var RightVectorBar="⥓";var RightVector="⇀";var ring="˚";var risingdotseq="≓";var rlarr="⇄";var rlhar="⇌";var rlm="‏";var rmoustache="⎱";var rmoust="⎱";var rnmid="⫮";var roang="⟭";var roarr="⇾";var robrk="⟧";var ropar="⦆";var ropf="𝕣";var Ropf="ℝ";var roplus="⨮";var rotimes="⨵";var RoundImplies="⥰";var rpar=")";var rpargt="⦔";var rppolint="⨒";var rrarr="⇉";var Rrightarrow="⇛";var rsaquo="›";var rscr="𝓇";var Rscr="ℛ";var rsh="↱";var Rsh="↱";var rsqb="]";var rsquo="’";var rsquor="’";var rthree="⋌";var rtimes="⋊";var rtri="▹";var rtrie="⊵";var rtrif="▸";var rtriltri="⧎";var RuleDelayed="⧴";var ruluhar="⥨";var rx="℞";var Sacute="Ś";var sacute="ś";var sbquo="‚";var scap="⪸";var Scaron="Š";var scaron="š";var Sc="⪼";var sc="≻";var sccue="≽";var sce="⪰";var scE="⪴";var Scedil="Ş";var scedil="ş";var Scirc="Ŝ";var scirc="ŝ";var scnap="⪺";var scnE="⪶";var scnsim="⋩";var scpolint="⨓";var scsim="≿";var Scy="С";var scy="с";var sdotb="⊡";var sdot="⋅";var sdote="⩦";var searhk="⤥";var searr="↘";var seArr="⇘";var searrow="↘";var sect="§";var semi=";";var seswar="⤩";var setminus="∖";var setmn="∖";var sext="✶";var Sfr="𝔖";var sfr="𝔰";var sfrown="⌢";var sharp="♯";var SHCHcy="Щ";var shchcy="щ";var SHcy="Ш";var shcy="ш";var ShortDownArrow="↓";var ShortLeftArrow="←";var shortmid="∣";var shortparallel="∥";var ShortRightArrow="→";var ShortUpArrow="↑";var shy="­";var Sigma="Σ";var sigma="σ";var sigmaf="ς";var sigmav="ς";var sim="∼";var simdot="⩪";var sime="≃";var simeq="≃";var simg="⪞";var simgE="⪠";var siml="⪝";var simlE="⪟";var simne="≆";var simplus="⨤";var simrarr="⥲";var slarr="←";var SmallCircle="∘";var smallsetminus="∖";var smashp="⨳";var smeparsl="⧤";var smid="∣";var smile="⌣";var smt="⪪";var smte="⪬";var smtes="⪬︀";var SOFTcy="Ь";var softcy="ь";var solbar="⌿";var solb="⧄";var sol="/";var Sopf="𝕊";var sopf="𝕤";var spades="♠";var spadesuit="♠";var spar="∥";var sqcap="⊓";var sqcaps="⊓︀";var sqcup="⊔";var sqcups="⊔︀";var Sqrt="√";var sqsub="⊏";var sqsube="⊑";var sqsubset="⊏";var sqsubseteq="⊑";var sqsup="⊐";var sqsupe="⊒";var sqsupset="⊐";var sqsupseteq="⊒";var square="□";var Square="□";var SquareIntersection="⊓";var SquareSubset="⊏";var SquareSubsetEqual="⊑";var SquareSuperset="⊐";var SquareSupersetEqual="⊒";var SquareUnion="⊔";var squarf="▪";var squ="□";var squf="▪";var srarr="→";var Sscr="𝒮";var sscr="𝓈";var ssetmn="∖";var ssmile="⌣";var sstarf="⋆";var Star="⋆";var star="☆";var starf="★";var straightepsilon="ϵ";var straightphi="ϕ";var strns="¯";var sub="⊂";var Sub="⋐";var subdot="⪽";var subE="⫅";var sube="⊆";var subedot="⫃";var submult="⫁";var subnE="⫋";var subne="⊊";var subplus="⪿";var subrarr="⥹";var subset="⊂";var Subset="⋐";var subseteq="⊆";var subseteqq="⫅";var SubsetEqual="⊆";var subsetneq="⊊";var subsetneqq="⫋";var subsim="⫇";var subsub="⫕";var subsup="⫓";var succapprox="⪸";var succ="≻";var succcurlyeq="≽";var Succeeds="≻";var SucceedsEqual="⪰";var SucceedsSlantEqual="≽";var SucceedsTilde="≿";var succeq="⪰";var succnapprox="⪺";var succneqq="⪶";var succnsim="⋩";var succsim="≿";var SuchThat="∋";var sum="∑";var Sum="∑";var sung="♪";var sup1="¹";var sup2="²";var sup3="³";var sup="⊃";var Sup="⋑";var supdot="⪾";var supdsub="⫘";var supE="⫆";var supe="⊇";var supedot="⫄";var Superset="⊃";var SupersetEqual="⊇";var suphsol="⟉";var suphsub="⫗";var suplarr="⥻";var supmult="⫂";var supnE="⫌";var supne="⊋";var supplus="⫀";var supset="⊃";var Supset="⋑";var supseteq="⊇";var supseteqq="⫆";var supsetneq="⊋";var supsetneqq="⫌";var supsim="⫈";var supsub="⫔";var supsup="⫖";var swarhk="⤦";var swarr="↙";var swArr="⇙";var swarrow="↙";var swnwar="⤪";var szlig="ß";var Tab="\t";var target="⌖";var Tau="Τ";var tau="τ";var tbrk="⎴";var Tcaron="Ť";var tcaron="ť";var Tcedil="Ţ";var tcedil="ţ";var Tcy="Т";var tcy="т";var tdot="⃛";var telrec="⌕";var Tfr="𝔗";var tfr="𝔱";var there4="∴";var therefore="∴";var Therefore="∴";var Theta="Θ";var theta="θ";var thetasym="ϑ";var thetav="ϑ";var thickapprox="≈";var thicksim="∼";var ThickSpace="  ";var ThinSpace=" ";var thinsp=" ";var thkap="≈";var thksim="∼";var THORN="Þ";var thorn="þ";var tilde="˜";var Tilde="∼";var TildeEqual="≃";var TildeFullEqual="≅";var TildeTilde="≈";var timesbar="⨱";var timesb="⊠";var times="×";var timesd="⨰";var tint="∭";var toea="⤨";var topbot="⌶";var topcir="⫱";var top="⊤";var Topf="𝕋";var topf="𝕥";var topfork="⫚";var tosa="⤩";var tprime="‴";var trade="™";var TRADE="™";var triangle="▵";var triangledown="▿";var triangleleft="◃";var trianglelefteq="⊴";var triangleq="≜";var triangleright="▹";var trianglerighteq="⊵";var tridot="◬";var trie="≜";var triminus="⨺";var TripleDot="⃛";var triplus="⨹";var trisb="⧍";var tritime="⨻";var trpezium="⏢";var Tscr="𝒯";var tscr="𝓉";var TScy="Ц";var tscy="ц";var TSHcy="Ћ";var tshcy="ћ";var Tstrok="Ŧ";var tstrok="ŧ";var twixt="≬";var twoheadleftarrow="↞";var twoheadrightarrow="↠";var Uacute="Ú";var uacute="ú";var uarr="↑";var Uarr="↟";var uArr="⇑";var Uarrocir="⥉";var Ubrcy="Ў";var ubrcy="ў";var Ubreve="Ŭ";var ubreve="ŭ";var Ucirc="Û";var ucirc="û";var Ucy="У";var ucy="у";var udarr="⇅";var Udblac="Ű";var udblac="ű";var udhar="⥮";var ufisht="⥾";var Ufr="𝔘";var ufr="𝔲";var Ugrave="Ù";var ugrave="ù";var uHar="⥣";var uharl="↿";var uharr="↾";var uhblk="▀";var ulcorn="⌜";var ulcorner="⌜";var ulcrop="⌏";var ultri="◸";var Umacr="Ū";var umacr="ū";var uml="¨";var UnderBar="_";var UnderBrace="⏟";var UnderBracket="⎵";var UnderParenthesis="⏝";var Union="⋃";var UnionPlus="⊎";var Uogon="Ų";var uogon="ų";var Uopf="𝕌";var uopf="𝕦";var UpArrowBar="⤒";var uparrow="↑";var UpArrow="↑";var Uparrow="⇑";var UpArrowDownArrow="⇅";var updownarrow="↕";var UpDownArrow="↕";var Updownarrow="⇕";var UpEquilibrium="⥮";var upharpoonleft="↿";var upharpoonright="↾";var uplus="⊎";var UpperLeftArrow="↖";var UpperRightArrow="↗";var upsi="υ";var Upsi="ϒ";var upsih="ϒ";var Upsilon="Υ";var upsilon="υ";var UpTeeArrow="↥";var UpTee="⊥";var upuparrows="⇈";var urcorn="⌝";var urcorner="⌝";var urcrop="⌎";var Uring="Ů";var uring="ů";var urtri="◹";var Uscr="𝒰";var uscr="𝓊";var utdot="⋰";var Utilde="Ũ";var utilde="ũ";var utri="▵";var utrif="▴";var uuarr="⇈";var Uuml="Ü";var uuml="ü";var uwangle="⦧";var vangrt="⦜";var varepsilon="ϵ";var varkappa="ϰ";var varnothing="∅";var varphi="ϕ";var varpi="ϖ";var varpropto="∝";var varr="↕";var vArr="⇕";var varrho="ϱ";var varsigma="ς";var varsubsetneq="⊊︀";var varsubsetneqq="⫋︀";var varsupsetneq="⊋︀";var varsupsetneqq="⫌︀";var vartheta="ϑ";var vartriangleleft="⊲";var vartriangleright="⊳";var vBar="⫨";var Vbar="⫫";var vBarv="⫩";var Vcy="В";var vcy="в";var vdash="⊢";var vDash="⊨";var Vdash="⊩";var VDash="⊫";var Vdashl="⫦";var veebar="⊻";var vee="∨";var Vee="⋁";var veeeq="≚";var vellip="⋮";var verbar="|";var Verbar="‖";var vert="|";var Vert="‖";var VerticalBar="∣";var VerticalLine="|";var VerticalSeparator="❘";var VerticalTilde="≀";var VeryThinSpace=" ";var Vfr="𝔙";var vfr="𝔳";var vltri="⊲";var vnsub="⊂⃒";var vnsup="⊃⃒";var Vopf="𝕍";var vopf="𝕧";var vprop="∝";var vrtri="⊳";var Vscr="𝒱";var vscr="𝓋";var vsubnE="⫋︀";var vsubne="⊊︀";var vsupnE="⫌︀";var vsupne="⊋︀";var Vvdash="⊪";var vzigzag="⦚";var Wcirc="Ŵ";var wcirc="ŵ";var wedbar="⩟";var wedge="∧";var Wedge="⋀";var wedgeq="≙";var weierp="℘";var Wfr="𝔚";var wfr="𝔴";var Wopf="𝕎";var wopf="𝕨";var wp="℘";var wr="≀";var wreath="≀";var Wscr="𝒲";var wscr="𝓌";var xcap="⋂";var xcirc="◯";var xcup="⋃";var xdtri="▽";var Xfr="𝔛";var xfr="𝔵";var xharr="⟷";var xhArr="⟺";var Xi="Ξ";var xi="ξ";var xlarr="⟵";var xlArr="⟸";var xmap="⟼";var xnis="⋻";var xodot="⨀";var Xopf="𝕏";var xopf="𝕩";var xoplus="⨁";var xotime="⨂";var xrarr="⟶";var xrArr="⟹";var Xscr="𝒳";var xscr="𝓍";var xsqcup="⨆";var xuplus="⨄";var xutri="△";var xvee="⋁";var xwedge="⋀";var Yacute="Ý";var yacute="ý";var YAcy="Я";var yacy="я";var Ycirc="Ŷ";var ycirc="ŷ";var Ycy="Ы";var ycy="ы";var yen="¥";var Yfr="𝔜";var yfr="𝔶";var YIcy="Ї";var yicy="ї";var Yopf="𝕐";var yopf="𝕪";var Yscr="𝒴";var yscr="𝓎";var YUcy="Ю";var yucy="ю";var yuml="ÿ";var Yuml="Ÿ";var Zacute="Ź";var zacute="ź";var Zcaron="Ž";var zcaron="ž";var Zcy="З";var zcy="з";var Zdot="Ż";var zdot="ż";var zeetrf="ℨ";var ZeroWidthSpace="​";var Zeta="Ζ";var zeta="ζ";var zfr="𝔷";var Zfr="ℨ";var ZHcy="Ж";var zhcy="ж";var zigrarr="⇝";var zopf="𝕫";var Zopf="ℤ";var Zscr="𝒵";var zscr="𝓏";var zwj="‍";var zwnj="‌";var entities={Aacute,aacute,Abreve,abreve,ac,acd,acE,Acirc,acirc,acute,Acy,acy,AElig,aelig,af,Afr,afr,Agrave,agrave,alefsym,aleph,Alpha,alpha,Amacr,amacr,amalg,amp,AMP,andand,And,and,andd,andslope,andv,ang,ange,angle,angmsdaa,angmsdab,angmsdac,angmsdad,angmsdae,angmsdaf,angmsdag,angmsdah,angmsd,angrt,angrtvb,angrtvbd,angsph,angst,angzarr,Aogon,aogon,Aopf,aopf,apacir,ap,apE,ape,apid,apos,ApplyFunction,approx,approxeq,Aring,aring,Ascr,ascr,Assign,ast,asymp,asympeq,Atilde,atilde,Auml,auml,awconint,awint,backcong,backepsilon,backprime,backsim,backsimeq,Backslash,Barv,barvee,barwed,Barwed,barwedge,bbrk,bbrktbrk,bcong,Bcy,bcy,bdquo,becaus,because,Because,bemptyv,bepsi,bernou,Bernoullis,Beta,beta,beth,between,Bfr,bfr,bigcap,bigcirc,bigcup,bigodot,bigoplus,bigotimes,bigsqcup,bigstar,bigtriangledown,bigtriangleup,biguplus,bigvee,bigwedge,bkarow,blacklozenge,blacksquare,blacktriangle,blacktriangledown,blacktriangleleft,blacktriangleright,blank,blk12,blk14,blk34,block,bne,bnequiv,bNot,bnot,Bopf,bopf,bot,bottom,bowtie,boxbox,boxdl,boxdL,boxDl,boxDL,boxdr,boxdR,boxDr,boxDR,boxh,boxH,boxhd,boxHd,boxhD,boxHD,boxhu,boxHu,boxhU,boxHU,boxminus,boxplus,boxtimes,boxul,boxuL,boxUl,boxUL,boxur,boxuR,boxUr,boxUR,boxv,boxV,boxvh,boxvH,boxVh,boxVH,boxvl,boxvL,boxVl,boxVL,boxvr,boxvR,boxVr,boxVR,bprime,breve,Breve,brvbar,bscr,Bscr,bsemi,bsim,bsime,bsolb,bsol,bsolhsub,bull,bullet,bump,bumpE,bumpe,Bumpeq,bumpeq,Cacute,cacute,capand,capbrcup,capcap,cap,Cap,capcup,capdot,CapitalDifferentialD,caps,caret,caron,Cayleys,ccaps,Ccaron,ccaron,Ccedil,ccedil,Ccirc,ccirc,Cconint,ccups,ccupssm,Cdot,cdot,cedil,Cedilla,cemptyv,cent,centerdot,CenterDot,cfr,Cfr,CHcy,chcy,check,checkmark,Chi,chi,circ,circeq,circlearrowleft,circlearrowright,circledast,circledcirc,circleddash,CircleDot,circledR,circledS,CircleMinus,CirclePlus,CircleTimes,cir,cirE,cire,cirfnint,cirmid,cirscir,ClockwiseContourIntegral,CloseCurlyDoubleQuote,CloseCurlyQuote,clubs,clubsuit,colon,Colon,Colone,colone,coloneq,comma,commat,comp,compfn,complement,complexes,cong,congdot,Congruent,conint,Conint,ContourIntegral,copf,Copf,coprod,Coproduct,copy,COPY,copysr,CounterClockwiseContourIntegral,crarr,cross,Cross,Cscr,cscr,csub,csube,csup,csupe,ctdot,cudarrl,cudarrr,cuepr,cuesc,cularr,cularrp,cupbrcap,cupcap,CupCap,cup,Cup,cupcup,cupdot,cupor,cups,curarr,curarrm,curlyeqprec,curlyeqsucc,curlyvee,curlywedge,curren,curvearrowleft,curvearrowright,cuvee,cuwed,cwconint,cwint,cylcty,dagger,Dagger,daleth,darr,Darr,dArr,dash,Dashv,dashv,dbkarow,dblac,Dcaron,dcaron,Dcy,dcy,ddagger,ddarr,DD,dd,DDotrahd,ddotseq,deg,Del,Delta,delta,demptyv,dfisht,Dfr,dfr,dHar,dharl,dharr,DiacriticalAcute,DiacriticalDot,DiacriticalDoubleAcute,DiacriticalGrave,DiacriticalTilde,diam,diamond,Diamond,diamondsuit,diams,die,DifferentialD,digamma,disin,div,divide,divideontimes,divonx,DJcy,djcy,dlcorn,dlcrop,dollar,Dopf,dopf,Dot,dot,DotDot,doteq,doteqdot,DotEqual,dotminus,dotplus,dotsquare,doublebarwedge,DoubleContourIntegral,DoubleDot,DoubleDownArrow,DoubleLeftArrow,DoubleLeftRightArrow,DoubleLeftTee,DoubleLongLeftArrow,DoubleLongLeftRightArrow,DoubleLongRightArrow,DoubleRightArrow,DoubleRightTee,DoubleUpArrow,DoubleUpDownArrow,DoubleVerticalBar,DownArrowBar,downarrow,DownArrow,Downarrow,DownArrowUpArrow,DownBreve,downdownarrows,downharpoonleft,downharpoonright,DownLeftRightVector,DownLeftTeeVector,DownLeftVectorBar,DownLeftVector,DownRightTeeVector,DownRightVectorBar,DownRightVector,DownTeeArrow,DownTee,drbkarow,drcorn,drcrop,Dscr,dscr,DScy,dscy,dsol,Dstrok,dstrok,dtdot,dtri,dtrif,duarr,duhar,dwangle,DZcy,dzcy,dzigrarr,Eacute,eacute,easter,Ecaron,ecaron,Ecirc,ecirc,ecir,ecolon,Ecy,ecy,eDDot,Edot,edot,eDot,ee,efDot,Efr,efr,eg,Egrave,egrave,egs,egsdot,el,Element,elinters,ell,els,elsdot,Emacr,emacr,empty,emptyset,EmptySmallSquare,emptyv,EmptyVerySmallSquare,emsp13,emsp14,emsp,ENG,eng,ensp,Eogon,eogon,Eopf,eopf,epar,eparsl,eplus,epsi,Epsilon,epsilon,epsiv,eqcirc,eqcolon,eqsim,eqslantgtr,eqslantless,Equal,equals,EqualTilde,equest,Equilibrium,equiv,equivDD,eqvparsl,erarr,erDot,escr,Escr,esdot,Esim,esim,Eta,eta,ETH,eth,Euml,euml,euro,excl,exist,Exists,expectation,exponentiale,ExponentialE,fallingdotseq,Fcy,fcy,female,ffilig,fflig,ffllig,Ffr,ffr,filig,FilledSmallSquare,FilledVerySmallSquare,fjlig,flat,fllig,fltns,fnof,Fopf,fopf,forall,ForAll,fork,forkv,Fouriertrf,fpartint,frac12,frac13,frac14,frac15,frac16,frac18,frac23,frac25,frac34,frac35,frac38,frac45,frac56,frac58,frac78,frasl,frown,fscr,Fscr,gacute,Gamma,gamma,Gammad,gammad,gap,Gbreve,gbreve,Gcedil,Gcirc,gcirc,Gcy,gcy,Gdot,gdot,ge,gE,gEl,gel,geq,geqq,geqslant,gescc,ges,gesdot,gesdoto,gesdotol,gesl,gesles,Gfr,gfr,gg,Gg,ggg,gimel,GJcy,gjcy,gla,gl,glE,glj,gnap,gnapprox,gne,gnE,gneq,gneqq,gnsim,Gopf,gopf,grave,GreaterEqual,GreaterEqualLess,GreaterFullEqual,GreaterGreater,GreaterLess,GreaterSlantEqual,GreaterTilde,Gscr,gscr,gsim,gsime,gsiml,gtcc,gtcir,gt,GT,Gt,gtdot,gtlPar,gtquest,gtrapprox,gtrarr,gtrdot,gtreqless,gtreqqless,gtrless,gtrsim,gvertneqq,gvnE,Hacek,hairsp,half,hamilt,HARDcy,hardcy,harrcir,harr,hArr,harrw,Hat,hbar,Hcirc,hcirc,hearts,heartsuit,hellip,hercon,hfr,Hfr,HilbertSpace,hksearow,hkswarow,hoarr,homtht,hookleftarrow,hookrightarrow,hopf,Hopf,horbar,HorizontalLine,hscr,Hscr,hslash,Hstrok,hstrok,HumpDownHump,HumpEqual,hybull,hyphen,Iacute,iacute,ic,Icirc,icirc,Icy,icy,Idot,IEcy,iecy,iexcl,iff,ifr,Ifr,Igrave,igrave,ii,iiiint,iiint,iinfin,iiota,IJlig,ijlig,Imacr,imacr,image,ImaginaryI,imagline,imagpart,imath,Im,imof,imped,Implies,incare,in:"∈",infin,infintie,inodot,intcal,int,Int,integers,Integral,intercal,Intersection,intlarhk,intprod,InvisibleComma,InvisibleTimes,IOcy,iocy,Iogon,iogon,Iopf,iopf,Iota,iota,iprod,iquest,iscr,Iscr,isin,isindot,isinE,isins,isinsv,isinv,it,Itilde,itilde,Iukcy,iukcy,Iuml,iuml,Jcirc,jcirc,Jcy,jcy,Jfr,jfr,jmath,Jopf,jopf,Jscr,jscr,Jsercy,jsercy,Jukcy,jukcy,Kappa,kappa,kappav,Kcedil,kcedil,Kcy,kcy,Kfr,kfr,kgreen,KHcy,khcy,KJcy,kjcy,Kopf,kopf,Kscr,kscr,lAarr,Lacute,lacute,laemptyv,lagran,Lambda,lambda,lang,Lang,langd,langle,lap,Laplacetrf,laquo,larrb,larrbfs,larr,Larr,lArr,larrfs,larrhk,larrlp,larrpl,larrsim,larrtl,latail,lAtail,lat,late,lates,lbarr,lBarr,lbbrk,lbrace,lbrack,lbrke,lbrksld,lbrkslu,Lcaron,lcaron,Lcedil,lcedil,lceil,lcub,Lcy,lcy,ldca,ldquo,ldquor,ldrdhar,ldrushar,ldsh,le,lE,LeftAngleBracket,LeftArrowBar,leftarrow,LeftArrow,Leftarrow,LeftArrowRightArrow,leftarrowtail,LeftCeiling,LeftDoubleBracket,LeftDownTeeVector,LeftDownVectorBar,LeftDownVector,LeftFloor,leftharpoondown,leftharpoonup,leftleftarrows,leftrightarrow,LeftRightArrow,Leftrightarrow,leftrightarrows,leftrightharpoons,leftrightsquigarrow,LeftRightVector,LeftTeeArrow,LeftTee,LeftTeeVector,leftthreetimes,LeftTriangleBar,LeftTriangle,LeftTriangleEqual,LeftUpDownVector,LeftUpTeeVector,LeftUpVectorBar,LeftUpVector,LeftVectorBar,LeftVector,lEg,leg,leq,leqq,leqslant,lescc,les,lesdot,lesdoto,lesdotor,lesg,lesges,lessapprox,lessdot,lesseqgtr,lesseqqgtr,LessEqualGreater,LessFullEqual,LessGreater,lessgtr,LessLess,lesssim,LessSlantEqual,LessTilde,lfisht,lfloor,Lfr,lfr,lg,lgE,lHar,lhard,lharu,lharul,lhblk,LJcy,ljcy,llarr,ll,Ll,llcorner,Lleftarrow,llhard,lltri,Lmidot,lmidot,lmoustache,lmoust,lnap,lnapprox,lne,lnE,lneq,lneqq,lnsim,loang,loarr,lobrk,longleftarrow,LongLeftArrow,Longleftarrow,longleftrightarrow,LongLeftRightArrow,Longleftrightarrow,longmapsto,longrightarrow,LongRightArrow,Longrightarrow,looparrowleft,looparrowright,lopar,Lopf,lopf,loplus,lotimes,lowast,lowbar,LowerLeftArrow,LowerRightArrow,loz,lozenge,lozf,lpar,lparlt,lrarr,lrcorner,lrhar,lrhard,lrm,lrtri,lsaquo,lscr,Lscr,lsh,Lsh,lsim,lsime,lsimg,lsqb,lsquo,lsquor,Lstrok,lstrok,ltcc,ltcir,lt,LT,Lt,ltdot,lthree,ltimes,ltlarr,ltquest,ltri,ltrie,ltrif,ltrPar,lurdshar,luruhar,lvertneqq,lvnE,macr,male,malt,maltese,Map:"⤅",map,mapsto,mapstodown,mapstoleft,mapstoup,marker,mcomma,Mcy,mcy,mdash,mDDot,measuredangle,MediumSpace,Mellintrf,Mfr,mfr,mho,micro,midast,midcir,mid,middot,minusb,minus,minusd,minusdu,MinusPlus,mlcp,mldr,mnplus,models,Mopf,mopf,mp,mscr,Mscr,mstpos,Mu,mu,multimap,mumap,nabla,Nacute,nacute,nang,nap,napE,napid,napos,napprox,natural,naturals,natur,nbsp,nbump,nbumpe,ncap,Ncaron,ncaron,Ncedil,ncedil,ncong,ncongdot,ncup,Ncy,ncy,ndash,nearhk,nearr,neArr,nearrow,ne,nedot,NegativeMediumSpace,NegativeThickSpace,NegativeThinSpace,NegativeVeryThinSpace,nequiv,nesear,nesim,NestedGreaterGreater,NestedLessLess,NewLine,nexist,nexists,Nfr,nfr,ngE,nge,ngeq,ngeqq,ngeqslant,nges,nGg,ngsim,nGt,ngt,ngtr,nGtv,nharr,nhArr,nhpar,ni,nis,nisd,niv,NJcy,njcy,nlarr,nlArr,nldr,nlE,nle,nleftarrow,nLeftarrow,nleftrightarrow,nLeftrightarrow,nleq,nleqq,nleqslant,nles,nless,nLl,nlsim,nLt,nlt,nltri,nltrie,nLtv,nmid,NoBreak,NonBreakingSpace,nopf,Nopf,Not,not,NotCongruent,NotCupCap,NotDoubleVerticalBar,NotElement,NotEqual,NotEqualTilde,NotExists,NotGreater,NotGreaterEqual,NotGreaterFullEqual,NotGreaterGreater,NotGreaterLess,NotGreaterSlantEqual,NotGreaterTilde,NotHumpDownHump,NotHumpEqual,notin,notindot,notinE,notinva,notinvb,notinvc,NotLeftTriangleBar,NotLeftTriangle,NotLeftTriangleEqual,NotLess,NotLessEqual,NotLessGreater,NotLessLess,NotLessSlantEqual,NotLessTilde,NotNestedGreaterGreater,NotNestedLessLess,notni,notniva,notnivb,notnivc,NotPrecedes,NotPrecedesEqual,NotPrecedesSlantEqual,NotReverseElement,NotRightTriangleBar,NotRightTriangle,NotRightTriangleEqual,NotSquareSubset,NotSquareSubsetEqual,NotSquareSuperset,NotSquareSupersetEqual,NotSubset,NotSubsetEqual,NotSucceeds,NotSucceedsEqual,NotSucceedsSlantEqual,NotSucceedsTilde,NotSuperset,NotSupersetEqual,NotTilde,NotTildeEqual,NotTildeFullEqual,NotTildeTilde,NotVerticalBar,nparallel,npar,nparsl,npart,npolint,npr,nprcue,nprec,npreceq,npre,nrarrc,nrarr,nrArr,nrarrw,nrightarrow,nRightarrow,nrtri,nrtrie,nsc,nsccue,nsce,Nscr,nscr,nshortmid,nshortparallel,nsim,nsime,nsimeq,nsmid,nspar,nsqsube,nsqsupe,nsub,nsubE,nsube,nsubset,nsubseteq,nsubseteqq,nsucc,nsucceq,nsup,nsupE,nsupe,nsupset,nsupseteq,nsupseteqq,ntgl,Ntilde,ntilde,ntlg,ntriangleleft,ntrianglelefteq,ntriangleright,ntrianglerighteq,Nu,nu,num,numero,numsp,nvap,nvdash,nvDash,nVdash,nVDash,nvge,nvgt,nvHarr,nvinfin,nvlArr,nvle,nvlt,nvltrie,nvrArr,nvrtrie,nvsim,nwarhk,nwarr,nwArr,nwarrow,nwnear,Oacute,oacute,oast,Ocirc,ocirc,ocir,Ocy,ocy,odash,Odblac,odblac,odiv,odot,odsold,OElig,oelig,ofcir,Ofr,ofr,ogon,Ograve,ograve,ogt,ohbar,ohm,oint,olarr,olcir,olcross,oline,olt,Omacr,omacr,Omega,omega,Omicron,omicron,omid,ominus,Oopf,oopf,opar,OpenCurlyDoubleQuote,OpenCurlyQuote,operp,oplus,orarr,Or,or,ord,order,orderof,ordf,ordm,origof,oror,orslope,orv,oS,Oscr,oscr,Oslash,oslash,osol,Otilde,otilde,otimesas,Otimes,otimes,Ouml,ouml,ovbar,OverBar,OverBrace,OverBracket,OverParenthesis,para,parallel,par,parsim,parsl,part,PartialD,Pcy,pcy,percnt,period,permil,perp,pertenk,Pfr,pfr,Phi,phi,phiv,phmmat,phone,Pi,pi,pitchfork,piv,planck,planckh,plankv,plusacir,plusb,pluscir,plus,plusdo,plusdu,pluse,PlusMinus,plusmn,plussim,plustwo,pm,Poincareplane,pointint,popf,Popf,pound,prap,Pr,pr,prcue,precapprox,prec,preccurlyeq,Precedes,PrecedesEqual,PrecedesSlantEqual,PrecedesTilde,preceq,precnapprox,precneqq,precnsim,pre,prE,precsim,prime,Prime,primes,prnap,prnE,prnsim,prod,Product,profalar,profline,profsurf,prop,Proportional,Proportion,propto,prsim,prurel,Pscr,pscr,Psi,psi,puncsp,Qfr,qfr,qint,qopf,Qopf,qprime,Qscr,qscr,quaternions,quatint,quest,questeq,quot,QUOT,rAarr,race,Racute,racute,radic,raemptyv,rang,Rang,rangd,range,rangle,raquo,rarrap,rarrb,rarrbfs,rarrc,rarr,Rarr,rArr,rarrfs,rarrhk,rarrlp,rarrpl,rarrsim,Rarrtl,rarrtl,rarrw,ratail,rAtail,ratio,rationals,rbarr,rBarr,RBarr,rbbrk,rbrace,rbrack,rbrke,rbrksld,rbrkslu,Rcaron,rcaron,Rcedil,rcedil,rceil,rcub,Rcy,rcy,rdca,rdldhar,rdquo,rdquor,rdsh,real,realine,realpart,reals,Re,rect,reg,REG,ReverseElement,ReverseEquilibrium,ReverseUpEquilibrium,rfisht,rfloor,rfr,Rfr,rHar,rhard,rharu,rharul,Rho,rho,rhov,RightAngleBracket,RightArrowBar,rightarrow,RightArrow,Rightarrow,RightArrowLeftArrow,rightarrowtail,RightCeiling,RightDoubleBracket,RightDownTeeVector,RightDownVectorBar,RightDownVector,RightFloor,rightharpoondown,rightharpoonup,rightleftarrows,rightleftharpoons,rightrightarrows,rightsquigarrow,RightTeeArrow,RightTee,RightTeeVector,rightthreetimes,RightTriangleBar,RightTriangle,RightTriangleEqual,RightUpDownVector,RightUpTeeVector,RightUpVectorBar,RightUpVector,RightVectorBar,RightVector,ring,risingdotseq,rlarr,rlhar,rlm,rmoustache,rmoust,rnmid,roang,roarr,robrk,ropar,ropf,Ropf,roplus,rotimes,RoundImplies,rpar,rpargt,rppolint,rrarr,Rrightarrow,rsaquo,rscr,Rscr,rsh,Rsh,rsqb,rsquo,rsquor,rthree,rtimes,rtri,rtrie,rtrif,rtriltri,RuleDelayed,ruluhar,rx,Sacute,sacute,sbquo,scap,Scaron,scaron,Sc,sc,sccue,sce,scE,Scedil,scedil,Scirc,scirc,scnap,scnE,scnsim,scpolint,scsim,Scy,scy,sdotb,sdot,sdote,searhk,searr,seArr,searrow,sect,semi,seswar,setminus,setmn,sext,Sfr,sfr,sfrown,sharp,SHCHcy,shchcy,SHcy,shcy,ShortDownArrow,ShortLeftArrow,shortmid,shortparallel,ShortRightArrow,ShortUpArrow,shy,Sigma,sigma,sigmaf,sigmav,sim,simdot,sime,simeq,simg,simgE,siml,simlE,simne,simplus,simrarr,slarr,SmallCircle,smallsetminus,smashp,smeparsl,smid,smile,smt,smte,smtes,SOFTcy,softcy,solbar,solb,sol,Sopf,sopf,spades,spadesuit,spar,sqcap,sqcaps,sqcup,sqcups,Sqrt,sqsub,sqsube,sqsubset,sqsubseteq,sqsup,sqsupe,sqsupset,sqsupseteq,square,Square,SquareIntersection,SquareSubset,SquareSubsetEqual,SquareSuperset,SquareSupersetEqual,SquareUnion,squarf,squ,squf,srarr,Sscr,sscr,ssetmn,ssmile,sstarf,Star,star,starf,straightepsilon,straightphi,strns,sub,Sub,subdot,subE,sube,subedot,submult,subnE,subne,subplus,subrarr,subset,Subset,subseteq,subseteqq,SubsetEqual,subsetneq,subsetneqq,subsim,subsub,subsup,succapprox,succ,succcurlyeq,Succeeds,SucceedsEqual,SucceedsSlantEqual,SucceedsTilde,succeq,succnapprox,succneqq,succnsim,succsim,SuchThat,sum,Sum,sung,sup1,sup2,sup3,sup,Sup,supdot,supdsub,supE,supe,supedot,Superset,SupersetEqual,suphsol,suphsub,suplarr,supmult,supnE,supne,supplus,supset,Supset,supseteq,supseteqq,supsetneq,supsetneqq,supsim,supsub,supsup,swarhk,swarr,swArr,swarrow,swnwar,szlig,Tab,target,Tau,tau,tbrk,Tcaron,tcaron,Tcedil,tcedil,Tcy,tcy,tdot,telrec,Tfr,tfr,there4,therefore,Therefore,Theta,theta,thetasym,thetav,thickapprox,thicksim,ThickSpace,ThinSpace,thinsp,thkap,thksim,THORN,thorn,tilde,Tilde,TildeEqual,TildeFullEqual,TildeTilde,timesbar,timesb,times,timesd,tint,toea,topbot,topcir,top,Topf,topf,topfork,tosa,tprime,trade,TRADE,triangle,triangledown,triangleleft,trianglelefteq,triangleq,triangleright,trianglerighteq,tridot,trie,triminus,TripleDot,triplus,trisb,tritime,trpezium,Tscr,tscr,TScy,tscy,TSHcy,tshcy,Tstrok,tstrok,twixt,twoheadleftarrow,twoheadrightarrow,Uacute,uacute,uarr,Uarr,uArr,Uarrocir,Ubrcy,ubrcy,Ubreve,ubreve,Ucirc,ucirc,Ucy,ucy,udarr,Udblac,udblac,udhar,ufisht,Ufr,ufr,Ugrave,ugrave,uHar,uharl,uharr,uhblk,ulcorn,ulcorner,ulcrop,ultri,Umacr,umacr,uml,UnderBar,UnderBrace,UnderBracket,UnderParenthesis,Union,UnionPlus,Uogon,uogon,Uopf,uopf,UpArrowBar,uparrow,UpArrow,Uparrow,UpArrowDownArrow,updownarrow,UpDownArrow,Updownarrow,UpEquilibrium,upharpoonleft,upharpoonright,uplus,UpperLeftArrow,UpperRightArrow,upsi,Upsi,upsih,Upsilon,upsilon,UpTeeArrow,UpTee,upuparrows,urcorn,urcorner,urcrop,Uring,uring,urtri,Uscr,uscr,utdot,Utilde,utilde,utri,utrif,uuarr,Uuml,uuml,uwangle,vangrt,varepsilon,varkappa,varnothing,varphi,varpi,varpropto,varr,vArr,varrho,varsigma,varsubsetneq,varsubsetneqq,varsupsetneq,varsupsetneqq,vartheta,vartriangleleft,vartriangleright,vBar,Vbar,vBarv,Vcy,vcy,vdash,vDash,Vdash,VDash,Vdashl,veebar,vee,Vee,veeeq,vellip,verbar,Verbar,vert,Vert,VerticalBar,VerticalLine,VerticalSeparator,VerticalTilde,VeryThinSpace,Vfr,vfr,vltri,vnsub,vnsup,Vopf,vopf,vprop,vrtri,Vscr,vscr,vsubnE,vsubne,vsupnE,vsupne,Vvdash,vzigzag,Wcirc,wcirc,wedbar,wedge,Wedge,wedgeq,weierp,Wfr,wfr,Wopf,wopf,wp,wr,wreath,Wscr,wscr,xcap,xcirc,xcup,xdtri,Xfr,xfr,xharr,xhArr,Xi,xi,xlarr,xlArr,xmap,xnis,xodot,Xopf,xopf,xoplus,xotime,xrarr,xrArr,Xscr,xscr,xsqcup,xuplus,xutri,xvee,xwedge,Yacute,yacute,YAcy,yacy,Ycirc,ycirc,Ycy,ycy,yen,Yfr,yfr,YIcy,yicy,Yopf,yopf,Yscr,yscr,YUcy,yucy,yuml,Yuml,Zacute,zacute,Zcaron,zcaron,Zcy,zcy,Zdot,zdot,zeetrf,ZeroWidthSpace,Zeta,zeta,zfr,Zfr,ZHcy,zhcy,zigrarr,zopf,Zopf,Zscr,zscr,zwj,zwnj};var entities$1=Object.freeze({__proto__:null,Aacute,aacute,Abreve,abreve,ac,acd,acE,Acirc,acirc,acute,Acy,acy,AElig,aelig,af,Afr,afr,Agrave,agrave,alefsym,aleph,Alpha,alpha,Amacr,amacr,amalg,amp,AMP,andand,And,and,andd,andslope,andv,ang,ange,angle,angmsdaa,angmsdab,angmsdac,angmsdad,angmsdae,angmsdaf,angmsdag,angmsdah,angmsd,angrt,angrtvb,angrtvbd,angsph,angst,angzarr,Aogon,aogon,Aopf,aopf,apacir,ap,apE,ape,apid,apos,ApplyFunction,approx,approxeq,Aring,aring,Ascr,ascr,Assign,ast,asymp,asympeq,Atilde,atilde,Auml,auml,awconint,awint,backcong,backepsilon,backprime,backsim,backsimeq,Backslash,Barv,barvee,barwed,Barwed,barwedge,bbrk,bbrktbrk,bcong,Bcy,bcy,bdquo,becaus,because,Because,bemptyv,bepsi,bernou,Bernoullis,Beta,beta,beth,between,Bfr,bfr,bigcap,bigcirc,bigcup,bigodot,bigoplus,bigotimes,bigsqcup,bigstar,bigtriangledown,bigtriangleup,biguplus,bigvee,bigwedge,bkarow,blacklozenge,blacksquare,blacktriangle,blacktriangledown,blacktriangleleft,blacktriangleright,blank,blk12,blk14,blk34,block,bne,bnequiv,bNot,bnot,Bopf,bopf,bot,bottom,bowtie,boxbox,boxdl,boxdL,boxDl,boxDL,boxdr,boxdR,boxDr,boxDR,boxh,boxH,boxhd,boxHd,boxhD,boxHD,boxhu,boxHu,boxhU,boxHU,boxminus,boxplus,boxtimes,boxul,boxuL,boxUl,boxUL,boxur,boxuR,boxUr,boxUR,boxv,boxV,boxvh,boxvH,boxVh,boxVH,boxvl,boxvL,boxVl,boxVL,boxvr,boxvR,boxVr,boxVR,bprime,breve,Breve,brvbar,bscr,Bscr,bsemi,bsim,bsime,bsolb,bsol,bsolhsub,bull,bullet,bump,bumpE,bumpe,Bumpeq,bumpeq,Cacute,cacute,capand,capbrcup,capcap,cap,Cap,capcup,capdot,CapitalDifferentialD,caps,caret,caron,Cayleys,ccaps,Ccaron,ccaron,Ccedil,ccedil,Ccirc,ccirc,Cconint,ccups,ccupssm,Cdot,cdot,cedil,Cedilla,cemptyv,cent,centerdot,CenterDot,cfr,Cfr,CHcy,chcy,check,checkmark,Chi,chi,circ,circeq,circlearrowleft,circlearrowright,circledast,circledcirc,circleddash,CircleDot,circledR,circledS,CircleMinus,CirclePlus,CircleTimes,cir,cirE,cire,cirfnint,cirmid,cirscir,ClockwiseContourIntegral,CloseCurlyDoubleQuote,CloseCurlyQuote,clubs,clubsuit,colon,Colon,Colone,colone,coloneq,comma,commat,comp,compfn,complement,complexes,cong,congdot,Congruent,conint,Conint,ContourIntegral,copf,Copf,coprod,Coproduct,copy,COPY,copysr,CounterClockwiseContourIntegral,crarr,cross,Cross,Cscr,cscr,csub,csube,csup,csupe,ctdot,cudarrl,cudarrr,cuepr,cuesc,cularr,cularrp,cupbrcap,cupcap,CupCap,cup,Cup,cupcup,cupdot,cupor,cups,curarr,curarrm,curlyeqprec,curlyeqsucc,curlyvee,curlywedge,curren,curvearrowleft,curvearrowright,cuvee,cuwed,cwconint,cwint,cylcty,dagger,Dagger,daleth,darr,Darr,dArr,dash,Dashv,dashv,dbkarow,dblac,Dcaron,dcaron,Dcy,dcy,ddagger,ddarr,DD,dd,DDotrahd,ddotseq,deg,Del,Delta,delta,demptyv,dfisht,Dfr,dfr,dHar,dharl,dharr,DiacriticalAcute,DiacriticalDot,DiacriticalDoubleAcute,DiacriticalGrave,DiacriticalTilde,diam,diamond,Diamond,diamondsuit,diams,die,DifferentialD,digamma,disin,div,divide,divideontimes,divonx,DJcy,djcy,dlcorn,dlcrop,dollar,Dopf,dopf,Dot,dot,DotDot,doteq,doteqdot,DotEqual,dotminus,dotplus,dotsquare,doublebarwedge,DoubleContourIntegral,DoubleDot,DoubleDownArrow,DoubleLeftArrow,DoubleLeftRightArrow,DoubleLeftTee,DoubleLongLeftArrow,DoubleLongLeftRightArrow,DoubleLongRightArrow,DoubleRightArrow,DoubleRightTee,DoubleUpArrow,DoubleUpDownArrow,DoubleVerticalBar,DownArrowBar,downarrow,DownArrow,Downarrow,DownArrowUpArrow,DownBreve,downdownarrows,downharpoonleft,downharpoonright,DownLeftRightVector,DownLeftTeeVector,DownLeftVectorBar,DownLeftVector,DownRightTeeVector,DownRightVectorBar,DownRightVector,DownTeeArrow,DownTee,drbkarow,drcorn,drcrop,Dscr,dscr,DScy,dscy,dsol,Dstrok,dstrok,dtdot,dtri,dtrif,duarr,duhar,dwangle,DZcy,dzcy,dzigrarr,Eacute,eacute,easter,Ecaron,ecaron,Ecirc,ecirc,ecir,ecolon,Ecy,ecy,eDDot,Edot,edot,eDot,ee,efDot,Efr,efr,eg,Egrave,egrave,egs,egsdot,el,Element,elinters,ell,els,elsdot,Emacr,emacr,empty,emptyset,EmptySmallSquare,emptyv,EmptyVerySmallSquare,emsp13,emsp14,emsp,ENG,eng,ensp,Eogon,eogon,Eopf,eopf,epar,eparsl,eplus,epsi,Epsilon,epsilon,epsiv,eqcirc,eqcolon,eqsim,eqslantgtr,eqslantless,Equal,equals,EqualTilde,equest,Equilibrium,equiv,equivDD,eqvparsl,erarr,erDot,escr,Escr,esdot,Esim,esim,Eta,eta,ETH,eth,Euml,euml,euro,excl,exist,Exists,expectation,exponentiale,ExponentialE,fallingdotseq,Fcy,fcy,female,ffilig,fflig,ffllig,Ffr,ffr,filig,FilledSmallSquare,FilledVerySmallSquare,fjlig,flat,fllig,fltns,fnof,Fopf,fopf,forall,ForAll,fork,forkv,Fouriertrf,fpartint,frac12,frac13,frac14,frac15,frac16,frac18,frac23,frac25,frac34,frac35,frac38,frac45,frac56,frac58,frac78,frasl,frown,fscr,Fscr,gacute,Gamma,gamma,Gammad,gammad,gap,Gbreve,gbreve,Gcedil,Gcirc,gcirc,Gcy,gcy,Gdot,gdot,ge,gE,gEl,gel,geq,geqq,geqslant,gescc,ges,gesdot,gesdoto,gesdotol,gesl,gesles,Gfr,gfr,gg,Gg,ggg,gimel,GJcy,gjcy,gla,gl,glE,glj,gnap,gnapprox,gne,gnE,gneq,gneqq,gnsim,Gopf,gopf,grave,GreaterEqual,GreaterEqualLess,GreaterFullEqual,GreaterGreater,GreaterLess,GreaterSlantEqual,GreaterTilde,Gscr,gscr,gsim,gsime,gsiml,gtcc,gtcir,gt,GT,Gt,gtdot,gtlPar,gtquest,gtrapprox,gtrarr,gtrdot,gtreqless,gtreqqless,gtrless,gtrsim,gvertneqq,gvnE,Hacek,hairsp,half,hamilt,HARDcy,hardcy,harrcir,harr,hArr,harrw,Hat,hbar,Hcirc,hcirc,hearts,heartsuit,hellip,hercon,hfr,Hfr,HilbertSpace,hksearow,hkswarow,hoarr,homtht,hookleftarrow,hookrightarrow,hopf,Hopf,horbar,HorizontalLine,hscr,Hscr,hslash,Hstrok,hstrok,HumpDownHump,HumpEqual,hybull,hyphen,Iacute,iacute,ic,Icirc,icirc,Icy,icy,Idot,IEcy,iecy,iexcl,iff,ifr,Ifr,Igrave,igrave,ii,iiiint,iiint,iinfin,iiota,IJlig,ijlig,Imacr,imacr,image,ImaginaryI,imagline,imagpart,imath,Im,imof,imped,Implies,incare,infin,infintie,inodot,intcal,int,Int,integers,Integral,intercal,Intersection,intlarhk,intprod,InvisibleComma,InvisibleTimes,IOcy,iocy,Iogon,iogon,Iopf,iopf,Iota,iota,iprod,iquest,iscr,Iscr,isin,isindot,isinE,isins,isinsv,isinv,it,Itilde,itilde,Iukcy,iukcy,Iuml,iuml,Jcirc,jcirc,Jcy,jcy,Jfr,jfr,jmath,Jopf,jopf,Jscr,jscr,Jsercy,jsercy,Jukcy,jukcy,Kappa,kappa,kappav,Kcedil,kcedil,Kcy,kcy,Kfr,kfr,kgreen,KHcy,khcy,KJcy,kjcy,Kopf,kopf,Kscr,kscr,lAarr,Lacute,lacute,laemptyv,lagran,Lambda,lambda,lang,Lang,langd,langle,lap,Laplacetrf,laquo,larrb,larrbfs,larr,Larr,lArr,larrfs,larrhk,larrlp,larrpl,larrsim,larrtl,latail,lAtail,lat,late,lates,lbarr,lBarr,lbbrk,lbrace,lbrack,lbrke,lbrksld,lbrkslu,Lcaron,lcaron,Lcedil,lcedil,lceil,lcub,Lcy,lcy,ldca,ldquo,ldquor,ldrdhar,ldrushar,ldsh,le,lE,LeftAngleBracket,LeftArrowBar,leftarrow,LeftArrow,Leftarrow,LeftArrowRightArrow,leftarrowtail,LeftCeiling,LeftDoubleBracket,LeftDownTeeVector,LeftDownVectorBar,LeftDownVector,LeftFloor,leftharpoondown,leftharpoonup,leftleftarrows,leftrightarrow,LeftRightArrow,Leftrightarrow,leftrightarrows,leftrightharpoons,leftrightsquigarrow,LeftRightVector,LeftTeeArrow,LeftTee,LeftTeeVector,leftthreetimes,LeftTriangleBar,LeftTriangle,LeftTriangleEqual,LeftUpDownVector,LeftUpTeeVector,LeftUpVectorBar,LeftUpVector,LeftVectorBar,LeftVector,lEg,leg,leq,leqq,leqslant,lescc,les,lesdot,lesdoto,lesdotor,lesg,lesges,lessapprox,lessdot,lesseqgtr,lesseqqgtr,LessEqualGreater,LessFullEqual,LessGreater,lessgtr,LessLess,lesssim,LessSlantEqual,LessTilde,lfisht,lfloor,Lfr,lfr,lg,lgE,lHar,lhard,lharu,lharul,lhblk,LJcy,ljcy,llarr,ll,Ll,llcorner,Lleftarrow,llhard,lltri,Lmidot,lmidot,lmoustache,lmoust,lnap,lnapprox,lne,lnE,lneq,lneqq,lnsim,loang,loarr,lobrk,longleftarrow,LongLeftArrow,Longleftarrow,longleftrightarrow,LongLeftRightArrow,Longleftrightarrow,longmapsto,longrightarrow,LongRightArrow,Longrightarrow,looparrowleft,looparrowright,lopar,Lopf,lopf,loplus,lotimes,lowast,lowbar,LowerLeftArrow,LowerRightArrow,loz,lozenge,lozf,lpar,lparlt,lrarr,lrcorner,lrhar,lrhard,lrm,lrtri,lsaquo,lscr,Lscr,lsh,Lsh,lsim,lsime,lsimg,lsqb,lsquo,lsquor,Lstrok,lstrok,ltcc,ltcir,lt,LT,Lt,ltdot,lthree,ltimes,ltlarr,ltquest,ltri,ltrie,ltrif,ltrPar,lurdshar,luruhar,lvertneqq,lvnE,macr,male,malt,maltese,map,mapsto,mapstodown,mapstoleft,mapstoup,marker,mcomma,Mcy,mcy,mdash,mDDot,measuredangle,MediumSpace,Mellintrf,Mfr,mfr,mho,micro,midast,midcir,mid,middot,minusb,minus,minusd,minusdu,MinusPlus,mlcp,mldr,mnplus,models,Mopf,mopf,mp,mscr,Mscr,mstpos,Mu,mu,multimap,mumap,nabla,Nacute,nacute,nang,nap,napE,napid,napos,napprox,natural,naturals,natur,nbsp,nbump,nbumpe,ncap,Ncaron,ncaron,Ncedil,ncedil,ncong,ncongdot,ncup,Ncy,ncy,ndash,nearhk,nearr,neArr,nearrow,ne,nedot,NegativeMediumSpace,NegativeThickSpace,NegativeThinSpace,NegativeVeryThinSpace,nequiv,nesear,nesim,NestedGreaterGreater,NestedLessLess,NewLine,nexist,nexists,Nfr,nfr,ngE,nge,ngeq,ngeqq,ngeqslant,nges,nGg,ngsim,nGt,ngt,ngtr,nGtv,nharr,nhArr,nhpar,ni,nis,nisd,niv,NJcy,njcy,nlarr,nlArr,nldr,nlE,nle,nleftarrow,nLeftarrow,nleftrightarrow,nLeftrightarrow,nleq,nleqq,nleqslant,nles,nless,nLl,nlsim,nLt,nlt,nltri,nltrie,nLtv,nmid,NoBreak,NonBreakingSpace,nopf,Nopf,Not,not,NotCongruent,NotCupCap,NotDoubleVerticalBar,NotElement,NotEqual,NotEqualTilde,NotExists,NotGreater,NotGreaterEqual,NotGreaterFullEqual,NotGreaterGreater,NotGreaterLess,NotGreaterSlantEqual,NotGreaterTilde,NotHumpDownHump,NotHumpEqual,notin,notindot,notinE,notinva,notinvb,notinvc,NotLeftTriangleBar,NotLeftTriangle,NotLeftTriangleEqual,NotLess,NotLessEqual,NotLessGreater,NotLessLess,NotLessSlantEqual,NotLessTilde,NotNestedGreaterGreater,NotNestedLessLess,notni,notniva,notnivb,notnivc,NotPrecedes,NotPrecedesEqual,NotPrecedesSlantEqual,NotReverseElement,NotRightTriangleBar,NotRightTriangle,NotRightTriangleEqual,NotSquareSubset,NotSquareSubsetEqual,NotSquareSuperset,NotSquareSupersetEqual,NotSubset,NotSubsetEqual,NotSucceeds,NotSucceedsEqual,NotSucceedsSlantEqual,NotSucceedsTilde,NotSuperset,NotSupersetEqual,NotTilde,NotTildeEqual,NotTildeFullEqual,NotTildeTilde,NotVerticalBar,nparallel,npar,nparsl,npart,npolint,npr,nprcue,nprec,npreceq,npre,nrarrc,nrarr,nrArr,nrarrw,nrightarrow,nRightarrow,nrtri,nrtrie,nsc,nsccue,nsce,Nscr,nscr,nshortmid,nshortparallel,nsim,nsime,nsimeq,nsmid,nspar,nsqsube,nsqsupe,nsub,nsubE,nsube,nsubset,nsubseteq,nsubseteqq,nsucc,nsucceq,nsup,nsupE,nsupe,nsupset,nsupseteq,nsupseteqq,ntgl,Ntilde,ntilde,ntlg,ntriangleleft,ntrianglelefteq,ntriangleright,ntrianglerighteq,Nu,nu,num,numero,numsp,nvap,nvdash,nvDash,nVdash,nVDash,nvge,nvgt,nvHarr,nvinfin,nvlArr,nvle,nvlt,nvltrie,nvrArr,nvrtrie,nvsim,nwarhk,nwarr,nwArr,nwarrow,nwnear,Oacute,oacute,oast,Ocirc,ocirc,ocir,Ocy,ocy,odash,Odblac,odblac,odiv,odot,odsold,OElig,oelig,ofcir,Ofr,ofr,ogon,Ograve,ograve,ogt,ohbar,ohm,oint,olarr,olcir,olcross,oline,olt,Omacr,omacr,Omega,omega,Omicron,omicron,omid,ominus,Oopf,oopf,opar,OpenCurlyDoubleQuote,OpenCurlyQuote,operp,oplus,orarr,Or,or,ord,order,orderof,ordf,ordm,origof,oror,orslope,orv,oS,Oscr,oscr,Oslash,oslash,osol,Otilde,otilde,otimesas,Otimes,otimes,Ouml,ouml,ovbar,OverBar,OverBrace,OverBracket,OverParenthesis,para,parallel,par,parsim,parsl,part,PartialD,Pcy,pcy,percnt,period,permil,perp,pertenk,Pfr,pfr,Phi,phi,phiv,phmmat,phone,Pi,pi,pitchfork,piv,planck,planckh,plankv,plusacir,plusb,pluscir,plus,plusdo,plusdu,pluse,PlusMinus,plusmn,plussim,plustwo,pm,Poincareplane,pointint,popf,Popf,pound,prap,Pr,pr,prcue,precapprox,prec,preccurlyeq,Precedes,PrecedesEqual,PrecedesSlantEqual,PrecedesTilde,preceq,precnapprox,precneqq,precnsim,pre,prE,precsim,prime,Prime,primes,prnap,prnE,prnsim,prod,Product,profalar,profline,profsurf,prop,Proportional,Proportion,propto,prsim,prurel,Pscr,pscr,Psi,psi,puncsp,Qfr,qfr,qint,qopf,Qopf,qprime,Qscr,qscr,quaternions,quatint,quest,questeq,quot,QUOT,rAarr,race,Racute,racute,radic,raemptyv,rang,Rang,rangd,range,rangle,raquo,rarrap,rarrb,rarrbfs,rarrc,rarr,Rarr,rArr,rarrfs,rarrhk,rarrlp,rarrpl,rarrsim,Rarrtl,rarrtl,rarrw,ratail,rAtail,ratio,rationals,rbarr,rBarr,RBarr,rbbrk,rbrace,rbrack,rbrke,rbrksld,rbrkslu,Rcaron,rcaron,Rcedil,rcedil,rceil,rcub,Rcy,rcy,rdca,rdldhar,rdquo,rdquor,rdsh,real,realine,realpart,reals,Re,rect,reg,REG,ReverseElement,ReverseEquilibrium,ReverseUpEquilibrium,rfisht,rfloor,rfr,Rfr,rHar,rhard,rharu,rharul,Rho,rho,rhov,RightAngleBracket,RightArrowBar,rightarrow,RightArrow,Rightarrow,RightArrowLeftArrow,rightarrowtail,RightCeiling,RightDoubleBracket,RightDownTeeVector,RightDownVectorBar,RightDownVector,RightFloor,rightharpoondown,rightharpoonup,rightleftarrows,rightleftharpoons,rightrightarrows,rightsquigarrow,RightTeeArrow,RightTee,RightTeeVector,rightthreetimes,RightTriangleBar,RightTriangle,RightTriangleEqual,RightUpDownVector,RightUpTeeVector,RightUpVectorBar,RightUpVector,RightVectorBar,RightVector,ring,risingdotseq,rlarr,rlhar,rlm,rmoustache,rmoust,rnmid,roang,roarr,robrk,ropar,ropf,Ropf,roplus,rotimes,RoundImplies,rpar,rpargt,rppolint,rrarr,Rrightarrow,rsaquo,rscr,Rscr,rsh,Rsh,rsqb,rsquo,rsquor,rthree,rtimes,rtri,rtrie,rtrif,rtriltri,RuleDelayed,ruluhar,rx,Sacute,sacute,sbquo,scap,Scaron,scaron,Sc,sc,sccue,sce,scE,Scedil,scedil,Scirc,scirc,scnap,scnE,scnsim,scpolint,scsim,Scy,scy,sdotb,sdot,sdote,searhk,searr,seArr,searrow,sect,semi,seswar,setminus,setmn,sext,Sfr,sfr,sfrown,sharp,SHCHcy,shchcy,SHcy,shcy,ShortDownArrow,ShortLeftArrow,shortmid,shortparallel,ShortRightArrow,ShortUpArrow,shy,Sigma,sigma,sigmaf,sigmav,sim,simdot,sime,simeq,simg,simgE,siml,simlE,simne,simplus,simrarr,slarr,SmallCircle,smallsetminus,smashp,smeparsl,smid,smile,smt,smte,smtes,SOFTcy,softcy,solbar,solb,sol,Sopf,sopf,spades,spadesuit,spar,sqcap,sqcaps,sqcup,sqcups,Sqrt,sqsub,sqsube,sqsubset,sqsubseteq,sqsup,sqsupe,sqsupset,sqsupseteq,square,Square,SquareIntersection,SquareSubset,SquareSubsetEqual,SquareSuperset,SquareSupersetEqual,SquareUnion,squarf,squ,squf,srarr,Sscr,sscr,ssetmn,ssmile,sstarf,Star,star,starf,straightepsilon,straightphi,strns,sub,Sub,subdot,subE,sube,subedot,submult,subnE,subne,subplus,subrarr,subset,Subset,subseteq,subseteqq,SubsetEqual,subsetneq,subsetneqq,subsim,subsub,subsup,succapprox,succ,succcurlyeq,Succeeds,SucceedsEqual,SucceedsSlantEqual,SucceedsTilde,succeq,succnapprox,succneqq,succnsim,succsim,SuchThat,sum,Sum,sung,sup1,sup2,sup3,sup,Sup,supdot,supdsub,supE,supe,supedot,Superset,SupersetEqual,suphsol,suphsub,suplarr,supmult,supnE,supne,supplus,supset,Supset,supseteq,supseteqq,supsetneq,supsetneqq,supsim,supsub,supsup,swarhk,swarr,swArr,swarrow,swnwar,szlig,Tab,target,Tau,tau,tbrk,Tcaron,tcaron,Tcedil,tcedil,Tcy,tcy,tdot,telrec,Tfr,tfr,there4,therefore,Therefore,Theta,theta,thetasym,thetav,thickapprox,thicksim,ThickSpace,ThinSpace,thinsp,thkap,thksim,THORN,thorn,tilde,Tilde,TildeEqual,TildeFullEqual,TildeTilde,timesbar,timesb,times,timesd,tint,toea,topbot,topcir,top,Topf,topf,topfork,tosa,tprime,trade,TRADE,triangle,triangledown,triangleleft,trianglelefteq,triangleq,triangleright,trianglerighteq,tridot,trie,triminus,TripleDot,triplus,trisb,tritime,trpezium,Tscr,tscr,TScy,tscy,TSHcy,tshcy,Tstrok,tstrok,twixt,twoheadleftarrow,twoheadrightarrow,Uacute,uacute,uarr,Uarr,uArr,Uarrocir,Ubrcy,ubrcy,Ubreve,ubreve,Ucirc,ucirc,Ucy,ucy,udarr,Udblac,udblac,udhar,ufisht,Ufr,ufr,Ugrave,ugrave,uHar,uharl,uharr,uhblk,ulcorn,ulcorner,ulcrop,ultri,Umacr,umacr,uml,UnderBar,UnderBrace,UnderBracket,UnderParenthesis,Union,UnionPlus,Uogon,uogon,Uopf,uopf,UpArrowBar,uparrow,UpArrow,Uparrow,UpArrowDownArrow,updownarrow,UpDownArrow,Updownarrow,UpEquilibrium,upharpoonleft,upharpoonright,uplus,UpperLeftArrow,UpperRightArrow,upsi,Upsi,upsih,Upsilon,upsilon,UpTeeArrow,UpTee,upuparrows,urcorn,urcorner,urcrop,Uring,uring,urtri,Uscr,uscr,utdot,Utilde,utilde,utri,utrif,uuarr,Uuml,uuml,uwangle,vangrt,varepsilon,varkappa,varnothing,varphi,varpi,varpropto,varr,vArr,varrho,varsigma,varsubsetneq,varsubsetneqq,varsupsetneq,varsupsetneqq,vartheta,vartriangleleft,vartriangleright,vBar,Vbar,vBarv,Vcy,vcy,vdash,vDash,Vdash,VDash,Vdashl,veebar,vee,Vee,veeeq,vellip,verbar,Verbar,vert,Vert,VerticalBar,VerticalLine,VerticalSeparator,VerticalTilde,VeryThinSpace,Vfr,vfr,vltri,vnsub,vnsup,Vopf,vopf,vprop,vrtri,Vscr,vscr,vsubnE,vsubne,vsupnE,vsupne,Vvdash,vzigzag,Wcirc,wcirc,wedbar,wedge,Wedge,wedgeq,weierp,Wfr,wfr,Wopf,wopf,wp,wr,wreath,Wscr,wscr,xcap,xcirc,xcup,xdtri,Xfr,xfr,xharr,xhArr,Xi,xi,xlarr,xlArr,xmap,xnis,xodot,Xopf,xopf,xoplus,xotime,xrarr,xrArr,Xscr,xscr,xsqcup,xuplus,xutri,xvee,xwedge,Yacute,yacute,YAcy,yacy,Ycirc,ycirc,Ycy,ycy,yen,Yfr,yfr,YIcy,yicy,Yopf,yopf,Yscr,yscr,YUcy,yucy,yuml,Yuml,Zacute,zacute,Zcaron,zcaron,Zcy,zcy,Zdot,zdot,zeetrf,ZeroWidthSpace,Zeta,zeta,zfr,Zfr,ZHcy,zhcy,zigrarr,zopf,Zopf,Zscr,zscr,zwj,zwnj,default:entities});var Aacute$1="Á";var aacute$1="á";var Acirc$1="Â";var acirc$1="â";var acute$1="´";var AElig$1="Æ";var aelig$1="æ";var Agrave$1="À";var agrave$1="à";var amp$1="&";var AMP$1="&";var Aring$1="Å";var aring$1="å";var Atilde$1="Ã";var atilde$1="ã";var Auml$1="Ä";var auml$1="ä";var brvbar$1="¦";var Ccedil$1="Ç";var ccedil$1="ç";var cedil$1="¸";var cent$1="¢";var copy$1="©";var COPY$1="©";var curren$1="¤";var deg$1="°";var divide$1="÷";var Eacute$1="É";var eacute$1="é";var Ecirc$1="Ê";var ecirc$1="ê";var Egrave$1="È";var egrave$1="è";var ETH$1="Ð";var eth$1="ð";var Euml$1="Ë";var euml$1="ë";var frac12$1="½";var frac14$1="¼";var frac34$1="¾";var gt$1=">";var GT$1=">";var Iacute$1="Í";var iacute$1="í";var Icirc$1="Î";var icirc$1="î";var iexcl$1="¡";var Igrave$1="Ì";var igrave$1="ì";var iquest$1="¿";var Iuml$1="Ï";var iuml$1="ï";var laquo$1="«";var lt$1="<";var LT$1="<";var macr$1="¯";var micro$1="µ";var middot$1="·";var nbsp$1=" ";var not$1="¬";var Ntilde$1="Ñ";var ntilde$1="ñ";var Oacute$1="Ó";var oacute$1="ó";var Ocirc$1="Ô";var ocirc$1="ô";var Ograve$1="Ò";var ograve$1="ò";var ordf$1="ª";var ordm$1="º";var Oslash$1="Ø";var oslash$1="ø";var Otilde$1="Õ";var otilde$1="õ";var Ouml$1="Ö";var ouml$1="ö";var para$1="¶";var plusmn$1="±";var pound$1="£";var quot$1='"';var QUOT$1='"';var raquo$1="»";var reg$1="®";var REG$1="®";var sect$1="§";var shy$1="­";var sup1$1="¹";var sup2$1="²";var sup3$1="³";var szlig$1="ß";var THORN$1="Þ";var thorn$1="þ";var times$1="×";var Uacute$1="Ú";var uacute$1="ú";var Ucirc$1="Û";var ucirc$1="û";var Ugrave$1="Ù";var ugrave$1="ù";var uml$1="¨";var Uuml$1="Ü";var uuml$1="ü";var Yacute$1="Ý";var yacute$1="ý";var yen$1="¥";var yuml$1="ÿ";var legacy={Aacute:Aacute$1,aacute:aacute$1,Acirc:Acirc$1,acirc:acirc$1,acute:acute$1,AElig:AElig$1,aelig:aelig$1,Agrave:Agrave$1,agrave:agrave$1,amp:amp$1,AMP:AMP$1,Aring:Aring$1,aring:aring$1,Atilde:Atilde$1,atilde:atilde$1,Auml:Auml$1,auml:auml$1,brvbar:brvbar$1,Ccedil:Ccedil$1,ccedil:ccedil$1,cedil:cedil$1,cent:cent$1,copy:copy$1,COPY:COPY$1,curren:curren$1,deg:deg$1,divide:divide$1,Eacute:Eacute$1,eacute:eacute$1,Ecirc:Ecirc$1,ecirc:ecirc$1,Egrave:Egrave$1,egrave:egrave$1,ETH:ETH$1,eth:eth$1,Euml:Euml$1,euml:euml$1,frac12:frac12$1,frac14:frac14$1,frac34:frac34$1,gt:gt$1,GT:GT$1,Iacute:Iacute$1,iacute:iacute$1,Icirc:Icirc$1,icirc:icirc$1,iexcl:iexcl$1,Igrave:Igrave$1,igrave:igrave$1,iquest:iquest$1,Iuml:Iuml$1,iuml:iuml$1,laquo:laquo$1,lt:lt$1,LT:LT$1,macr:macr$1,micro:micro$1,middot:middot$1,nbsp:nbsp$1,not:not$1,Ntilde:Ntilde$1,ntilde:ntilde$1,Oacute:Oacute$1,oacute:oacute$1,Ocirc:Ocirc$1,ocirc:ocirc$1,Ograve:Ograve$1,ograve:ograve$1,ordf:ordf$1,ordm:ordm$1,Oslash:Oslash$1,oslash:oslash$1,Otilde:Otilde$1,otilde:otilde$1,Ouml:Ouml$1,ouml:ouml$1,para:para$1,plusmn:plusmn$1,pound:pound$1,quot:quot$1,QUOT:QUOT$1,raquo:raquo$1,reg:reg$1,REG:REG$1,sect:sect$1,shy:shy$1,sup1:sup1$1,sup2:sup2$1,sup3:sup3$1,szlig:szlig$1,THORN:THORN$1,thorn:thorn$1,times:times$1,Uacute:Uacute$1,uacute:uacute$1,Ucirc:Ucirc$1,ucirc:ucirc$1,Ugrave:Ugrave$1,ugrave:ugrave$1,uml:uml$1,Uuml:Uuml$1,uuml:uuml$1,Yacute:Yacute$1,yacute:yacute$1,yen:yen$1,yuml:yuml$1};var legacy$1=Object.freeze({__proto__:null,Aacute:Aacute$1,aacute:aacute$1,Acirc:Acirc$1,acirc:acirc$1,acute:acute$1,AElig:AElig$1,aelig:aelig$1,Agrave:Agrave$1,agrave:agrave$1,amp:amp$1,AMP:AMP$1,Aring:Aring$1,aring:aring$1,Atilde:Atilde$1,atilde:atilde$1,Auml:Auml$1,auml:auml$1,brvbar:brvbar$1,Ccedil:Ccedil$1,ccedil:ccedil$1,cedil:cedil$1,cent:cent$1,copy:copy$1,COPY:COPY$1,curren:curren$1,deg:deg$1,divide:divide$1,Eacute:Eacute$1,eacute:eacute$1,Ecirc:Ecirc$1,ecirc:ecirc$1,Egrave:Egrave$1,egrave:egrave$1,ETH:ETH$1,eth:eth$1,Euml:Euml$1,euml:euml$1,frac12:frac12$1,frac14:frac14$1,frac34:frac34$1,gt:gt$1,GT:GT$1,Iacute:Iacute$1,iacute:iacute$1,Icirc:Icirc$1,icirc:icirc$1,iexcl:iexcl$1,Igrave:Igrave$1,igrave:igrave$1,iquest:iquest$1,Iuml:Iuml$1,iuml:iuml$1,laquo:laquo$1,lt:lt$1,LT:LT$1,macr:macr$1,micro:micro$1,middot:middot$1,nbsp:nbsp$1,not:not$1,Ntilde:Ntilde$1,ntilde:ntilde$1,Oacute:Oacute$1,oacute:oacute$1,Ocirc:Ocirc$1,ocirc:ocirc$1,Ograve:Ograve$1,ograve:ograve$1,ordf:ordf$1,ordm:ordm$1,Oslash:Oslash$1,oslash:oslash$1,Otilde:Otilde$1,otilde:otilde$1,Ouml:Ouml$1,ouml:ouml$1,para:para$1,plusmn:plusmn$1,pound:pound$1,quot:quot$1,QUOT:QUOT$1,raquo:raquo$1,reg:reg$1,REG:REG$1,sect:sect$1,shy:shy$1,sup1:sup1$1,sup2:sup2$1,sup3:sup3$1,szlig:szlig$1,THORN:THORN$1,thorn:thorn$1,times:times$1,Uacute:Uacute$1,uacute:uacute$1,Ucirc:Ucirc$1,ucirc:ucirc$1,Ugrave:Ugrave$1,ugrave:ugrave$1,uml:uml$1,Uuml:Uuml$1,uuml:uuml$1,Yacute:Yacute$1,yacute:yacute$1,yen:yen$1,yuml:yuml$1,default:legacy});var amp$2="&";var apos$1="'";var gt$2=">";var lt$2="<";var quot$2='"';var xml={amp:amp$2,apos:apos$1,gt:gt$2,lt:lt$2,quot:quot$2};var xml$1=Object.freeze({__proto__:null,amp:amp$2,apos:apos$1,gt:gt$2,lt:lt$2,quot:quot$2,default:xml});var decode={0:65533,128:8364,130:8218,131:402,132:8222,133:8230,134:8224,135:8225,136:710,137:8240,138:352,139:8249,140:338,142:381,145:8216,146:8217,147:8220,148:8221,149:8226,150:8211,151:8212,152:732,153:8482,154:353,155:8250,156:339,158:382,159:376};var decode$1=Object.freeze({__proto__:null,default:decode});var require$$0=getCjsExportFromNamespace(decode$1);var decode_codepoint=createCommonjsModule((function(module,exports){var __importDefault=commonjsGlobal&&commonjsGlobal.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:true});var decode_json_1=__importDefault(require$$0);function decodeCodePoint(codePoint){if(codePoint>=55296&&codePoint<=57343||codePoint>1114111){return"�"}if(codePoint in decode_json_1.default){codePoint=decode_json_1.default[codePoint]}var output="";if(codePoint>65535){codePoint-=65536;output+=String.fromCharCode(codePoint>>>10&1023|55296);codePoint=56320|codePoint&1023}output+=String.fromCharCode(codePoint);return output}exports.default=decodeCodePoint}));unwrapExports(decode_codepoint);var require$$1=getCjsExportFromNamespace(entities$1);var require$$1$1=getCjsExportFromNamespace(legacy$1);var require$$0$1=getCjsExportFromNamespace(xml$1);var decode$2=createCommonjsModule((function(module,exports){var __importDefault=commonjsGlobal&&commonjsGlobal.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:true});var entities_json_1=__importDefault(require$$1);var legacy_json_1=__importDefault(require$$1$1);var xml_json_1=__importDefault(require$$0$1);var decode_codepoint_1=__importDefault(decode_codepoint);exports.decodeXML=getStrictDecoder(xml_json_1.default);exports.decodeHTMLStrict=getStrictDecoder(entities_json_1.default);function getStrictDecoder(map){var keys=Object.keys(map).join("|");var replace=getReplacer(map);keys+="|#[xX][\\da-fA-F]+|#\\d+";var re=new RegExp("&(?:"+keys+");","g");return function(str){return String(str).replace(re,replace)}}var sorter=function(a,b){return a<b?1:-1};exports.decodeHTML=function(){var legacy=Object.keys(legacy_json_1.default).sort(sorter);var keys=Object.keys(entities_json_1.default).sort(sorter);for(var i=0,j=0;i<keys.length;i++){if(legacy[j]===keys[i]){keys[i]+=";?";j++}else{keys[i]+=";"}}var re=new RegExp("&(?:"+keys.join("|")+"|#[xX][\\da-fA-F]+;?|#\\d+;?)","g");var replace=getReplacer(entities_json_1.default);function replacer(str){if(str.substr(-1)!==";")str+=";";return replace(str)}return function(str){return String(str).replace(re,replacer)}}();function getReplacer(map){return function replace(str){if(str.charAt(1)==="#"){if(str.charAt(2)==="X"||str.charAt(2)==="x"){return decode_codepoint_1.default(parseInt(str.substr(3),16))}return decode_codepoint_1.default(parseInt(str.substr(2),10))}return map[str.slice(1,-1)]}}}));unwrapExports(decode$2);var decode_1=decode$2.decodeXML;var decode_2=decode$2.decodeHTMLStrict;var decode_3=decode$2.decodeHTML;var encode=createCommonjsModule((function(module,exports){var __importDefault=commonjsGlobal&&commonjsGlobal.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:true});var xml_json_1=__importDefault(require$$0$1);var inverseXML=getInverseObj(xml_json_1.default);var xmlReplacer=getInverseReplacer(inverseXML);exports.encodeXML=getInverse(inverseXML,xmlReplacer);var entities_json_1=__importDefault(require$$1);var inverseHTML=getInverseObj(entities_json_1.default);var htmlReplacer=getInverseReplacer(inverseHTML);exports.encodeHTML=getInverse(inverseHTML,htmlReplacer);function getInverseObj(obj){return Object.keys(obj).sort().reduce((function(inverse,name){inverse[obj[name]]="&"+name+";";return inverse}),{})}function getInverseReplacer(inverse){var single=[];var multiple=[];Object.keys(inverse).forEach((function(k){return k.length===1?single.push("\\"+k):multiple.push(k)}));multiple.unshift("["+single.join("")+"]");return new RegExp(multiple.join("|"),"g")}var reNonASCII=/[^\0-\x7F]/g;var reAstralSymbols=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g;function singleCharReplacer(c){return"&#x"+c.charCodeAt(0).toString(16).toUpperCase()+";"}function astralReplacer(c,_){var high=c.charCodeAt(0);var low=c.charCodeAt(1);var codePoint=(high-55296)*1024+low-56320+65536;return"&#x"+codePoint.toString(16).toUpperCase()+";"}function getInverse(inverse,re){return function(data){return data.replace(re,(function(name){return inverse[name]})).replace(reAstralSymbols,astralReplacer).replace(reNonASCII,singleCharReplacer)}}var reXmlChars=getInverseReplacer(inverseXML);function escape(data){return data.replace(reXmlChars,singleCharReplacer).replace(reAstralSymbols,astralReplacer).replace(reNonASCII,singleCharReplacer)}exports.escape=escape}));unwrapExports(encode);var encode_1=encode.encodeXML;var encode_2=encode.encodeHTML;var encode_3=encode.escape;var lib=createCommonjsModule((function(module,exports){Object.defineProperty(exports,"__esModule",{value:true});function decode(data,level){return(!level||level<=0?decode$2.decodeXML:decode$2.decodeHTML)(data)}exports.decode=decode;function decodeStrict(data,level){return(!level||level<=0?decode$2.decodeXML:decode$2.decodeHTMLStrict)(data)}exports.decodeStrict=decodeStrict;function encode$1(data,level){return(!level||level<=0?encode.encodeXML:encode.encodeHTML)(data)}exports.encode=encode$1;var encode_2=encode;exports.encodeXML=encode_2.encodeXML;exports.encodeHTML=encode_2.encodeHTML;exports.escape=encode_2.escape;exports.encodeHTML4=encode_2.encodeHTML;exports.encodeHTML5=encode_2.encodeHTML;var decode_2=decode$2;exports.decodeXML=decode_2.decodeXML;exports.decodeHTML=decode_2.decodeHTML;exports.decodeHTMLStrict=decode_2.decodeHTMLStrict;exports.decodeHTML4=decode_2.decodeHTML;exports.decodeHTML5=decode_2.decodeHTML;exports.decodeHTML4Strict=decode_2.decodeHTMLStrict;exports.decodeHTML5Strict=decode_2.decodeHTMLStrict;exports.decodeXMLStrict=decode_2.decodeXML}));unwrapExports(lib);var lib_1=lib.decode;var lib_2=lib.decodeStrict;var lib_3=lib.encode;var lib_4=lib.encodeXML;var lib_5=lib.encodeHTML;var lib_6=lib.escape;var lib_7=lib.encodeHTML4;var lib_8=lib.encodeHTML5;var lib_9=lib.decodeXML;var lib_10=lib.decodeHTML;var lib_11=lib.decodeHTMLStrict;var lib_12=lib.decodeHTML4;var lib_13=lib.decodeHTML5;var lib_14=lib.decodeHTML4Strict;var lib_15=lib.decodeHTML5Strict;var lib_16=lib.decodeXMLStrict;class BpmnXmlParser{constructor(){this.options={attributeNamePrefix:"",ignoreNameSpace:true,ignoreAttributes:false,parseAttributeValue:true,attrValueProcessor:val=>lib_9(val)}}parse(xml){return parser_1(xml,this.options)}}function convertEmptyStringAndObject(element,acceptEmptyString){if(element===""){return acceptEmptyString?{}:undefined}return element}function ensureIsArray(elements,acceptEmptyString=false){if(elements===undefined||elements===null){return[]}let returnedArray;if(!Array.isArray(elements)){returnedArray=[convertEmptyStringAndObject(elements,acceptEmptyString)]}else{returnedArray=elements.map(element=>convertEmptyStringAndObject(element,acceptEmptyString))}return returnedArray.filter(value=>value)}const convertedParticipantsById=new Map;const convertedParticipantsByProcessRef=new Map;const convertedMessageFlows=new Map;function findProcessRefParticipant(id){return convertedParticipantsById.get(id)}function findProcessRefParticipantByProcessRef(processRef){return convertedParticipantsByProcessRef.get(processRef)}function findMessageFlow(id){return convertedMessageFlows.get(id)}class CollaborationConverter{deserialize(collaborations){try{convertedParticipantsById.clear();convertedParticipantsByProcessRef.clear();convertedMessageFlows.clear();ensureIsArray(collaborations).forEach(collaboration=>this.parseCollaboration(collaboration))}catch(e){console.error(e)}}parseCollaboration(collaboration){this.buildParticipant(collaboration.participant);this.buildMessageFlows(collaboration.messageFlow)}buildParticipant(bpmnElements){ensureIsArray(bpmnElements).forEach(participant=>{if(participant.processRef){const convertedParticipant=new Participant(participant.id,participant.name,participant.processRef);convertedParticipantsById.set(participant.id,convertedParticipant);convertedParticipantsByProcessRef.set(participant.processRef,convertedParticipant)}})}buildMessageFlows(bpmnElements){ensureIsArray(bpmnElements).forEach(messageFlow=>{const convertedMessageFlow=new MessageFlow(messageFlow.id,messageFlow.name,messageFlow.sourceRef,messageFlow.targetRef);convertedMessageFlows.set(messageFlow.id,convertedMessageFlow)})}}const bpmnEventKinds=Object.values(ShapeBpmnEventKind).filter(kind=>kind!=ShapeBpmnEventKind.NONE);const eventDefinitionsOfDefinitions=new Map;function findEventDefinitionOfDefinitions(id){return eventDefinitionsOfDefinitions.get(id)}class EventDefinitionConverter{deserialize(definitions){try{eventDefinitionsOfDefinitions.clear();bpmnEventKinds.forEach(eventKind=>{const eventDefinitions=definitions[eventKind+"EventDefinition"];ensureIsArray(eventDefinitions,true).forEach(eventDefinition=>{eventDefinitionsOfDefinitions.set(eventDefinition.id,eventKind)})})}catch(e){console.error(e)}}}var ShapeBpmnCallActivityKind;(function(ShapeBpmnCallActivityKind){ShapeBpmnCallActivityKind["CALLING_PROCESS"]="process"})(ShapeBpmnCallActivityKind||(ShapeBpmnCallActivityKind={}));const globalTaskIds=[];function isGlobalTask(id){return globalTaskIds.includes(id)}class GlobalTaskConverter{deserialize(definitions){try{globalTaskIds.length=0;this.parseGlobalTasks(definitions.globalTask);this.parseGlobalTasks(definitions.globalBusinessRuleTask);this.parseGlobalTasks(definitions.globalManualTask);this.parseGlobalTasks(definitions.globalScriptTask);this.parseGlobalTasks(definitions.globalUserTask)}catch(e){console.error(e)}}parseGlobalTasks(globalTasks){ensureIsArray(globalTasks).forEach(globalTask=>{globalTaskIds.push(globalTask.id)})}}const convertedFlowNodeBpmnElements=new Map;const convertedLaneBpmnElements=new Map;const convertedProcessBpmnElements=new Map;const convertedSequenceFlows=new Map;const convertedAssociationFlows=new Map;const defaultSequenceFlowIds=[];function findFlowNodeBpmnElement(id){return convertedFlowNodeBpmnElements.get(id)}function findLaneBpmnElement(id){return convertedLaneBpmnElements.get(id)}function findProcessBpmnElement(id){return convertedProcessBpmnElements.get(id)}function findSequenceFlow(id){return convertedSequenceFlows.get(id)}function findAssociationFlow(id){return convertedAssociationFlows.get(id)}class ProcessConverter{deserialize(processes){try{convertedFlowNodeBpmnElements.clear();convertedLaneBpmnElements.clear();convertedProcessBpmnElements.clear();convertedSequenceFlows.clear();convertedAssociationFlows.clear();defaultSequenceFlowIds.length=0;ensureIsArray(processes).forEach(process=>this.parseProcess(process))}catch(e){console.error(e)}}parseProcess(process){const processId=process.id;convertedProcessBpmnElements.set(processId,new ShapeBpmnElement(processId,process.name,ShapeBpmnElementKind.POOL));ShapeUtil.flowNodeKinds().filter(kind=>kind!=ShapeBpmnElementKind.EVENT_BOUNDARY).forEach(kind=>this.buildFlowNodeBpmnElements(processId,process[kind],kind));this.buildFlowNodeBpmnElements(processId,process.boundaryEvent,ShapeBpmnElementKind.EVENT_BOUNDARY);this.buildLaneBpmnElements(processId,process[ShapeBpmnElementKind.LANE]);this.buildLaneSetBpmnElements(processId,process["laneSet"]);this.buildSequenceFlows(process[FlowKind.SEQUENCE_FLOW]);this.buildAssociationFlows(process[FlowKind.ASSOCIATION_FLOW])}buildFlowNodeBpmnElements(processId,bpmnElements,kind){ensureIsArray(bpmnElements).forEach(bpmnElement=>{let shapeBpmnElement;if(ShapeUtil.isEvent(kind)){shapeBpmnElement=this.buildShapeBpmnEvent(bpmnElement,kind,processId)}else if(ShapeUtil.isActivity(kind)){shapeBpmnElement=this.buildShapeBpmnActivity(bpmnElement,kind,processId)}else{const name=kind===ShapeBpmnElementKind.TEXT_ANNOTATION?bpmnElement.text:bpmnElement.name;shapeBpmnElement=new ShapeBpmnElement(bpmnElement.id,name,kind,processId,bpmnElement.instantiate)}const defaultFlow=bpmnElement.default;if(ShapeUtil.isWithDefaultSequenceFlow(kind)&&defaultFlow){defaultSequenceFlowIds.push(defaultFlow)}if(shapeBpmnElement){convertedFlowNodeBpmnElements.set(shapeBpmnElement.id,shapeBpmnElement)}})}buildShapeBpmnActivity(bpmnElement,kind,processId){const markers=this.buildMarkers(bpmnElement);if(ShapeUtil.isSubProcess(kind)){return this.buildShapeBpmnSubProcess(bpmnElement,processId,markers)}if(!ShapeUtil.isCallActivity(kind)){return new ShapeBpmnActivity(bpmnElement.id,bpmnElement.name,kind,processId,bpmnElement.instantiate,markers)}if(!isGlobalTask(bpmnElement.calledElement)){return new ShapeBpmnCallActivity(bpmnElement.id,bpmnElement.name,ShapeBpmnCallActivityKind.CALLING_PROCESS,processId,markers)}}buildMarkers(bpmnElement){const markers=[];const standardLoopCharacteristics=bpmnElement.standardLoopCharacteristics;const multiInstanceLoopCharacteristics=ensureIsArray(bpmnElement.multiInstanceLoopCharacteristics,true)[0];if(standardLoopCharacteristics||standardLoopCharacteristics===""){markers.push(ShapeBpmnMarkerKind.LOOP)}else if(multiInstanceLoopCharacteristics&&multiInstanceLoopCharacteristics.isSequential){markers.push(ShapeBpmnMarkerKind.MULTI_INSTANCE_SEQUENTIAL)}else if(multiInstanceLoopCharacteristics&&!multiInstanceLoopCharacteristics.isSequential||multiInstanceLoopCharacteristics===""){markers.push(ShapeBpmnMarkerKind.MULTI_INSTANCE_PARALLEL)}return markers}buildShapeBpmnEvent(bpmnElement,elementKind,processId){const eventDefinitions=this.getEventDefinitions(bpmnElement);const numberOfEventDefinitions=eventDefinitions.map(eventDefinition=>eventDefinition.counter).reduce((counter,it)=>counter+it,0);if(numberOfEventDefinitions==0&&ShapeUtil.canHaveNoneEvent(elementKind)){return new ShapeBpmnEvent(bpmnElement.id,bpmnElement.name,elementKind,ShapeBpmnEventKind.NONE,processId)}if(numberOfEventDefinitions==1){const eventKind=eventDefinitions[0].kind;if(supportedBpmnEventKinds.includes(eventKind)){if(ShapeUtil.isBoundaryEvent(elementKind)){return this.buildShapeBpmnBoundaryEvent(bpmnElement,eventKind)}return new ShapeBpmnEvent(bpmnElement.id,bpmnElement.name,elementKind,eventKind,processId)}}}buildShapeBpmnBoundaryEvent(bpmnElement,eventKind){const parent=findFlowNodeBpmnElement(bpmnElement.attachedToRef);if(ShapeUtil.isActivity(parent===null||parent===void 0?void 0:parent.kind)){return new ShapeBpmnBoundaryEvent(bpmnElement.id,bpmnElement.name,eventKind,bpmnElement.attachedToRef,bpmnElement.cancelActivity)}else{console.warn("The boundary event %s must be attach to an activity, and not to %s",bpmnElement.id,parent===null||parent===void 0?void 0:parent.kind)}}getEventDefinitions(bpmnElement){const eventDefinitions=new Map;bpmnEventKinds.forEach(eventKind=>{const eventDefinition=bpmnElement[eventKind+"EventDefinition"];const counter=ensureIsArray(eventDefinition,true).length;eventDefinitions.set(eventKind,counter)});ensureIsArray(bpmnElement.eventDefinitionRef).forEach(eventDefinitionRef=>{const kind=findEventDefinitionOfDefinitions(eventDefinitionRef);eventDefinitions.set(kind,eventDefinitions.get(kind)+1)});return Array.from(eventDefinitions.keys()).map(kind=>({kind,counter:eventDefinitions.get(kind)})).filter(eventDefinition=>eventDefinition.counter>0)}buildShapeBpmnSubProcess(bpmnElement,processId,markers){if(!bpmnElement.triggeredByEvent){return new ShapeBpmnSubProcess(bpmnElement.id,bpmnElement.name,ShapeBpmnSubProcessKind.EMBEDDED,processId,markers)}return new ShapeBpmnSubProcess(bpmnElement.id,bpmnElement.name,ShapeBpmnSubProcessKind.EVENT,processId,markers)}buildLaneSetBpmnElements(processId,laneSets){ensureIsArray(laneSets).forEach(laneSet=>{this.buildLaneBpmnElements(processId,laneSet.lane)})}buildLaneBpmnElements(processId,lanes){ensureIsArray(lanes).forEach(lane=>{const laneShape=new ShapeBpmnElement(lane.id,lane.name,ShapeBpmnElementKind.LANE,processId);convertedLaneBpmnElements.set(lane.id,laneShape);this.assignParentOfLaneFlowNodes(lane)})}assignParentOfLaneFlowNodes(lane){ensureIsArray(lane.flowNodeRef).forEach(flowNodeRef=>{const shapeBpmnElement=findFlowNodeBpmnElement(flowNodeRef);const laneId=lane.id;if(shapeBpmnElement){if(!ShapeUtil.isBoundaryEvent(shapeBpmnElement.kind)){shapeBpmnElement.parentId=laneId}}else{console.warn("Unable to assign lane %s as parent: flow node %s is not found",laneId,flowNodeRef)}})}buildSequenceFlows(bpmnElements){ensureIsArray(bpmnElements).forEach(sequenceFlow=>{const kind=this.getSequenceFlowKind(sequenceFlow);const convertedSequenceFlow=new SequenceFlow(sequenceFlow.id,sequenceFlow.name,sequenceFlow.sourceRef,sequenceFlow.targetRef,kind);convertedSequenceFlows.set(sequenceFlow.id,convertedSequenceFlow)})}buildAssociationFlows(bpmnElements){ensureIsArray(bpmnElements).forEach(association=>{const direction=association.associationDirection;const convertedAssociationFlow=new AssociationFlow(association.id,undefined,association.sourceRef,association.targetRef,direction);convertedAssociationFlows.set(association.id,convertedAssociationFlow)})}getSequenceFlowKind(sequenceFlow){if(defaultSequenceFlowIds.includes(sequenceFlow.id)){return SequenceFlowKind.DEFAULT}else{const sourceShapeBpmnElement=findFlowNodeBpmnElement(sequenceFlow.sourceRef);if(sourceShapeBpmnElement&&ShapeUtil.isWithDefaultSequenceFlow(sourceShapeBpmnElement.kind)&&sequenceFlow.conditionExpression){if(ShapeUtil.isActivity(sourceShapeBpmnElement.kind)){return SequenceFlowKind.CONDITIONAL_FROM_ACTIVITY}else{return SequenceFlowKind.CONDITIONAL_FROM_GATEWAY}}}return SequenceFlowKind.NORMAL}}class Bounds{constructor(x,y,width,height){this.x=x;this.y=y;this.width=width;this.height=height}}class Edge{constructor(id,bpmnElement,waypoints,label,messageVisibleKind=MessageVisibleKind.NONE){this.id=id;this.bpmnElement=bpmnElement;this.waypoints=waypoints;this.label=label;this.messageVisibleKind=messageVisibleKind}}class Waypoint{constructor(x,y){this.x=x;this.y=y}}class Label{constructor(font,bounds){this.font=font;this.bounds=bounds}}class Font{constructor(name,size,isBold,isItalic,isUnderline,isStrikeThrough){this.name=name;this.size=size;this.isBold=isBold;this.isItalic=isItalic;this.isUnderline=isUnderline;this.isStrikeThrough=isStrikeThrough}}function findProcessElement(participantId){const participant=findProcessRefParticipant(participantId);if(participant){const originalProcessBpmnElement=findProcessBpmnElement(participant.processRef);const name=participant.name||originalProcessBpmnElement.name;return new ShapeBpmnElement(participant.id,name,originalProcessBpmnElement.kind,originalProcessBpmnElement.parentId)}}class DiagramConverter{constructor(){this.convertedFonts=new Map}deserialize(bpmnDiagrams){const flowNodes=[];const lanes=[];const pools=[];const edges=[];ensureIsArray(bpmnDiagrams).map(bpmnDiagram=>{try{this.deserializeFonts(bpmnDiagram.BPMNLabelStyle);const plane=bpmnDiagram.BPMNPlane;const convertedEdges=this.deserializeEdges(plane.BPMNEdge);const convertedShapes=this.deserializeShapes(plane.BPMNShape);flowNodes.push(...convertedShapes.flowNodes);lanes.push(...convertedShapes.lanes);pools.push(...convertedShapes.pools);edges.push(...convertedEdges)}catch(e){console.error(e)}});return{flowNodes,lanes,pools,edges}}deserializeFonts(bpmnLabelStyle){this.convertedFonts=new Map;ensureIsArray(bpmnLabelStyle).forEach(labelStyle=>{ensureIsArray(labelStyle.Font).forEach(font=>{this.convertedFonts.set(labelStyle.id,new Font(font.name,font.size,font.isBold,font.isItalic,font.isUnderline,font.isStrikeThrough))})})}deserializeShapes(shapes){const convertedShapes={flowNodes:[],lanes:[],pools:[]};shapes=ensureIsArray(shapes);for(let i=0;i<shapes.length;i++){const shape=shapes[i];const flowNode=this.deserializeShape(shape,bpmnElement=>findFlowNodeBpmnElement(bpmnElement));if(flowNode){convertedShapes.flowNodes.push(flowNode);continue}const lane=this.deserializeShape(shape,bpmnElement=>findLaneBpmnElement(bpmnElement));if(lane){convertedShapes.lanes.push(lane);continue}const pool=this.deserializeShape(shape,bpmnElement=>findProcessElement(bpmnElement));if(pool){convertedShapes.pools.push(pool);continue}console.warn("Shape json deserialization: unable to find bpmn element with id %s",shape.bpmnElement)}return convertedShapes}deserializeShape(shape,findShapeElement){const bpmnElement=findShapeElement(shape.bpmnElement);if(bpmnElement){const bounds=this.deserializeBounds(shape);if(bpmnElement.parentId){const participant=findProcessRefParticipantByProcessRef(bpmnElement.parentId);if(participant){bpmnElement.parentId=participant.id}}if((bpmnElement instanceof ShapeBpmnSubProcess||bpmnElement instanceof ShapeBpmnCallActivity)&&!shape.isExpanded){bpmnElement.markers.push(ShapeBpmnMarkerKind.EXPAND)}const label=this.deserializeLabel(shape.BPMNLabel,shape.id);return new Shape(shape.id,bpmnElement,bounds,label)}}deserializeBounds(boundedElement){const bounds=boundedElement.Bounds;if(bounds){return new Bounds(bounds.x,bounds.y,bounds.width,bounds.height)}}deserializeEdges(edges){return ensureIsArray(edges).map(edge=>{const flow=findSequenceFlow(edge.bpmnElement)||findMessageFlow(edge.bpmnElement)||findAssociationFlow(edge.bpmnElement);const waypoints=this.deserializeWaypoints(edge.waypoint);const label=this.deserializeLabel(edge.BPMNLabel,edge.id);const messageVisibleKind=edge.messageVisibleKind?edge.messageVisibleKind:MessageVisibleKind.NONE;return new Edge(edge.id,flow,waypoints,label,messageVisibleKind)})}deserializeWaypoints(waypoints){return ensureIsArray(waypoints).map(waypoint=>new Waypoint(waypoint.x,waypoint.y))}deserializeLabel(bpmnLabel,id){if(bpmnLabel&&typeof bpmnLabel==="object"){const font=this.findFont(bpmnLabel.labelStyle,id);const bounds=this.deserializeBounds(bpmnLabel);if(font||bounds){return new Label(font,bounds)}}}findFont(labelStyle,id){let font;if(labelStyle){font=this.convertedFonts.get(labelStyle);if(!font){console.warn("Unable to assign font from style %s to shape/edge %s",labelStyle,id)}}return font}}class BpmnJsonParser{constructor(collaborationConverter,eventDefinitionConverter,globalTaskConverter,processConverter,diagramConverter){this.collaborationConverter=collaborationConverter;this.eventDefinitionConverter=eventDefinitionConverter;this.globalTaskConverter=globalTaskConverter;this.processConverter=processConverter;this.diagramConverter=diagramConverter}parse(json){const definitions=json.definitions;this.collaborationConverter.deserialize(definitions.collaboration);this.eventDefinitionConverter.deserialize(definitions);this.globalTaskConverter.deserialize(definitions);this.processConverter.deserialize(definitions.process);return this.diagramConverter.deserialize(definitions.BPMNDiagram)}}function defaultBpmnJsonParser(){return new BpmnJsonParser(new CollaborationConverter,new EventDefinitionConverter,new GlobalTaskConverter,new ProcessConverter,new DiagramConverter)}class BpmnParser{constructor(jsonParser,xmlParser){this.jsonParser=jsonParser;this.xmlParser=xmlParser}parse(bpmnAsXml){const json=this.xmlParser.parse(bpmnAsXml);return this.jsonParser.parse(json)}}function defaultBpmnParser(){return new BpmnParser(defaultBpmnJsonParser(),new BpmnXmlParser)}class BpmnVisualization{constructor(container){this.container=container;try{if(!mxClient.isBrowserSupported()){mxUtils.error("Browser is not supported!",200,false)}const configurator=new MxGraphConfigurator(this.container);this.graph=configurator.configure()}catch(e){mxUtils.alert("Cannot start application: "+e.message);throw e}}load(xml){try{const bpmnModel=defaultBpmnParser().parse(xml);defaultMxGraphRenderer(this.graph).render(bpmnModel)}catch(e){mxUtils.alert("Cannot load bpmn diagram: "+e.message);throw e}}}class DropFileUserInterface{constructor(window,outerContainerId,containerToFadeId,dropCallback){this.window=window;this.outerContainerId=outerContainerId;this.containerToFadeId=containerToFadeId;this.dropCallback=dropCallback;this.document=window.document;this.head=document.head;this.body=document.body;this.initializeDragAndDrop()}initializeDragAndDrop(){this.addDomElements();this.addStyle();const dropContainer=document.getElementById(this.outerContainerId);const containerToBeFaded=document.getElementById(this.containerToFadeId);this.preventDefaultsOnEvents(["dragover","drop"],this.window);this.preventDefaultsOnEvents(["dragover","dragleave","drop"],dropContainer);this.addEventsOnDropContainer(dropContainer,containerToBeFaded);this.addEventsOnDocument(this.outerContainerId,containerToBeFaded)}preventDefaults(e){e.preventDefault();e.stopPropagation()}preventDefaultsOnEvents(events,container){events.forEach(eventName=>{container.addEventListener(eventName,this.preventDefaults,false)})}addDomElements(){const p=this.document.createElement("p");p.textContent="open BPMN diagram";const innerDiv=this.document.createElement("div");innerDiv.classList.add("drop-here-text");innerDiv.appendChild(p);const containerDiv=this.document.createElement("div");containerDiv.id=this.outerContainerId;containerDiv.appendChild(innerDiv);this.body.insertBefore(containerDiv,this.body.firstChild)}addStyle(){const css=`\n#${this.containerToFadeId} {\n    opacity: 1;\n}\n#${this.containerToFadeId}.faded {\n    opacity: 0.1;\n}\n#${this.outerContainerId} {\n    overflow: hidden;\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    bottom: 10px;\n    left: 10px;\n    font-weight: bold;\n    text-align: center;\n    color: #555;\n}\n#${this.outerContainerId} .drop-here-text {\n    display: none;\n    border: 2px solid transparent;\n    width: 98%;\n    height: 98%;\n    margin: 1%;\n    overflow: hidden;\n}\n#${this.outerContainerId} .drop-here-text p {\n    margin-top: 45%;\n    font-style: normal;\n    font-family: monospace;\n    font-size: 40px;\n    color: rgba(1,1,1,.2);\n}\n#${this.outerContainerId}.dragging  .drop-here-text {\n    cursor: default;\n    display: block;\n    border: 2px dashed #555;\n    border-radius: 7px;\n}`;const style=document.createElement("style");style.appendChild(document.createTextNode(css));this.head.appendChild(style)}addEventsOnDropContainer(container,containerToBeFaded){container.addEventListener("dragover",this.getAddClassCallback(containerToBeFaded,false),false);container.addEventListener("mousedown",this.getRemoveClassCallback(containerToBeFaded,false),false);container.addEventListener("drop",this.getDropCallbackForElement(containerToBeFaded,false,this.dropCallback),false)}addEventsOnDocument(outerContainerId,containerToBeFaded){this.document.addEventListener("dragover",this.getAddClassCallback(containerToBeFaded,true,outerContainerId),false);this.document.addEventListener("dragleave",this.getRemoveClassCallback(containerToBeFaded,true,outerContainerId),false);this.document.addEventListener("drop",this.getDropCallbackForElement(containerToBeFaded,true,this.dropCallback,outerContainerId),false)}getAddClassCallback(containerToBeFaded,isDocument,outerContainerId){return function(){isDocument?this.querySelector("#"+outerContainerId).classList.add("dragging"):this.classList.add("dragging");containerToBeFaded.classList.add("faded")}}getRemoveClassCallback(containerToBeFaded,isDocument,outerContainerId){return function(){isDocument?this.querySelector("#"+outerContainerId).classList.remove("dragging"):this.classList.remove("dragging");containerToBeFaded.classList.remove("faded")}}getDropCallbackForElement(containerToBeFaded,isDocument,dropCallback,outerContainerId){return function(event){try{const dt=event.dataTransfer;const files=dt.files;dropCallback(files[0])}catch(e){console.error(e)}finally{isDocument?this.querySelector("#"+outerContainerId).classList.remove("dragging"):this.classList.remove("dragging");containerToBeFaded.classList.remove("faded")}}}}function documentReady(callbackFunction){if(document.readyState==="complete"||document.readyState==="interactive"){setTimeout(callbackFunction,1)}else{document.addEventListener("DOMContentLoaded",callbackFunction)}}function log(header,message,...optionalParams){console.info(header+" "+message,...optionalParams)}function logStartup(message,...optionalParams){log("[DEMO STARTUP]",message,...optionalParams)}const bpmnVisualization=new BpmnVisualization(window.document.getElementById("graph"));function readAndLoadFile(f){const reader=new FileReader;reader.onload=()=>{bpmnVisualization.load(reader.result)};reader.readAsText(f)}new DropFileUserInterface(window,"drop-container","graph",readAndLoadFile);function handleFileSelect(evt){const f=evt.target.files[0];readAndLoadFile(f)}document.getElementById("bpmn-file").addEventListener("change",handleFileSelect,false);document.getElementById("file-selector").classList.remove("hidden");documentReady((function(){const log=logStartup;log("Checking if 'BPMN auto loading from url parameter' is requested");const parameters=new URLSearchParams(window.location.search);const bpmnParameterValue=parameters.get("bpmn");if(bpmnParameterValue){const bpmn=decodeURIComponent(bpmnParameterValue);log("BPMN auto loading");bpmnVisualization.load(bpmn);log("BPMN auto loading completed")}else{log("No BPMN auto loading")}}));
